# typed: strong

module Telnyx
  module Resources
    class MessagingProfiles
      sig { returns(Telnyx::Resources::MessagingProfiles::AutorespConfigs) }
      attr_reader :autoresp_configs

      # Create a messaging profile
      sig do
        params(
          name: String,
          whitelisted_destinations: T::Array[String],
          alpha_sender: T.nilable(String),
          daily_spend_limit: String,
          daily_spend_limit_enabled: T::Boolean,
          enabled: T::Boolean,
          mms_fall_back_to_sms: T::Boolean,
          mms_transcoding: T::Boolean,
          number_pool_settings: T.nilable(Telnyx::NumberPoolSettings::OrHash),
          url_shortener_settings:
            T.nilable(Telnyx::URLShortenerSettings::OrHash),
          webhook_api_version:
            Telnyx::MessagingProfileCreateParams::WebhookAPIVersion::OrSymbol,
          webhook_failover_url: T.nilable(String),
          webhook_url: T.nilable(String),
          request_options: Telnyx::RequestOptions::OrHash
        ).returns(Telnyx::Models::MessagingProfileCreateResponse)
      end
      def create(
        # A user friendly name for the messaging profile.
        name:,
        # Destinations to which the messaging profile is allowed to send. The elements in
        # the list must be valid ISO 3166-1 alpha-2 country codes. If set to `["*"]` all
        # destinations will be allowed.
        whitelisted_destinations:,
        # The alphanumeric sender ID to use when sending to destinations that require an
        # alphanumeric sender ID.
        alpha_sender: nil,
        # The maximum amount of money (in USD) that can be spent by this profile before
        # midnight UTC.
        daily_spend_limit: nil,
        # Whether to enforce the value configured by `daily_spend_limit`.
        daily_spend_limit_enabled: nil,
        # Specifies whether the messaging profile is enabled or not.
        enabled: nil,
        # enables SMS fallback for MMS messages.
        mms_fall_back_to_sms: nil,
        # enables automated resizing of MMS media.
        mms_transcoding: nil,
        # Number Pool allows you to send messages from a pool of numbers of different
        # types, assigning weights to each type. The pool consists of all the long code
        # and toll free numbers assigned to the messaging profile.
        #
        # To disable this feature, set the object field to `null`.
        number_pool_settings: nil,
        # The URL shortener feature allows automatic replacement of URLs that were
        # generated using a public URL shortener service. Some examples include bit.do,
        # bit.ly, goo.gl, ht.ly, is.gd, ow.ly, rebrand.ly, t.co, tiny.cc, and tinyurl.com.
        # Such URLs are replaced with with links generated by Telnyx. The use of custom
        # links can improve branding and message deliverability.
        #
        # To disable this feature, set the object field to `null`.
        url_shortener_settings: nil,
        # Determines which webhook format will be used, Telnyx API v1, v2, or a legacy
        # 2010-04-01 format.
        webhook_api_version: nil,
        # The failover URL where webhooks related to this messaging profile will be sent
        # if sending to the primary URL fails.
        webhook_failover_url: nil,
        # The URL where webhooks related to this messaging profile will be sent.
        webhook_url: nil,
        request_options: {}
      )
      end

      # Retrieve a messaging profile
      sig do
        params(
          id: String,
          request_options: Telnyx::RequestOptions::OrHash
        ).returns(Telnyx::Models::MessagingProfileRetrieveResponse)
      end
      def retrieve(
        # The id of the messaging profile to retrieve
        id,
        request_options: {}
      )
      end

      # Update a messaging profile
      sig do
        params(
          id: String,
          alpha_sender: T.nilable(String),
          daily_spend_limit: String,
          daily_spend_limit_enabled: T::Boolean,
          enabled: T::Boolean,
          mms_fall_back_to_sms: T::Boolean,
          mms_transcoding: T::Boolean,
          name: String,
          number_pool_settings: T.nilable(Telnyx::NumberPoolSettings::OrHash),
          url_shortener_settings:
            T.nilable(Telnyx::URLShortenerSettings::OrHash),
          v1_secret: String,
          webhook_api_version:
            Telnyx::MessagingProfileUpdateParams::WebhookAPIVersion::OrSymbol,
          webhook_failover_url: T.nilable(String),
          webhook_url: T.nilable(String),
          whitelisted_destinations: T::Array[String],
          request_options: Telnyx::RequestOptions::OrHash
        ).returns(Telnyx::Models::MessagingProfileUpdateResponse)
      end
      def update(
        # The id of the messaging profile to retrieve
        id,
        # The alphanumeric sender ID to use when sending to destinations that require an
        # alphanumeric sender ID.
        alpha_sender: nil,
        # The maximum amount of money (in USD) that can be spent by this profile before
        # midnight UTC.
        daily_spend_limit: nil,
        # Whether to enforce the value configured by `daily_spend_limit`.
        daily_spend_limit_enabled: nil,
        # Specifies whether the messaging profile is enabled or not.
        enabled: nil,
        # enables SMS fallback for MMS messages.
        mms_fall_back_to_sms: nil,
        # enables automated resizing of MMS media.
        mms_transcoding: nil,
        # A user friendly name for the messaging profile.
        name: nil,
        # Number Pool allows you to send messages from a pool of numbers of different
        # types, assigning weights to each type. The pool consists of all the long code
        # and toll free numbers assigned to the messaging profile.
        #
        # To disable this feature, set the object field to `null`.
        number_pool_settings: nil,
        # The URL shortener feature allows automatic replacement of URLs that were
        # generated using a public URL shortener service. Some examples include bit.do,
        # bit.ly, goo.gl, ht.ly, is.gd, ow.ly, rebrand.ly, t.co, tiny.cc, and tinyurl.com.
        # Such URLs are replaced with with links generated by Telnyx. The use of custom
        # links can improve branding and message deliverability.
        #
        # To disable this feature, set the object field to `null`.
        url_shortener_settings: nil,
        # Secret used to authenticate with v1 endpoints.
        v1_secret: nil,
        # Determines which webhook format will be used, Telnyx API v1, v2, or a legacy
        # 2010-04-01 format.
        webhook_api_version: nil,
        # The failover URL where webhooks related to this messaging profile will be sent
        # if sending to the primary URL fails.
        webhook_failover_url: nil,
        # The URL where webhooks related to this messaging profile will be sent.
        webhook_url: nil,
        # Destinations to which the messaging profile is allowed to send. The elements in
        # the list must be valid ISO 3166-1 alpha-2 country codes. If set to `["*"]`, all
        # destinations will be allowed.
        #
        # This field is required if the messaging profile doesn't have it defined yet.
        whitelisted_destinations: nil,
        request_options: {}
      )
      end

      # List messaging profiles
      sig do
        params(
          filter: Telnyx::MessagingProfileListParams::Filter::OrHash,
          page: Telnyx::MessagingProfileListParams::Page::OrHash,
          request_options: Telnyx::RequestOptions::OrHash
        ).returns(Telnyx::Models::MessagingProfileListResponse)
      end
      def list(
        # Consolidated filter parameter (deepObject style). Originally: filter[name]
        filter: nil,
        # Consolidated page parameter (deepObject style). Originally: page[number],
        # page[size]
        page: nil,
        request_options: {}
      )
      end

      # Delete a messaging profile
      sig do
        params(
          id: String,
          request_options: Telnyx::RequestOptions::OrHash
        ).returns(Telnyx::Models::MessagingProfileDeleteResponse)
      end
      def delete(
        # The id of the messaging profile to retrieve
        id,
        request_options: {}
      )
      end

      # List phone numbers associated with a messaging profile
      sig do
        params(
          id: String,
          page: Telnyx::MessagingProfileListPhoneNumbersParams::Page::OrHash,
          request_options: Telnyx::RequestOptions::OrHash
        ).returns(Telnyx::Models::MessagingProfileListPhoneNumbersResponse)
      end
      def list_phone_numbers(
        # The id of the messaging profile to retrieve
        id,
        # Consolidated page parameter (deepObject style). Originally: page[number],
        # page[size]
        page: nil,
        request_options: {}
      )
      end

      # List short codes associated with a messaging profile
      sig do
        params(
          id: String,
          page: Telnyx::MessagingProfileListShortCodesParams::Page::OrHash,
          request_options: Telnyx::RequestOptions::OrHash
        ).returns(Telnyx::Models::MessagingProfileListShortCodesResponse)
      end
      def list_short_codes(
        # The id of the messaging profile to retrieve
        id,
        # Consolidated page parameter (deepObject style). Originally: page[number],
        # page[size]
        page: nil,
        request_options: {}
      )
      end

      # @api private
      sig { params(client: Telnyx::Client).returns(T.attached_class) }
      def self.new(client:)
      end
    end
  end
end
