# typed: strong

module Telnyx
  module Models
    class PartnerCampaignListSharedByMeResponse < Telnyx::Internal::Type::BaseModel
      OrHash =
        T.type_alias do
          T.any(
            Telnyx::Models::PartnerCampaignListSharedByMeResponse,
            Telnyx::Internal::AnyHash
          )
        end

      sig { returns(T.nilable(Integer)) }
      attr_reader :page

      sig { params(page: Integer).void }
      attr_writer :page

      sig do
        returns(
          T.nilable(
            T::Array[
              Telnyx::Models::PartnerCampaignListSharedByMeResponse::Record
            ]
          )
        )
      end
      attr_reader :records

      sig do
        params(
          records:
            T::Array[
              Telnyx::Models::PartnerCampaignListSharedByMeResponse::Record::OrHash
            ]
        ).void
      end
      attr_writer :records

      sig { returns(T.nilable(Integer)) }
      attr_reader :total_records

      sig { params(total_records: Integer).void }
      attr_writer :total_records

      sig do
        params(
          page: Integer,
          records:
            T::Array[
              Telnyx::Models::PartnerCampaignListSharedByMeResponse::Record::OrHash
            ],
          total_records: Integer
        ).returns(T.attached_class)
      end
      def self.new(page: nil, records: nil, total_records: nil)
      end

      sig do
        override.returns(
          {
            page: Integer,
            records:
              T::Array[
                Telnyx::Models::PartnerCampaignListSharedByMeResponse::Record
              ],
            total_records: Integer
          }
        )
      end
      def to_hash
      end

      class Record < Telnyx::Internal::Type::BaseModel
        OrHash =
          T.type_alias do
            T.any(
              Telnyx::Models::PartnerCampaignListSharedByMeResponse::Record,
              Telnyx::Internal::AnyHash
            )
          end

        # Alphanumeric identifier of the brand associated with this campaign.
        sig { returns(String) }
        attr_accessor :brand_id

        # Alphanumeric identifier assigned by the registry for a campaign. This identifier
        # is required by the NetNumber OSR SMS enabling process of 10DLC.
        sig { returns(String) }
        attr_accessor :campaign_id

        # Campaign usecase. Must be of defined valid types. Use `/registry/enum/usecase`
        # operation to retrieve usecases available for given brand.
        sig { returns(String) }
        attr_accessor :usecase

        # Unix timestamp when campaign was created.
        sig { returns(T.nilable(String)) }
        attr_reader :create_date

        sig { params(create_date: String).void }
        attr_writer :create_date

        # Current campaign status. Possible values: ACTIVE, EXPIRED. A newly created
        # campaign defaults to ACTIVE status.
        sig { returns(T.nilable(String)) }
        attr_reader :status

        sig { params(status: String).void }
        attr_writer :status

        # Campaign is generated by the 10DLC registry once the corresponding campaign
        # request is approved. Each campaign is assigned a unique identifier -
        # **campaignId**. Once a campaign is activated, limited information is published
        # to the NetNumber OSR service for consumption by members of the ecosystem. When a
        # campaign is suspended(reversible) or expired(non-reversible), campaign data is
        # deleted from the OSR service. Most attributes of campaignare immutable,
        # including **usecase**, **vertical**, **brandId** and **cspId**.
        sig do
          params(
            brand_id: String,
            campaign_id: String,
            usecase: String,
            create_date: String,
            status: String
          ).returns(T.attached_class)
        end
        def self.new(
          # Alphanumeric identifier of the brand associated with this campaign.
          brand_id:,
          # Alphanumeric identifier assigned by the registry for a campaign. This identifier
          # is required by the NetNumber OSR SMS enabling process of 10DLC.
          campaign_id:,
          # Campaign usecase. Must be of defined valid types. Use `/registry/enum/usecase`
          # operation to retrieve usecases available for given brand.
          usecase:,
          # Unix timestamp when campaign was created.
          create_date: nil,
          # Current campaign status. Possible values: ACTIVE, EXPIRED. A newly created
          # campaign defaults to ACTIVE status.
          status: nil
        )
        end

        sig do
          override.returns(
            {
              brand_id: String,
              campaign_id: String,
              usecase: String,
              create_date: String,
              status: String
            }
          )
        end
        def to_hash
        end
      end
    end
  end
end
