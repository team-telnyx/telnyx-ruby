# typed: strong

module Telnyx
  module Models
    class MessagingProfileUpdateParams < Telnyx::Internal::Type::BaseModel
      extend Telnyx::Internal::Type::RequestParameters::Converter
      include Telnyx::Internal::Type::RequestParameters

      OrHash =
        T.type_alias do
          T.any(Telnyx::MessagingProfileUpdateParams, Telnyx::Internal::AnyHash)
        end

      # The alphanumeric sender ID to use when sending to destinations that require an
      # alphanumeric sender ID.
      sig { returns(T.nilable(String)) }
      attr_accessor :alpha_sender

      # The maximum amount of money (in USD) that can be spent by this profile before
      # midnight UTC.
      sig { returns(T.nilable(String)) }
      attr_reader :daily_spend_limit

      sig { params(daily_spend_limit: String).void }
      attr_writer :daily_spend_limit

      # Whether to enforce the value configured by `daily_spend_limit`.
      sig { returns(T.nilable(T::Boolean)) }
      attr_reader :daily_spend_limit_enabled

      sig { params(daily_spend_limit_enabled: T::Boolean).void }
      attr_writer :daily_spend_limit_enabled

      # Specifies whether the messaging profile is enabled or not.
      sig { returns(T.nilable(T::Boolean)) }
      attr_reader :enabled

      sig { params(enabled: T::Boolean).void }
      attr_writer :enabled

      # enables SMS fallback for MMS messages.
      sig { returns(T.nilable(T::Boolean)) }
      attr_reader :mms_fall_back_to_sms

      sig { params(mms_fall_back_to_sms: T::Boolean).void }
      attr_writer :mms_fall_back_to_sms

      # enables automated resizing of MMS media.
      sig { returns(T.nilable(T::Boolean)) }
      attr_reader :mms_transcoding

      sig { params(mms_transcoding: T::Boolean).void }
      attr_writer :mms_transcoding

      # Send messages only to mobile phone numbers.
      sig { returns(T.nilable(T::Boolean)) }
      attr_reader :mobile_only

      sig { params(mobile_only: T::Boolean).void }
      attr_writer :mobile_only

      # A user friendly name for the messaging profile.
      sig { returns(T.nilable(String)) }
      attr_reader :name

      sig { params(name: String).void }
      attr_writer :name

      # Number Pool allows you to send messages from a pool of numbers of different
      # types, assigning weights to each type. The pool consists of all the long code
      # and toll free numbers assigned to the messaging profile.
      #
      # To disable this feature, set the object field to `null`.
      sig { returns(T.nilable(Telnyx::NumberPoolSettings)) }
      attr_reader :number_pool_settings

      sig do
        params(
          number_pool_settings: T.nilable(Telnyx::NumberPoolSettings::OrHash)
        ).void
      end
      attr_writer :number_pool_settings

      # The URL shortener feature allows automatic replacement of URLs that were
      # generated using a public URL shortener service. Some examples include bit.do,
      # bit.ly, goo.gl, ht.ly, is.gd, ow.ly, rebrand.ly, t.co, tiny.cc, and tinyurl.com.
      # Such URLs are replaced with with links generated by Telnyx. The use of custom
      # links can improve branding and message deliverability.
      #
      # To disable this feature, set the object field to `null`.
      sig { returns(T.nilable(Telnyx::URLShortenerSettings)) }
      attr_reader :url_shortener_settings

      sig do
        params(
          url_shortener_settings:
            T.nilable(Telnyx::URLShortenerSettings::OrHash)
        ).void
      end
      attr_writer :url_shortener_settings

      # Secret used to authenticate with v1 endpoints.
      sig { returns(T.nilable(String)) }
      attr_reader :v1_secret

      sig { params(v1_secret: String).void }
      attr_writer :v1_secret

      # Determines which webhook format will be used, Telnyx API v1, v2, or a legacy
      # 2010-04-01 format.
      sig do
        returns(
          T.nilable(
            Telnyx::MessagingProfileUpdateParams::WebhookAPIVersion::OrSymbol
          )
        )
      end
      attr_reader :webhook_api_version

      sig do
        params(
          webhook_api_version:
            Telnyx::MessagingProfileUpdateParams::WebhookAPIVersion::OrSymbol
        ).void
      end
      attr_writer :webhook_api_version

      # The failover URL where webhooks related to this messaging profile will be sent
      # if sending to the primary URL fails.
      sig { returns(T.nilable(String)) }
      attr_accessor :webhook_failover_url

      # The URL where webhooks related to this messaging profile will be sent.
      sig { returns(T.nilable(String)) }
      attr_accessor :webhook_url

      # Destinations to which the messaging profile is allowed to send. The elements in
      # the list must be valid ISO 3166-1 alpha-2 country codes. If set to `["*"]`, all
      # destinations will be allowed.
      #
      # This field is required if the messaging profile doesn't have it defined yet.
      sig { returns(T.nilable(T::Array[String])) }
      attr_reader :whitelisted_destinations

      sig { params(whitelisted_destinations: T::Array[String]).void }
      attr_writer :whitelisted_destinations

      sig do
        params(
          alpha_sender: T.nilable(String),
          daily_spend_limit: String,
          daily_spend_limit_enabled: T::Boolean,
          enabled: T::Boolean,
          mms_fall_back_to_sms: T::Boolean,
          mms_transcoding: T::Boolean,
          mobile_only: T::Boolean,
          name: String,
          number_pool_settings: T.nilable(Telnyx::NumberPoolSettings::OrHash),
          url_shortener_settings:
            T.nilable(Telnyx::URLShortenerSettings::OrHash),
          v1_secret: String,
          webhook_api_version:
            Telnyx::MessagingProfileUpdateParams::WebhookAPIVersion::OrSymbol,
          webhook_failover_url: T.nilable(String),
          webhook_url: T.nilable(String),
          whitelisted_destinations: T::Array[String],
          request_options: Telnyx::RequestOptions::OrHash
        ).returns(T.attached_class)
      end
      def self.new(
        # The alphanumeric sender ID to use when sending to destinations that require an
        # alphanumeric sender ID.
        alpha_sender: nil,
        # The maximum amount of money (in USD) that can be spent by this profile before
        # midnight UTC.
        daily_spend_limit: nil,
        # Whether to enforce the value configured by `daily_spend_limit`.
        daily_spend_limit_enabled: nil,
        # Specifies whether the messaging profile is enabled or not.
        enabled: nil,
        # enables SMS fallback for MMS messages.
        mms_fall_back_to_sms: nil,
        # enables automated resizing of MMS media.
        mms_transcoding: nil,
        # Send messages only to mobile phone numbers.
        mobile_only: nil,
        # A user friendly name for the messaging profile.
        name: nil,
        # Number Pool allows you to send messages from a pool of numbers of different
        # types, assigning weights to each type. The pool consists of all the long code
        # and toll free numbers assigned to the messaging profile.
        #
        # To disable this feature, set the object field to `null`.
        number_pool_settings: nil,
        # The URL shortener feature allows automatic replacement of URLs that were
        # generated using a public URL shortener service. Some examples include bit.do,
        # bit.ly, goo.gl, ht.ly, is.gd, ow.ly, rebrand.ly, t.co, tiny.cc, and tinyurl.com.
        # Such URLs are replaced with with links generated by Telnyx. The use of custom
        # links can improve branding and message deliverability.
        #
        # To disable this feature, set the object field to `null`.
        url_shortener_settings: nil,
        # Secret used to authenticate with v1 endpoints.
        v1_secret: nil,
        # Determines which webhook format will be used, Telnyx API v1, v2, or a legacy
        # 2010-04-01 format.
        webhook_api_version: nil,
        # The failover URL where webhooks related to this messaging profile will be sent
        # if sending to the primary URL fails.
        webhook_failover_url: nil,
        # The URL where webhooks related to this messaging profile will be sent.
        webhook_url: nil,
        # Destinations to which the messaging profile is allowed to send. The elements in
        # the list must be valid ISO 3166-1 alpha-2 country codes. If set to `["*"]`, all
        # destinations will be allowed.
        #
        # This field is required if the messaging profile doesn't have it defined yet.
        whitelisted_destinations: nil,
        request_options: {}
      )
      end

      sig do
        override.returns(
          {
            alpha_sender: T.nilable(String),
            daily_spend_limit: String,
            daily_spend_limit_enabled: T::Boolean,
            enabled: T::Boolean,
            mms_fall_back_to_sms: T::Boolean,
            mms_transcoding: T::Boolean,
            mobile_only: T::Boolean,
            name: String,
            number_pool_settings: T.nilable(Telnyx::NumberPoolSettings),
            url_shortener_settings: T.nilable(Telnyx::URLShortenerSettings),
            v1_secret: String,
            webhook_api_version:
              Telnyx::MessagingProfileUpdateParams::WebhookAPIVersion::OrSymbol,
            webhook_failover_url: T.nilable(String),
            webhook_url: T.nilable(String),
            whitelisted_destinations: T::Array[String],
            request_options: Telnyx::RequestOptions
          }
        )
      end
      def to_hash
      end

      # Determines which webhook format will be used, Telnyx API v1, v2, or a legacy
      # 2010-04-01 format.
      module WebhookAPIVersion
        extend Telnyx::Internal::Type::Enum

        TaggedSymbol =
          T.type_alias do
            T.all(
              Symbol,
              Telnyx::MessagingProfileUpdateParams::WebhookAPIVersion
            )
          end
        OrSymbol = T.type_alias { T.any(Symbol, String) }

        WEBHOOK_API_VERSION_1 =
          T.let(
            :"1",
            Telnyx::MessagingProfileUpdateParams::WebhookAPIVersion::TaggedSymbol
          )
        WEBHOOK_API_VERSION_2 =
          T.let(
            :"2",
            Telnyx::MessagingProfileUpdateParams::WebhookAPIVersion::TaggedSymbol
          )
        WEBHOOK_API_VERSION_2010_04_01 =
          T.let(
            :"2010-04-01",
            Telnyx::MessagingProfileUpdateParams::WebhookAPIVersion::TaggedSymbol
          )

        sig do
          override.returns(
            T::Array[
              Telnyx::MessagingProfileUpdateParams::WebhookAPIVersion::TaggedSymbol
            ]
          )
        end
        def self.values
        end
      end
    end
  end
end
