module Telnyx
  module Models
    module Texml
      module Accounts
        module Conferences
          type participant_retrieve_participants_response =
            {
              end_: Integer,
              first_page_uri: String,
              next_page_uri: String,
              page: Integer,
              page_size: Integer,
              participants: ::Array[Telnyx::Models::Texml::Accounts::Conferences::ParticipantRetrieveParticipantsResponse::Participant],
              start: Integer,
              uri: String
            }

          class ParticipantRetrieveParticipantsResponse < Telnyx::Internal::Type::BaseModel
            attr_reader end_: Integer?

            def end_=: (Integer) -> Integer

            attr_reader first_page_uri: String?

            def first_page_uri=: (String) -> String

            attr_reader next_page_uri: String?

            def next_page_uri=: (String) -> String

            attr_reader page: Integer?

            def page=: (Integer) -> Integer

            attr_reader page_size: Integer?

            def page_size=: (Integer) -> Integer

            attr_reader participants: ::Array[Telnyx::Models::Texml::Accounts::Conferences::ParticipantRetrieveParticipantsResponse::Participant]?

            def participants=: (
              ::Array[Telnyx::Models::Texml::Accounts::Conferences::ParticipantRetrieveParticipantsResponse::Participant]
            ) -> ::Array[Telnyx::Models::Texml::Accounts::Conferences::ParticipantRetrieveParticipantsResponse::Participant]

            attr_reader start: Integer?

            def start=: (Integer) -> Integer

            attr_reader uri: String?

            def uri=: (String) -> String

            def initialize: (
              ?end_: Integer,
              ?first_page_uri: String,
              ?next_page_uri: String,
              ?page: Integer,
              ?page_size: Integer,
              ?participants: ::Array[Telnyx::Models::Texml::Accounts::Conferences::ParticipantRetrieveParticipantsResponse::Participant],
              ?start: Integer,
              ?uri: String
            ) -> void

            def to_hash: -> {
              end_: Integer,
              first_page_uri: String,
              next_page_uri: String,
              page: Integer,
              page_size: Integer,
              participants: ::Array[Telnyx::Models::Texml::Accounts::Conferences::ParticipantRetrieveParticipantsResponse::Participant],
              start: Integer,
              uri: String
            }

            type participant =
              {
                account_sid: String,
                api_version: String,
                call_sid: String,
                call_sid_legacy: String,
                coaching: bool,
                coaching_call_sid: String,
                coaching_call_sid_legacy: String,
                date_created: String,
                date_updated: String,
                end_conference_on_exit: bool,
                hold: bool,
                muted: bool,
                status: Telnyx::Models::Texml::Accounts::Conferences::ParticipantRetrieveParticipantsResponse::Participant::status,
                uri: String
              }

            class Participant < Telnyx::Internal::Type::BaseModel
              attr_reader account_sid: String?

              def account_sid=: (String) -> String

              attr_reader api_version: String?

              def api_version=: (String) -> String

              attr_reader call_sid: String?

              def call_sid=: (String) -> String

              attr_reader call_sid_legacy: String?

              def call_sid_legacy=: (String) -> String

              attr_reader coaching: bool?

              def coaching=: (bool) -> bool

              attr_reader coaching_call_sid: String?

              def coaching_call_sid=: (String) -> String

              attr_reader coaching_call_sid_legacy: String?

              def coaching_call_sid_legacy=: (String) -> String

              attr_reader date_created: String?

              def date_created=: (String) -> String

              attr_reader date_updated: String?

              def date_updated=: (String) -> String

              attr_reader end_conference_on_exit: bool?

              def end_conference_on_exit=: (bool) -> bool

              attr_reader hold: bool?

              def hold=: (bool) -> bool

              attr_reader muted: bool?

              def muted=: (bool) -> bool

              attr_reader status: Telnyx::Models::Texml::Accounts::Conferences::ParticipantRetrieveParticipantsResponse::Participant::status?

              def status=: (
                Telnyx::Models::Texml::Accounts::Conferences::ParticipantRetrieveParticipantsResponse::Participant::status
              ) -> Telnyx::Models::Texml::Accounts::Conferences::ParticipantRetrieveParticipantsResponse::Participant::status

              attr_reader uri: String?

              def uri=: (String) -> String

              def initialize: (
                ?account_sid: String,
                ?api_version: String,
                ?call_sid: String,
                ?call_sid_legacy: String,
                ?coaching: bool,
                ?coaching_call_sid: String,
                ?coaching_call_sid_legacy: String,
                ?date_created: String,
                ?date_updated: String,
                ?end_conference_on_exit: bool,
                ?hold: bool,
                ?muted: bool,
                ?status: Telnyx::Models::Texml::Accounts::Conferences::ParticipantRetrieveParticipantsResponse::Participant::status,
                ?uri: String
              ) -> void

              def to_hash: -> {
                account_sid: String,
                api_version: String,
                call_sid: String,
                call_sid_legacy: String,
                coaching: bool,
                coaching_call_sid: String,
                coaching_call_sid_legacy: String,
                date_created: String,
                date_updated: String,
                end_conference_on_exit: bool,
                hold: bool,
                muted: bool,
                status: Telnyx::Models::Texml::Accounts::Conferences::ParticipantRetrieveParticipantsResponse::Participant::status,
                uri: String
              }

              type status = :connecting | :connected | :completed

              module Status
                extend Telnyx::Internal::Type::Enum

                CONNECTING: :connecting
                CONNECTED: :connected
                COMPLETED: :completed

                def self?.values: -> ::Array[Telnyx::Models::Texml::Accounts::Conferences::ParticipantRetrieveParticipantsResponse::Participant::status]
              end
            end
          end
        end
      end
    end
  end
end
