module Telnyx
  module Models
    module Texml
      module Accounts
        type conference_update_params =
          {
            account_sid: String,
            announce_method: Telnyx::Models::Texml::Accounts::ConferenceUpdateParams::announce_method,
            announce_url: String,
            status: String
          }
          & Telnyx::Internal::Type::request_parameters

        class ConferenceUpdateParams < Telnyx::Internal::Type::BaseModel
          extend Telnyx::Internal::Type::RequestParameters::Converter
          include Telnyx::Internal::Type::RequestParameters

          attr_accessor account_sid: String

          attr_reader announce_method: Telnyx::Models::Texml::Accounts::ConferenceUpdateParams::announce_method?

          def announce_method=: (
            Telnyx::Models::Texml::Accounts::ConferenceUpdateParams::announce_method
          ) -> Telnyx::Models::Texml::Accounts::ConferenceUpdateParams::announce_method

          attr_reader announce_url: String?

          def announce_url=: (String) -> String

          attr_reader status: String?

          def status=: (String) -> String

          def initialize: (
            account_sid: String,
            ?announce_method: Telnyx::Models::Texml::Accounts::ConferenceUpdateParams::announce_method,
            ?announce_url: String,
            ?status: String,
            ?request_options: Telnyx::request_opts
          ) -> void

          def to_hash: -> {
            account_sid: String,
            announce_method: Telnyx::Models::Texml::Accounts::ConferenceUpdateParams::announce_method,
            announce_url: String,
            status: String,
            request_options: Telnyx::RequestOptions
          }

          type announce_method = :GET | :POST

          module AnnounceMethod
            extend Telnyx::Internal::Type::Enum

            GET: :GET
            POST: :POST

            def self?.values: -> ::Array[Telnyx::Models::Texml::Accounts::ConferenceUpdateParams::announce_method]
          end
        end
      end
    end
  end
end
