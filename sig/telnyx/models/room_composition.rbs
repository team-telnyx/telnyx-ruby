module Telnyx
  module Models
    type room_composition =
      {
        id: String,
        completed_at: Time,
        created_at: Time,
        download_url: String,
        duration_secs: Integer,
        ended_at: Time,
        format_: Telnyx::Models::RoomComposition::format_,
        record_type: String,
        room_id: String,
        session_id: String,
        size_mb: Float,
        started_at: Time,
        status: Telnyx::Models::RoomComposition::status,
        updated_at: Time,
        user_id: String,
        video_layout: ::Hash[Symbol, Telnyx::VideoRegion],
        webhook_event_failover_url: String?,
        webhook_event_url: String,
        webhook_timeout_secs: Integer?
      }

    class RoomComposition < Telnyx::Internal::Type::BaseModel
      attr_reader id: String?

      def id=: (String) -> String

      attr_reader completed_at: Time?

      def completed_at=: (Time) -> Time

      attr_reader created_at: Time?

      def created_at=: (Time) -> Time

      attr_reader download_url: String?

      def download_url=: (String) -> String

      attr_reader duration_secs: Integer?

      def duration_secs=: (Integer) -> Integer

      attr_reader ended_at: Time?

      def ended_at=: (Time) -> Time

      attr_reader format_: Telnyx::Models::RoomComposition::format_?

      def format_=: (
        Telnyx::Models::RoomComposition::format_
      ) -> Telnyx::Models::RoomComposition::format_

      attr_reader room_id: String?

      def room_id=: (String) -> String

      attr_reader session_id: String?

      def session_id=: (String) -> String

      attr_reader size_mb: Float?

      def size_mb=: (Float) -> Float

      attr_reader started_at: Time?

      def started_at=: (Time) -> Time

      attr_reader status: Telnyx::Models::RoomComposition::status?

      def status=: (
        Telnyx::Models::RoomComposition::status
      ) -> Telnyx::Models::RoomComposition::status

      attr_reader updated_at: Time?

      def updated_at=: (Time) -> Time

      attr_reader user_id: String?

      def user_id=: (String) -> String

      attr_reader video_layout: ::Hash[Symbol, Telnyx::VideoRegion]?

      def video_layout=: (
        ::Hash[Symbol, Telnyx::VideoRegion]
      ) -> ::Hash[Symbol, Telnyx::VideoRegion]

      attr_accessor webhook_event_failover_url: String?

      attr_reader webhook_event_url: String?

      def webhook_event_url=: (String) -> String

      attr_accessor webhook_timeout_secs: Integer?

      attr_reader record_type: String?

      def record_type=: (String) -> String

      def initialize: (
        ?id: String,
        ?completed_at: Time,
        ?created_at: Time,
        ?download_url: String,
        ?duration_secs: Integer,
        ?ended_at: Time,
        ?format_: Telnyx::Models::RoomComposition::format_,
        ?record_type: String,
        ?room_id: String,
        ?session_id: String,
        ?size_mb: Float,
        ?started_at: Time,
        ?status: Telnyx::Models::RoomComposition::status,
        ?updated_at: Time,
        ?user_id: String,
        ?video_layout: ::Hash[Symbol, Telnyx::VideoRegion],
        ?webhook_event_failover_url: String?,
        ?webhook_event_url: String,
        ?webhook_timeout_secs: Integer?
      ) -> void

      def to_hash: -> {
        id: String,
        completed_at: Time,
        created_at: Time,
        download_url: String,
        duration_secs: Integer,
        ended_at: Time,
        format_: Telnyx::Models::RoomComposition::format_,
        record_type: String,
        room_id: String,
        session_id: String,
        size_mb: Float,
        started_at: Time,
        status: Telnyx::Models::RoomComposition::status,
        updated_at: Time,
        user_id: String,
        video_layout: ::Hash[Symbol, Telnyx::VideoRegion],
        webhook_event_failover_url: String?,
        webhook_event_url: String,
        webhook_timeout_secs: Integer?
      }

      type format_ = :mp4

      module Format
        extend Telnyx::Internal::Type::Enum

        MP4: :mp4

        def self?.values: -> ::Array[Telnyx::Models::RoomComposition::format_]
      end

      type status = :completed | :enqueued | :processing

      module Status
        extend Telnyx::Internal::Type::Enum

        COMPLETED: :completed
        ENQUEUED: :enqueued
        PROCESSING: :processing

        def self?.values: -> ::Array[Telnyx::Models::RoomComposition::status]
      end
    end
  end
end
