module Telnyx
  module Models
    type porting_order_activation_settings =
      {
        activation_status: Telnyx::Models::PortingOrderActivationSettings::activation_status,
        fast_port_eligible: bool,
        foc_datetime_actual: Time,
        foc_datetime_requested: Time
      }

    class PortingOrderActivationSettings < Telnyx::Internal::Type::BaseModel
      attr_reader activation_status: Telnyx::Models::PortingOrderActivationSettings::activation_status?

      def activation_status=: (
        Telnyx::Models::PortingOrderActivationSettings::activation_status
      ) -> Telnyx::Models::PortingOrderActivationSettings::activation_status

      attr_reader foc_datetime_actual: Time?

      def foc_datetime_actual=: (Time) -> Time

      attr_reader foc_datetime_requested: Time?

      def foc_datetime_requested=: (Time) -> Time

      attr_reader fast_port_eligible: bool?

      def fast_port_eligible=: (bool) -> bool

      def initialize: (
        ?activation_status: Telnyx::Models::PortingOrderActivationSettings::activation_status,
        ?fast_port_eligible: bool,
        ?foc_datetime_actual: Time,
        ?foc_datetime_requested: Time
      ) -> void

      def to_hash: -> {
        activation_status: Telnyx::Models::PortingOrderActivationSettings::activation_status,
        fast_port_eligible: bool,
        foc_datetime_actual: Time,
        foc_datetime_requested: Time
      }

      type activation_status =
        :New
        | :Pending
        | :Conflict
        | :"Cancel Pending"
        | :Failed
        | :Concurred
        | :"Activate RDY"
        | :"Disconnect Pending"
        | :"Concurrence Sent"
        | :Old
        | :Sending
        | :Active
        | :Cancelled

      module ActivationStatus
        extend Telnyx::Internal::Type::Enum

        NEW: :New
        PENDING: :Pending
        CONFLICT: :Conflict
        CANCEL_PENDING: :"Cancel Pending"
        FAILED: :Failed
        CONCURRED: :Concurred
        ACTIVATE_RDY: :"Activate RDY"
        DISCONNECT_PENDING: :"Disconnect Pending"
        CONCURRENCE_SENT: :"Concurrence Sent"
        OLD: :Old
        SENDING: :Sending
        ACTIVE: :Active
        CANCELLED: :Cancelled

        def self?.values: -> ::Array[Telnyx::Models::PortingOrderActivationSettings::activation_status]
      end
    end
  end
end
