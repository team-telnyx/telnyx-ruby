module Telnyx
  module Models
    type ip_connection =
      {
        id: String,
        active: bool,
        anchorsite_override: Telnyx::Models::anchorsite_override,
        connection_name: String,
        created_at: String,
        default_on_hold_comfort_noise_enabled: bool,
        dtmf_type: Telnyx::Models::dtmf_type,
        encode_contact_header_enabled: bool,
        encrypted_media: Telnyx::Models::encrypted_media?,
        inbound: Telnyx::InboundIP,
        :onnet_t38_passthrough_enabled => bool,
        outbound: Telnyx::OutboundIP,
        record_type: String,
        rtcp_settings: Telnyx::ConnectionRtcpSettings,
        tags: ::Array[String],
        transport_protocol: Telnyx::Models::IPConnection::transport_protocol,
        updated_at: String,
        webhook_api_version: Telnyx::Models::IPConnection::webhook_api_version,
        webhook_event_failover_url: String?,
        webhook_event_url: String,
        webhook_timeout_secs: Integer?
      }

    class IPConnection < Telnyx::Internal::Type::BaseModel
      attr_reader id: String?

      def id=: (String) -> String

      attr_reader active: bool?

      def active=: (bool) -> bool

      attr_reader anchorsite_override: Telnyx::Models::anchorsite_override?

      def anchorsite_override=: (
        Telnyx::Models::anchorsite_override
      ) -> Telnyx::Models::anchorsite_override

      attr_reader connection_name: String?

      def connection_name=: (String) -> String

      attr_reader created_at: String?

      def created_at=: (String) -> String

      attr_reader default_on_hold_comfort_noise_enabled: bool?

      def default_on_hold_comfort_noise_enabled=: (bool) -> bool

      attr_reader dtmf_type: Telnyx::Models::dtmf_type?

      def dtmf_type=: (Telnyx::Models::dtmf_type) -> Telnyx::Models::dtmf_type

      attr_reader encode_contact_header_enabled: bool?

      def encode_contact_header_enabled=: (bool) -> bool

      attr_accessor encrypted_media: Telnyx::Models::encrypted_media?

      attr_reader inbound: Telnyx::InboundIP?

      def inbound=: (Telnyx::InboundIP) -> Telnyx::InboundIP

      attr_reader onnet_t38_passthrough_enabled: bool?

      def onnet_t38_passthrough_enabled=: (bool) -> bool

      attr_reader outbound: Telnyx::OutboundIP?

      def outbound=: (Telnyx::OutboundIP) -> Telnyx::OutboundIP

      attr_reader record_type: String?

      def record_type=: (String) -> String

      attr_reader rtcp_settings: Telnyx::ConnectionRtcpSettings?

      def rtcp_settings=: (
        Telnyx::ConnectionRtcpSettings
      ) -> Telnyx::ConnectionRtcpSettings

      attr_reader tags: ::Array[String]?

      def tags=: (::Array[String]) -> ::Array[String]

      attr_reader transport_protocol: Telnyx::Models::IPConnection::transport_protocol?

      def transport_protocol=: (
        Telnyx::Models::IPConnection::transport_protocol
      ) -> Telnyx::Models::IPConnection::transport_protocol

      attr_reader updated_at: String?

      def updated_at=: (String) -> String

      attr_reader webhook_api_version: Telnyx::Models::IPConnection::webhook_api_version?

      def webhook_api_version=: (
        Telnyx::Models::IPConnection::webhook_api_version
      ) -> Telnyx::Models::IPConnection::webhook_api_version

      attr_accessor webhook_event_failover_url: String?

      attr_reader webhook_event_url: String?

      def webhook_event_url=: (String) -> String

      attr_accessor webhook_timeout_secs: Integer?

      def initialize: (
        ?id: String,
        ?active: bool,
        ?anchorsite_override: Telnyx::Models::anchorsite_override,
        ?connection_name: String,
        ?created_at: String,
        ?default_on_hold_comfort_noise_enabled: bool,
        ?dtmf_type: Telnyx::Models::dtmf_type,
        ?encode_contact_header_enabled: bool,
        ?encrypted_media: Telnyx::Models::encrypted_media?,
        ?inbound: Telnyx::InboundIP,
        ?onnet_t38_passthrough_enabled: bool,
        ?outbound: Telnyx::OutboundIP,
        ?record_type: String,
        ?rtcp_settings: Telnyx::ConnectionRtcpSettings,
        ?tags: ::Array[String],
        ?transport_protocol: Telnyx::Models::IPConnection::transport_protocol,
        ?updated_at: String,
        ?webhook_api_version: Telnyx::Models::IPConnection::webhook_api_version,
        ?webhook_event_failover_url: String?,
        ?webhook_event_url: String,
        ?webhook_timeout_secs: Integer?
      ) -> void

      def to_hash: -> {
        id: String,
        active: bool,
        anchorsite_override: Telnyx::Models::anchorsite_override,
        connection_name: String,
        created_at: String,
        default_on_hold_comfort_noise_enabled: bool,
        dtmf_type: Telnyx::Models::dtmf_type,
        encode_contact_header_enabled: bool,
        encrypted_media: Telnyx::Models::encrypted_media?,
        inbound: Telnyx::InboundIP,
        :onnet_t38_passthrough_enabled => bool,
        outbound: Telnyx::OutboundIP,
        record_type: String,
        rtcp_settings: Telnyx::ConnectionRtcpSettings,
        tags: ::Array[String],
        transport_protocol: Telnyx::Models::IPConnection::transport_protocol,
        updated_at: String,
        webhook_api_version: Telnyx::Models::IPConnection::webhook_api_version,
        webhook_event_failover_url: String?,
        webhook_event_url: String,
        webhook_timeout_secs: Integer?
      }

      type transport_protocol = :UDP | :TCP | :TLS

      module TransportProtocol
        extend Telnyx::Internal::Type::Enum

        UDP: :UDP
        TCP: :TCP
        TLS: :TLS

        def self?.values: -> ::Array[Telnyx::Models::IPConnection::transport_protocol]
      end

      type webhook_api_version = :"1" | :"2"

      module WebhookAPIVersion
        extend Telnyx::Internal::Type::Enum

        WEBHOOK_API_VERSION_1: :"1"
        WEBHOOK_API_VERSION_2: :"2"

        def self?.values: -> ::Array[Telnyx::Models::IPConnection::webhook_api_version]
      end
    end
  end
end
