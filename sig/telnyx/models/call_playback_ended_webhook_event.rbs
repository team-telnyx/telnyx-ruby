module Telnyx
  module Models
    type call_playback_ended_webhook_event =
      { data: Telnyx::CallPlaybackEndedWebhookEvent::Data }

    class CallPlaybackEndedWebhookEvent < Telnyx::Internal::Type::BaseModel
      attr_reader data: Telnyx::CallPlaybackEndedWebhookEvent::Data?

      def data=: (
        Telnyx::CallPlaybackEndedWebhookEvent::Data
      ) -> Telnyx::CallPlaybackEndedWebhookEvent::Data

      def initialize: (
        ?data: Telnyx::CallPlaybackEndedWebhookEvent::Data
      ) -> void

      def to_hash: -> { data: Telnyx::CallPlaybackEndedWebhookEvent::Data }

      type data =
        {
          id: String,
          event_type: Telnyx::Models::CallPlaybackEndedWebhookEvent::Data::event_type,
          occurred_at: Time,
          payload: Telnyx::CallPlaybackEndedWebhookEvent::Data::Payload,
          record_type: Telnyx::Models::CallPlaybackEndedWebhookEvent::Data::record_type
        }

      class Data < Telnyx::Internal::Type::BaseModel
        attr_reader id: String?

        def id=: (String) -> String

        attr_reader event_type: Telnyx::Models::CallPlaybackEndedWebhookEvent::Data::event_type?

        def event_type=: (
          Telnyx::Models::CallPlaybackEndedWebhookEvent::Data::event_type
        ) -> Telnyx::Models::CallPlaybackEndedWebhookEvent::Data::event_type

        attr_reader occurred_at: Time?

        def occurred_at=: (Time) -> Time

        attr_reader payload: Telnyx::CallPlaybackEndedWebhookEvent::Data::Payload?

        def payload=: (
          Telnyx::CallPlaybackEndedWebhookEvent::Data::Payload
        ) -> Telnyx::CallPlaybackEndedWebhookEvent::Data::Payload

        attr_reader record_type: Telnyx::Models::CallPlaybackEndedWebhookEvent::Data::record_type?

        def record_type=: (
          Telnyx::Models::CallPlaybackEndedWebhookEvent::Data::record_type
        ) -> Telnyx::Models::CallPlaybackEndedWebhookEvent::Data::record_type

        def initialize: (
          ?id: String,
          ?event_type: Telnyx::Models::CallPlaybackEndedWebhookEvent::Data::event_type,
          ?occurred_at: Time,
          ?payload: Telnyx::CallPlaybackEndedWebhookEvent::Data::Payload,
          ?record_type: Telnyx::Models::CallPlaybackEndedWebhookEvent::Data::record_type
        ) -> void

        def to_hash: -> {
          id: String,
          event_type: Telnyx::Models::CallPlaybackEndedWebhookEvent::Data::event_type,
          occurred_at: Time,
          payload: Telnyx::CallPlaybackEndedWebhookEvent::Data::Payload,
          record_type: Telnyx::Models::CallPlaybackEndedWebhookEvent::Data::record_type
        }

        type event_type = :"call.playback.ended"

        module EventType
          extend Telnyx::Internal::Type::Enum

          CALL_PLAYBACK_ENDED: :"call.playback.ended"

          def self?.values: -> ::Array[Telnyx::Models::CallPlaybackEndedWebhookEvent::Data::event_type]
        end

        type payload =
          {
            call_control_id: String,
            call_leg_id: String,
            call_session_id: String,
            client_state: String,
            connection_id: String,
            media_name: String,
            media_url: String,
            overlay: bool,
            status: Telnyx::Models::CallPlaybackEndedWebhookEvent::Data::Payload::status,
            status_detail: String
          }

        class Payload < Telnyx::Internal::Type::BaseModel
          attr_reader call_control_id: String?

          def call_control_id=: (String) -> String

          attr_reader call_leg_id: String?

          def call_leg_id=: (String) -> String

          attr_reader call_session_id: String?

          def call_session_id=: (String) -> String

          attr_reader client_state: String?

          def client_state=: (String) -> String

          attr_reader connection_id: String?

          def connection_id=: (String) -> String

          attr_reader media_name: String?

          def media_name=: (String) -> String

          attr_reader media_url: String?

          def media_url=: (String) -> String

          attr_reader overlay: bool?

          def overlay=: (bool) -> bool

          attr_reader status: Telnyx::Models::CallPlaybackEndedWebhookEvent::Data::Payload::status?

          def status=: (
            Telnyx::Models::CallPlaybackEndedWebhookEvent::Data::Payload::status
          ) -> Telnyx::Models::CallPlaybackEndedWebhookEvent::Data::Payload::status

          attr_reader status_detail: String?

          def status_detail=: (String) -> String

          def initialize: (
            ?call_control_id: String,
            ?call_leg_id: String,
            ?call_session_id: String,
            ?client_state: String,
            ?connection_id: String,
            ?media_name: String,
            ?media_url: String,
            ?overlay: bool,
            ?status: Telnyx::Models::CallPlaybackEndedWebhookEvent::Data::Payload::status,
            ?status_detail: String
          ) -> void

          def to_hash: -> {
            call_control_id: String,
            call_leg_id: String,
            call_session_id: String,
            client_state: String,
            connection_id: String,
            media_name: String,
            media_url: String,
            overlay: bool,
            status: Telnyx::Models::CallPlaybackEndedWebhookEvent::Data::Payload::status,
            status_detail: String
          }

          type status =
            :file_not_found
            | :call_hangup
            | :unknown
            | :cancelled
            | :cancelled_amd
            | :completed
            | :failed

          module Status
            extend Telnyx::Internal::Type::Enum

            FILE_NOT_FOUND: :file_not_found
            CALL_HANGUP: :call_hangup
            UNKNOWN: :unknown
            CANCELLED: :cancelled
            CANCELLED_AMD: :cancelled_amd
            COMPLETED: :completed
            FAILED: :failed

            def self?.values: -> ::Array[Telnyx::Models::CallPlaybackEndedWebhookEvent::Data::Payload::status]
          end
        end

        type record_type = :event

        module RecordType
          extend Telnyx::Internal::Type::Enum

          EVENT: :event

          def self?.values: -> ::Array[Telnyx::Models::CallPlaybackEndedWebhookEvent::Data::record_type]
        end
      end
    end
  end
end
