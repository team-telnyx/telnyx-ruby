module Telnyx
  module Models
    type global_ip_allowed_port_list_response =
      { data: ::Array[Telnyx::Models::GlobalIPAllowedPortListResponse::Data] }

    class GlobalIPAllowedPortListResponse < Telnyx::Internal::Type::BaseModel
      attr_reader data: ::Array[Telnyx::Models::GlobalIPAllowedPortListResponse::Data]?

      def data=: (
        ::Array[Telnyx::Models::GlobalIPAllowedPortListResponse::Data]
      ) -> ::Array[Telnyx::Models::GlobalIPAllowedPortListResponse::Data]

      def initialize: (
        ?data: ::Array[Telnyx::Models::GlobalIPAllowedPortListResponse::Data]
      ) -> void

      def to_hash: -> {
        data: ::Array[Telnyx::Models::GlobalIPAllowedPortListResponse::Data]
      }

      type data =
        {
          id: String,
          first_port: Integer,
          last_port: Integer,
          name: String,
          protocol_code: String,
          record_type: String
        }

      class Data < Telnyx::Internal::Type::BaseModel
        attr_reader first_port: Integer?

        def first_port=: (Integer) -> Integer

        attr_reader last_port: Integer?

        def last_port=: (Integer) -> Integer

        attr_reader name: String?

        def name=: (String) -> String

        attr_reader id: String?

        def id=: (String) -> String

        attr_reader protocol_code: String?

        def protocol_code=: (String) -> String

        attr_reader record_type: String?

        def record_type=: (String) -> String

        def initialize: (
          ?id: String,
          ?first_port: Integer,
          ?last_port: Integer,
          ?name: String,
          ?protocol_code: String,
          ?record_type: String
        ) -> void

        def to_hash: -> {
          id: String,
          first_port: Integer,
          last_port: Integer,
          name: String,
          protocol_code: String,
          record_type: String
        }
      end
    end
  end
end
