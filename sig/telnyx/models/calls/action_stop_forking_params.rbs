module Telnyx
  module Models
    module Calls
      type action_stop_forking_params =
        {
          client_state: String,
          command_id: String,
          stream_type: Telnyx::Models::Calls::ActionStopForkingParams::stream_type
        }
        & Telnyx::Internal::Type::request_parameters

      class ActionStopForkingParams < Telnyx::Internal::Type::BaseModel
        extend Telnyx::Internal::Type::RequestParameters::Converter
        include Telnyx::Internal::Type::RequestParameters

        attr_reader client_state: String?

        def client_state=: (String) -> String

        attr_reader command_id: String?

        def command_id=: (String) -> String

        attr_reader stream_type: Telnyx::Models::Calls::ActionStopForkingParams::stream_type?

        def stream_type=: (
          Telnyx::Models::Calls::ActionStopForkingParams::stream_type
        ) -> Telnyx::Models::Calls::ActionStopForkingParams::stream_type

        def initialize: (
          ?client_state: String,
          ?command_id: String,
          ?stream_type: Telnyx::Models::Calls::ActionStopForkingParams::stream_type,
          ?request_options: Telnyx::request_opts
        ) -> void

        def to_hash: -> {
          client_state: String,
          command_id: String,
          stream_type: Telnyx::Models::Calls::ActionStopForkingParams::stream_type,
          request_options: Telnyx::RequestOptions
        }

        type stream_type = :raw | :decrypted

        module StreamType
          extend Telnyx::Internal::Type::Enum

          RAW: :raw
          DECRYPTED: :decrypted

          def self?.values: -> ::Array[Telnyx::Models::Calls::ActionStopForkingParams::stream_type]
        end
      end
    end
  end
end
