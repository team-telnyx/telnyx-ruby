module Telnyx
  module Models
    module Calls
      type transcription_start_request =
        {
          client_state: String,
          command_id: String,
          transcription_engine: Telnyx::Models::Calls::TranscriptionStartRequest::transcription_engine,
          transcription_engine_config: Telnyx::Models::Calls::TranscriptionStartRequest::transcription_engine_config,
          transcription_tracks: String
        }

      class TranscriptionStartRequest < Telnyx::Internal::Type::BaseModel
        attr_reader client_state: String?

        def client_state=: (String) -> String

        attr_reader command_id: String?

        def command_id=: (String) -> String

        attr_reader transcription_engine: Telnyx::Models::Calls::TranscriptionStartRequest::transcription_engine?

        def transcription_engine=: (
          Telnyx::Models::Calls::TranscriptionStartRequest::transcription_engine
        ) -> Telnyx::Models::Calls::TranscriptionStartRequest::transcription_engine

        attr_reader transcription_engine_config: Telnyx::Models::Calls::TranscriptionStartRequest::transcription_engine_config?

        def transcription_engine_config=: (
          Telnyx::Models::Calls::TranscriptionStartRequest::transcription_engine_config
        ) -> Telnyx::Models::Calls::TranscriptionStartRequest::transcription_engine_config

        attr_reader transcription_tracks: String?

        def transcription_tracks=: (String) -> String

        def initialize: (
          ?client_state: String,
          ?command_id: String,
          ?transcription_engine: Telnyx::Models::Calls::TranscriptionStartRequest::transcription_engine,
          ?transcription_engine_config: Telnyx::Models::Calls::TranscriptionStartRequest::transcription_engine_config,
          ?transcription_tracks: String
        ) -> void

        def to_hash: -> {
          client_state: String,
          command_id: String,
          transcription_engine: Telnyx::Models::Calls::TranscriptionStartRequest::transcription_engine,
          transcription_engine_config: Telnyx::Models::Calls::TranscriptionStartRequest::transcription_engine_config,
          transcription_tracks: String
        }

        type transcription_engine = :Google | :Telnyx | :Deepgram | :A | :B

        module TranscriptionEngine
          extend Telnyx::Internal::Type::Enum

          GOOGLE: :Google
          TELNYX: :Telnyx
          DEEPGRAM: :Deepgram
          A: :A
          B: :B

          def self?.values: -> ::Array[Telnyx::Models::Calls::TranscriptionStartRequest::transcription_engine]
        end

        type transcription_engine_config =
          Telnyx::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Google
          | Telnyx::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Telnyx
          | Telnyx::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Deepgram
          | Telnyx::Calls::TranscriptionEngineAConfig
          | Telnyx::Calls::TranscriptionEngineBConfig

        module TranscriptionEngineConfig
          extend Telnyx::Internal::Type::Union

          type google =
            {
              enable_speaker_diarization: bool,
              hints: ::Array[String],
              interim_results: bool,
              language: Telnyx::Models::Calls::google_transcription_language,
              max_speaker_count: Integer,
              min_speaker_count: Integer,
              model: Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Google::model,
              profanity_filter: bool,
              speech_context: ::Array[Telnyx::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Google::SpeechContext],
              transcription_engine: Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Google::transcription_engine,
              use_enhanced: bool
            }

          class Google < Telnyx::Internal::Type::BaseModel
            attr_reader enable_speaker_diarization: bool?

            def enable_speaker_diarization=: (bool) -> bool

            attr_reader hints: ::Array[String]?

            def hints=: (::Array[String]) -> ::Array[String]

            attr_reader interim_results: bool?

            def interim_results=: (bool) -> bool

            attr_reader language: Telnyx::Models::Calls::google_transcription_language?

            def language=: (
              Telnyx::Models::Calls::google_transcription_language
            ) -> Telnyx::Models::Calls::google_transcription_language

            attr_reader max_speaker_count: Integer?

            def max_speaker_count=: (Integer) -> Integer

            attr_reader min_speaker_count: Integer?

            def min_speaker_count=: (Integer) -> Integer

            attr_reader model: Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Google::model?

            def model=: (
              Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Google::model
            ) -> Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Google::model

            attr_reader profanity_filter: bool?

            def profanity_filter=: (bool) -> bool

            attr_reader speech_context: ::Array[Telnyx::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Google::SpeechContext]?

            def speech_context=: (
              ::Array[Telnyx::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Google::SpeechContext]
            ) -> ::Array[Telnyx::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Google::SpeechContext]

            attr_reader transcription_engine: Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Google::transcription_engine?

            def transcription_engine=: (
              Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Google::transcription_engine
            ) -> Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Google::transcription_engine

            attr_reader use_enhanced: bool?

            def use_enhanced=: (bool) -> bool

            def initialize: (
              ?enable_speaker_diarization: bool,
              ?hints: ::Array[String],
              ?interim_results: bool,
              ?language: Telnyx::Models::Calls::google_transcription_language,
              ?max_speaker_count: Integer,
              ?min_speaker_count: Integer,
              ?model: Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Google::model,
              ?profanity_filter: bool,
              ?speech_context: ::Array[Telnyx::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Google::SpeechContext],
              ?transcription_engine: Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Google::transcription_engine,
              ?use_enhanced: bool
            ) -> void

            def to_hash: -> {
              enable_speaker_diarization: bool,
              hints: ::Array[String],
              interim_results: bool,
              language: Telnyx::Models::Calls::google_transcription_language,
              max_speaker_count: Integer,
              min_speaker_count: Integer,
              model: Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Google::model,
              profanity_filter: bool,
              speech_context: ::Array[Telnyx::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Google::SpeechContext],
              transcription_engine: Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Google::transcription_engine,
              use_enhanced: bool
            }

            type model =
              :latest_long
              | :latest_short
              | :command_and_search
              | :phone_call
              | :video
              | :default
              | :medical_conversation
              | :medical_dictation

            module Model
              extend Telnyx::Internal::Type::Enum

              LATEST_LONG: :latest_long
              LATEST_SHORT: :latest_short
              COMMAND_AND_SEARCH: :command_and_search
              PHONE_CALL: :phone_call
              VIDEO: :video
              DEFAULT: :default
              MEDICAL_CONVERSATION: :medical_conversation
              MEDICAL_DICTATION: :medical_dictation

              def self?.values: -> ::Array[Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Google::model]
            end

            type speech_context = { boost: Float, phrases: ::Array[String] }

            class SpeechContext < Telnyx::Internal::Type::BaseModel
              attr_reader boost: Float?

              def boost=: (Float) -> Float

              attr_reader phrases: ::Array[String]?

              def phrases=: (::Array[String]) -> ::Array[String]

              def initialize: (?boost: Float, ?phrases: ::Array[String]) -> void

              def to_hash: -> { boost: Float, phrases: ::Array[String] }
            end

            type transcription_engine = :Google

            module TranscriptionEngine
              extend Telnyx::Internal::Type::Enum

              GOOGLE: :Google

              def self?.values: -> ::Array[Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Google::transcription_engine]
            end
          end

          type telnyx =
            {
              language: Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Telnyx::language,
              transcription_engine: Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Telnyx::transcription_engine,
              transcription_model: Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Telnyx::transcription_model
            }

          class Telnyx < Telnyx::Internal::Type::BaseModel
            attr_reader language: Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Telnyx::language?

            def language=: (
              Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Telnyx::language
            ) -> Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Telnyx::language

            attr_reader transcription_engine: Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Telnyx::transcription_engine?

            def transcription_engine=: (
              Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Telnyx::transcription_engine
            ) -> Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Telnyx::transcription_engine

            attr_reader transcription_model: Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Telnyx::transcription_model?

            def transcription_model=: (
              Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Telnyx::transcription_model
            ) -> Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Telnyx::transcription_model

            def initialize: (
              ?language: Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Telnyx::language,
              ?transcription_engine: Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Telnyx::transcription_engine,
              ?transcription_model: Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Telnyx::transcription_model
            ) -> void

            def to_hash: -> {
              language: Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Telnyx::language,
              transcription_engine: Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Telnyx::transcription_engine,
              transcription_model: Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Telnyx::transcription_model
            }

            type language =
              :en
              | :zh
              | :de
              | :es
              | :ru
              | :ko
              | :fr
              | :ja
              | :pt
              | :tr
              | :pl
              | :ca
              | :nl
              | :ar
              | :sv
              | :it
              | :id
              | :hi
              | :fi
              | :vi
              | :he
              | :uk
              | :el
              | :ms
              | :cs
              | :ro
              | :da
              | :hu
              | :ta
              | :no
              | :th
              | :ur
              | :hr
              | :bg
              | :lt
              | :la
              | :mi
              | :ml
              | :cy
              | :sk
              | :te
              | :fa
              | :lv
              | :bn
              | :sr
              | :az
              | :sl
              | :kn
              | :et
              | :mk
              | :br
              | :eu
              | :is
              | :hy
              | :ne
              | :mn
              | :bs
              | :kk
              | :sq
              | :sw
              | :gl
              | :mr
              | :pa
              | :si
              | :km
              | :sn
              | :yo
              | :so
              | :af
              | :oc
              | :ka
              | :be
              | :tg
              | :sd
              | :gu
              | :am
              | :yi
              | :lo
              | :uz
              | :fo
              | :ht
              | :ps
              | :tk
              | :nn
              | :mt
              | :sa
              | :lb
              | :my
              | :bo
              | :tl
              | :mg
              | :as
              | :tt
              | :haw
              | :ln
              | :ha
              | :ba
              | :jw
              | :su
              | :auto_detect

            module Language
              extend Telnyx::Internal::Type::Enum

              EN: :en
              ZH: :zh
              DE: :de
              ES: :es
              RU: :ru
              KO: :ko
              FR: :fr
              JA: :ja
              PT: :pt
              TR: :tr
              PL: :pl
              CA: :ca
              NL: :nl
              AR: :ar
              SV: :sv
              IT: :it
              ID: :id
              HI: :hi
              FI: :fi
              VI: :vi
              HE: :he
              UK: :uk
              EL: :el
              MS: :ms
              CS: :cs
              RO: :ro
              DA: :da
              HU: :hu
              TA: :ta
              NO: :no
              TH: :th
              UR: :ur
              HR: :hr
              BG: :bg
              LT: :lt
              LA: :la
              MI: :mi
              ML: :ml
              CY: :cy
              SK: :sk
              TE: :te
              FA: :fa
              LV: :lv
              BN: :bn
              SR: :sr
              AZ: :az
              SL: :sl
              KN: :kn
              ET: :et
              MK: :mk
              BR: :br
              EU: :eu
              IS: :is
              HY: :hy
              NE: :ne
              MN: :mn
              BS: :bs
              KK: :kk
              SQ: :sq
              SW: :sw
              GL: :gl
              MR: :mr
              PA: :pa
              SI: :si
              KM: :km
              SN: :sn
              YO: :yo
              SO: :so
              AF: :af
              OC: :oc
              KA: :ka
              BE: :be
              TG: :tg
              SD: :sd
              GU: :gu
              AM: :am
              YI: :yi
              LO: :lo
              UZ: :uz
              FO: :fo
              HT: :ht
              PS: :ps
              TK: :tk
              NN: :nn
              MT: :mt
              SA: :sa
              LB: :lb
              MY: :my
              BO: :bo
              TL: :tl
              MG: :mg
              AS: :as
              TT: :tt
              HAW: :haw
              LN: :ln
              HA: :ha
              BA: :ba
              JW: :jw
              SU: :su
              AUTO_DETECT: :auto_detect

              def self?.values: -> ::Array[Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Telnyx::language]
            end

            type transcription_engine = :Telnyx

            module TranscriptionEngine
              extend Telnyx::Internal::Type::Enum

              TELNYX: :Telnyx

              def self?.values: -> ::Array[Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Telnyx::transcription_engine]
            end

            type transcription_model =
              :"openai/whisper-tiny" | :"openai/whisper-large-v3-turbo"

            module TranscriptionModel
              extend Telnyx::Internal::Type::Enum

              OPENAI_WHISPER_TINY: :"openai/whisper-tiny"
              OPENAI_WHISPER_LARGE_V3_TURBO: :"openai/whisper-large-v3-turbo"

              def self?.values: -> ::Array[Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Telnyx::transcription_model]
            end
          end

          type deepgram =
            {
              transcription_engine: :Deepgram,
              transcription_model: Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Deepgram::transcription_model,
              language: Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Deepgram::language
            }

          class Deepgram < Telnyx::Internal::Type::BaseModel
            attr_accessor transcription_engine: :Deepgram

            attr_accessor transcription_model: Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Deepgram::transcription_model

            attr_reader language: Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Deepgram::language?

            def language=: (
              Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Deepgram::language
            ) -> Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Deepgram::language

            def initialize: (
              transcription_model: Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Deepgram::transcription_model,
              ?language: Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Deepgram::language,
              ?transcription_engine: :Deepgram
            ) -> void

            def to_hash: -> {
              transcription_engine: :Deepgram,
              transcription_model: Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Deepgram::transcription_model,
              language: Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Deepgram::language
            }

            type transcription_model = :"deepgram/nova-2" | :"deepgram/nova-3"

            module TranscriptionModel
              extend Telnyx::Internal::Type::Enum

              DEEPGRAM_NOVA_2: :"deepgram/nova-2"
              DEEPGRAM_NOVA_3: :"deepgram/nova-3"

              def self?.values: -> ::Array[Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Deepgram::transcription_model]
            end

            type language =
              :bg
              | :ca
              | :zh
              | :"zh-CN"
              | :"zh-Hans"
              | :"zh-TW"
              | :"zh-Hant"
              | :"zh-HK"
              | :cs
              | :da
              | :"da-DK"
              | :nl
              | :en
              | :"en-US"
              | :"en-AU"
              | :"en-GB"
              | :"en-NZ"
              | :"en-IN"
              | :et
              | :fi
              | :"nl-BE"
              | :fr
              | :"fr-CA"
              | :de
              | :"de-CH"
              | :el
              | :hi
              | :hu
              | :id
              | :it
              | :ja
              | :ko
              | :"ko-KR"
              | :lv
              | :lt
              | :ms
              | :no
              | :pl
              | :pt
              | :"pt-BR"
              | :"pt-PT"
              | :ro
              | :ru
              | :sk
              | :es
              | :"es-419"
              | :sv
              | :"sv-SE"
              | :th
              | :"th-TH"
              | :tr
              | :uk
              | :vi
              | :auto_detect

            module Language
              extend Telnyx::Internal::Type::Enum

              BG: :bg
              CA: :ca
              ZH: :zh
              ZH_CN: :"zh-CN"
              ZH_HANS: :"zh-Hans"
              ZH_TW: :"zh-TW"
              ZH_HANT: :"zh-Hant"
              ZH_HK: :"zh-HK"
              CS: :cs
              DA: :da
              DA_DK: :"da-DK"
              NL: :nl
              EN: :en
              EN_US: :"en-US"
              EN_AU: :"en-AU"
              EN_GB: :"en-GB"
              EN_NZ: :"en-NZ"
              EN_IN: :"en-IN"
              ET: :et
              FI: :fi
              NL_BE: :"nl-BE"
              FR: :fr
              FR_CA: :"fr-CA"
              DE: :de
              DE_CH: :"de-CH"
              EL: :el
              HI: :hi
              HU: :hu
              ID: :id
              IT: :it
              JA: :ja
              KO: :ko
              KO_KR: :"ko-KR"
              LV: :lv
              LT: :lt
              MS: :ms
              NO: :no
              PL: :pl
              PT: :pt
              PT_BR: :"pt-BR"
              PT_PT: :"pt-PT"
              RO: :ro
              RU: :ru
              SK: :sk
              ES: :es
              ES_419: :"es-419"
              SV: :sv
              SV_SE: :"sv-SE"
              TH: :th
              TH_TH: :"th-TH"
              TR: :tr
              UK: :uk
              VI: :vi
              AUTO_DETECT: :auto_detect

              def self?.values: -> ::Array[Telnyx::Models::Calls::TranscriptionStartRequest::TranscriptionEngineConfig::Deepgram::language]
            end
          end

          def self?.variants: -> ::Array[Telnyx::Models::Calls::TranscriptionStartRequest::transcription_engine_config]
        end
      end
    end
  end
end
