module Telnyx
  module Models
    module Calls
      type action_gather_using_speak_params =
        {
          payload: String,
          voice: String,
          client_state: String,
          command_id: String,
          inter_digit_timeout_millis: Integer,
          invalid_payload: String,
          language: Telnyx::Models::Calls::ActionGatherUsingSpeakParams::language,
          maximum_digits: Integer,
          maximum_tries: Integer,
          minimum_digits: Integer,
          payload_type: Telnyx::Models::Calls::ActionGatherUsingSpeakParams::payload_type,
          service_level: Telnyx::Models::Calls::ActionGatherUsingSpeakParams::service_level,
          terminating_digit: String,
          timeout_millis: Integer,
          valid_digits: String,
          voice_settings: Telnyx::Models::Calls::ActionGatherUsingSpeakParams::voice_settings
        }
        & Telnyx::Internal::Type::request_parameters

      class ActionGatherUsingSpeakParams < Telnyx::Internal::Type::BaseModel
        extend Telnyx::Internal::Type::RequestParameters::Converter
        include Telnyx::Internal::Type::RequestParameters

        attr_accessor payload: String

        attr_accessor voice: String

        attr_reader client_state: String?

        def client_state=: (String) -> String

        attr_reader command_id: String?

        def command_id=: (String) -> String

        attr_reader inter_digit_timeout_millis: Integer?

        def inter_digit_timeout_millis=: (Integer) -> Integer

        attr_reader invalid_payload: String?

        def invalid_payload=: (String) -> String

        attr_reader language: Telnyx::Models::Calls::ActionGatherUsingSpeakParams::language?

        def language=: (
          Telnyx::Models::Calls::ActionGatherUsingSpeakParams::language
        ) -> Telnyx::Models::Calls::ActionGatherUsingSpeakParams::language

        attr_reader maximum_digits: Integer?

        def maximum_digits=: (Integer) -> Integer

        attr_reader maximum_tries: Integer?

        def maximum_tries=: (Integer) -> Integer

        attr_reader minimum_digits: Integer?

        def minimum_digits=: (Integer) -> Integer

        attr_reader payload_type: Telnyx::Models::Calls::ActionGatherUsingSpeakParams::payload_type?

        def payload_type=: (
          Telnyx::Models::Calls::ActionGatherUsingSpeakParams::payload_type
        ) -> Telnyx::Models::Calls::ActionGatherUsingSpeakParams::payload_type

        attr_reader service_level: Telnyx::Models::Calls::ActionGatherUsingSpeakParams::service_level?

        def service_level=: (
          Telnyx::Models::Calls::ActionGatherUsingSpeakParams::service_level
        ) -> Telnyx::Models::Calls::ActionGatherUsingSpeakParams::service_level

        attr_reader terminating_digit: String?

        def terminating_digit=: (String) -> String

        attr_reader timeout_millis: Integer?

        def timeout_millis=: (Integer) -> Integer

        attr_reader valid_digits: String?

        def valid_digits=: (String) -> String

        attr_reader voice_settings: Telnyx::Models::Calls::ActionGatherUsingSpeakParams::voice_settings?

        def voice_settings=: (
          Telnyx::Models::Calls::ActionGatherUsingSpeakParams::voice_settings
        ) -> Telnyx::Models::Calls::ActionGatherUsingSpeakParams::voice_settings

        def initialize: (
          payload: String,
          voice: String,
          ?client_state: String,
          ?command_id: String,
          ?inter_digit_timeout_millis: Integer,
          ?invalid_payload: String,
          ?language: Telnyx::Models::Calls::ActionGatherUsingSpeakParams::language,
          ?maximum_digits: Integer,
          ?maximum_tries: Integer,
          ?minimum_digits: Integer,
          ?payload_type: Telnyx::Models::Calls::ActionGatherUsingSpeakParams::payload_type,
          ?service_level: Telnyx::Models::Calls::ActionGatherUsingSpeakParams::service_level,
          ?terminating_digit: String,
          ?timeout_millis: Integer,
          ?valid_digits: String,
          ?voice_settings: Telnyx::Models::Calls::ActionGatherUsingSpeakParams::voice_settings,
          ?request_options: Telnyx::request_opts
        ) -> void

        def to_hash: -> {
          payload: String,
          voice: String,
          client_state: String,
          command_id: String,
          inter_digit_timeout_millis: Integer,
          invalid_payload: String,
          language: Telnyx::Models::Calls::ActionGatherUsingSpeakParams::language,
          maximum_digits: Integer,
          maximum_tries: Integer,
          minimum_digits: Integer,
          payload_type: Telnyx::Models::Calls::ActionGatherUsingSpeakParams::payload_type,
          service_level: Telnyx::Models::Calls::ActionGatherUsingSpeakParams::service_level,
          terminating_digit: String,
          timeout_millis: Integer,
          valid_digits: String,
          voice_settings: Telnyx::Models::Calls::ActionGatherUsingSpeakParams::voice_settings,
          request_options: Telnyx::RequestOptions
        }

        type language =
          :arb
          | :"cmn-CN"
          | :"cy-GB"
          | :"da-DK"
          | :"de-DE"
          | :"en-AU"
          | :"en-GB"
          | :"en-GB-WLS"
          | :"en-IN"
          | :"en-US"
          | :"es-ES"
          | :"es-MX"
          | :"es-US"
          | :"fr-CA"
          | :"fr-FR"
          | :"hi-IN"
          | :"is-IS"
          | :"it-IT"
          | :"ja-JP"
          | :"ko-KR"
          | :"nb-NO"
          | :"nl-NL"
          | :"pl-PL"
          | :"pt-BR"
          | :"pt-PT"
          | :"ro-RO"
          | :"ru-RU"
          | :"sv-SE"
          | :"tr-TR"

        module Language
          extend Telnyx::Internal::Type::Enum

          ARB: :arb
          CMN_CN: :"cmn-CN"
          CY_GB: :"cy-GB"
          DA_DK: :"da-DK"
          DE_DE: :"de-DE"
          EN_AU: :"en-AU"
          EN_GB: :"en-GB"
          EN_GB_WLS: :"en-GB-WLS"
          EN_IN: :"en-IN"
          EN_US: :"en-US"
          ES_ES: :"es-ES"
          ES_MX: :"es-MX"
          ES_US: :"es-US"
          FR_CA: :"fr-CA"
          FR_FR: :"fr-FR"
          HI_IN: :"hi-IN"
          IS_IS: :"is-IS"
          IT_IT: :"it-IT"
          JA_JP: :"ja-JP"
          KO_KR: :"ko-KR"
          NB_NO: :"nb-NO"
          NL_NL: :"nl-NL"
          PL_PL: :"pl-PL"
          PT_BR: :"pt-BR"
          PT_PT: :"pt-PT"
          RO_RO: :"ro-RO"
          RU_RU: :"ru-RU"
          SV_SE: :"sv-SE"
          TR_TR: :"tr-TR"

          def self?.values: -> ::Array[Telnyx::Models::Calls::ActionGatherUsingSpeakParams::language]
        end

        type payload_type = :text | :ssml

        module PayloadType
          extend Telnyx::Internal::Type::Enum

          TEXT: :text
          SSML: :ssml

          def self?.values: -> ::Array[Telnyx::Models::Calls::ActionGatherUsingSpeakParams::payload_type]
        end

        type service_level = :basic | :premium

        module ServiceLevel
          extend Telnyx::Internal::Type::Enum

          BASIC: :basic
          PREMIUM: :premium

          def self?.values: -> ::Array[Telnyx::Models::Calls::ActionGatherUsingSpeakParams::service_level]
        end

        type voice_settings =
          Telnyx::Calls::ElevenLabsVoiceSettings
          | Telnyx::Calls::TelnyxVoiceSettings
          | top

        module VoiceSettings
          extend Telnyx::Internal::Type::Union

          def self?.variants: -> ::Array[Telnyx::Models::Calls::ActionGatherUsingSpeakParams::voice_settings]
        end
      end
    end
  end
end
