module Telnyx
  module Models
    module Calls
      type action_start_recording_params =
        {
          channels: Telnyx::Models::Calls::ActionStartRecordingParams::channels,
          format_: Telnyx::Models::Calls::ActionStartRecordingParams::format_,
          client_state: String,
          command_id: String,
          custom_file_name: String,
          max_length: Integer,
          play_beep: bool,
          recording_track: Telnyx::Models::Calls::ActionStartRecordingParams::recording_track,
          timeout_secs: Integer,
          transcription: bool,
          transcription_engine: String,
          transcription_language: Telnyx::Models::Calls::ActionStartRecordingParams::transcription_language,
          transcription_max_speaker_count: Integer,
          transcription_min_speaker_count: Integer,
          transcription_profanity_filter: bool,
          transcription_speaker_diarization: bool,
          trim: Telnyx::Models::Calls::ActionStartRecordingParams::trim
        }
        & Telnyx::Internal::Type::request_parameters

      class ActionStartRecordingParams < Telnyx::Internal::Type::BaseModel
        extend Telnyx::Internal::Type::RequestParameters::Converter
        include Telnyx::Internal::Type::RequestParameters

        attr_accessor channels: Telnyx::Models::Calls::ActionStartRecordingParams::channels

        attr_accessor format_: Telnyx::Models::Calls::ActionStartRecordingParams::format_

        attr_reader client_state: String?

        def client_state=: (String) -> String

        attr_reader command_id: String?

        def command_id=: (String) -> String

        attr_reader custom_file_name: String?

        def custom_file_name=: (String) -> String

        attr_reader max_length: Integer?

        def max_length=: (Integer) -> Integer

        attr_reader play_beep: bool?

        def play_beep=: (bool) -> bool

        attr_reader recording_track: Telnyx::Models::Calls::ActionStartRecordingParams::recording_track?

        def recording_track=: (
          Telnyx::Models::Calls::ActionStartRecordingParams::recording_track
        ) -> Telnyx::Models::Calls::ActionStartRecordingParams::recording_track

        attr_reader timeout_secs: Integer?

        def timeout_secs=: (Integer) -> Integer

        attr_reader transcription: bool?

        def transcription=: (bool) -> bool

        attr_reader transcription_engine: String?

        def transcription_engine=: (String) -> String

        attr_reader transcription_language: Telnyx::Models::Calls::ActionStartRecordingParams::transcription_language?

        def transcription_language=: (
          Telnyx::Models::Calls::ActionStartRecordingParams::transcription_language
        ) -> Telnyx::Models::Calls::ActionStartRecordingParams::transcription_language

        attr_reader transcription_max_speaker_count: Integer?

        def transcription_max_speaker_count=: (Integer) -> Integer

        attr_reader transcription_min_speaker_count: Integer?

        def transcription_min_speaker_count=: (Integer) -> Integer

        attr_reader transcription_profanity_filter: bool?

        def transcription_profanity_filter=: (bool) -> bool

        attr_reader transcription_speaker_diarization: bool?

        def transcription_speaker_diarization=: (bool) -> bool

        attr_reader trim: Telnyx::Models::Calls::ActionStartRecordingParams::trim?

        def trim=: (
          Telnyx::Models::Calls::ActionStartRecordingParams::trim
        ) -> Telnyx::Models::Calls::ActionStartRecordingParams::trim

        def initialize: (
          channels: Telnyx::Models::Calls::ActionStartRecordingParams::channels,
          format_: Telnyx::Models::Calls::ActionStartRecordingParams::format_,
          ?client_state: String,
          ?command_id: String,
          ?custom_file_name: String,
          ?max_length: Integer,
          ?play_beep: bool,
          ?recording_track: Telnyx::Models::Calls::ActionStartRecordingParams::recording_track,
          ?timeout_secs: Integer,
          ?transcription: bool,
          ?transcription_engine: String,
          ?transcription_language: Telnyx::Models::Calls::ActionStartRecordingParams::transcription_language,
          ?transcription_max_speaker_count: Integer,
          ?transcription_min_speaker_count: Integer,
          ?transcription_profanity_filter: bool,
          ?transcription_speaker_diarization: bool,
          ?trim: Telnyx::Models::Calls::ActionStartRecordingParams::trim,
          ?request_options: Telnyx::request_opts
        ) -> void

        def to_hash: -> {
          channels: Telnyx::Models::Calls::ActionStartRecordingParams::channels,
          format_: Telnyx::Models::Calls::ActionStartRecordingParams::format_,
          client_state: String,
          command_id: String,
          custom_file_name: String,
          max_length: Integer,
          play_beep: bool,
          recording_track: Telnyx::Models::Calls::ActionStartRecordingParams::recording_track,
          timeout_secs: Integer,
          transcription: bool,
          transcription_engine: String,
          transcription_language: Telnyx::Models::Calls::ActionStartRecordingParams::transcription_language,
          transcription_max_speaker_count: Integer,
          transcription_min_speaker_count: Integer,
          transcription_profanity_filter: bool,
          transcription_speaker_diarization: bool,
          trim: Telnyx::Models::Calls::ActionStartRecordingParams::trim,
          request_options: Telnyx::RequestOptions
        }

        type channels = :single | :dual

        module Channels
          extend Telnyx::Internal::Type::Enum

          SINGLE: :single
          DUAL: :dual

          def self?.values: -> ::Array[Telnyx::Models::Calls::ActionStartRecordingParams::channels]
        end

        type format_ = :wav | :mp3

        module Format
          extend Telnyx::Internal::Type::Enum

          WAV: :wav
          MP3: :mp3

          def self?.values: -> ::Array[Telnyx::Models::Calls::ActionStartRecordingParams::format_]
        end

        type recording_track = :both | :inbound | :outbound

        module RecordingTrack
          extend Telnyx::Internal::Type::Enum

          BOTH: :both
          INBOUND: :inbound
          OUTBOUND: :outbound

          def self?.values: -> ::Array[Telnyx::Models::Calls::ActionStartRecordingParams::recording_track]
        end

        type transcription_language =
          :"af-ZA"
          | :"am-ET"
          | :"ar-AE"
          | :"ar-BH"
          | :"ar-DZ"
          | :"ar-EG"
          | :"ar-IL"
          | :"ar-IQ"
          | :"ar-JO"
          | :"ar-KW"
          | :"ar-LB"
          | :"ar-MA"
          | :"ar-MR"
          | :"ar-OM"
          | :"ar-PS"
          | :"ar-QA"
          | :"ar-SA"
          | :"ar-TN"
          | :"ar-YE"
          | :"az-AZ"
          | :"bg-BG"
          | :"bn-BD"
          | :"bn-IN"
          | :"bs-BA"
          | :"ca-ES"
          | :"cs-CZ"
          | :"da-DK"
          | :"de-AT"
          | :"de-CH"
          | :"de-DE"
          | :"el-GR"
          | :"en-AU"
          | :"en-CA"
          | :"en-GB"
          | :"en-GH"
          | :"en-HK"
          | :"en-IE"
          | :"en-IN"
          | :"en-KE"
          | :"en-NG"
          | :"en-NZ"
          | :"en-PH"
          | :"en-PK"
          | :"en-SG"
          | :"en-TZ"
          | :"en-US"
          | :"en-ZA"
          | :"es-AR"
          | :"es-BO"
          | :"es-CL"
          | :"es-CO"
          | :"es-CR"
          | :"es-DO"
          | :"es-EC"
          | :"es-ES"
          | :"es-GT"
          | :"es-HN"
          | :"es-MX"
          | :"es-NI"
          | :"es-PA"
          | :"es-PE"
          | :"es-PR"
          | :"es-PY"
          | :"es-SV"
          | :"es-US"
          | :"es-UY"
          | :"es-VE"
          | :"et-EE"
          | :"eu-ES"
          | :"fa-IR"
          | :"fi-FI"
          | :"fil-PH"
          | :"fr-BE"
          | :"fr-CA"
          | :"fr-CH"
          | :"fr-FR"
          | :"gl-ES"
          | :"gu-IN"
          | :"hi-IN"
          | :"hr-HR"
          | :"hu-HU"
          | :"hy-AM"
          | :"id-ID"
          | :"is-IS"
          | :"it-CH"
          | :"it-IT"
          | :"iw-IL"
          | :"ja-JP"
          | :"jv-ID"
          | :"ka-GE"
          | :"kk-KZ"
          | :"km-KH"
          | :"kn-IN"
          | :"ko-KR"
          | :"lo-LA"
          | :"lt-LT"
          | :"lv-LV"
          | :"mk-MK"
          | :"ml-IN"
          | :"mn-MN"
          | :"mr-IN"
          | :"ms-MY"
          | :"my-MM"
          | :"ne-NP"
          | :"nl-BE"
          | :"nl-NL"
          | :"no-NO"
          | :"pa-Guru-IN"
          | :"pl-PL"
          | :"pt-BR"
          | :"pt-PT"
          | :"ro-RO"
          | :"ru-RU"
          | :"rw-RW"
          | :"si-LK"
          | :"sk-SK"
          | :"sl-SI"
          | :"sq-AL"
          | :"sr-RS"
          | :"ss-latn-za"
          | :"st-ZA"
          | :"su-ID"
          | :"sv-SE"
          | :"sw-KE"
          | :"sw-TZ"
          | :"ta-IN"
          | :"ta-LK"
          | :"ta-MY"
          | :"ta-SG"
          | :"te-IN"
          | :"th-TH"
          | :"tn-latn-za"
          | :"tr-TR"
          | :"ts-ZA"
          | :"uk-UA"
          | :"ur-IN"
          | :"ur-PK"
          | :"uz-UZ"
          | :"ve-ZA"
          | :"vi-VN"
          | :"xh-ZA"
          | :"yue-Hant-HK"
          | :zh
          | :"zh-TW"
          | :"zu-ZA"

        module TranscriptionLanguage
          extend Telnyx::Internal::Type::Enum

          AF_ZA: :"af-ZA"
          AM_ET: :"am-ET"
          AR_AE: :"ar-AE"
          AR_BH: :"ar-BH"
          AR_DZ: :"ar-DZ"
          AR_EG: :"ar-EG"
          AR_IL: :"ar-IL"
          AR_IQ: :"ar-IQ"
          AR_JO: :"ar-JO"
          AR_KW: :"ar-KW"
          AR_LB: :"ar-LB"
          AR_MA: :"ar-MA"
          AR_MR: :"ar-MR"
          AR_OM: :"ar-OM"
          AR_PS: :"ar-PS"
          AR_QA: :"ar-QA"
          AR_SA: :"ar-SA"
          AR_TN: :"ar-TN"
          AR_YE: :"ar-YE"
          AZ_AZ: :"az-AZ"
          BG_BG: :"bg-BG"
          BN_BD: :"bn-BD"
          BN_IN: :"bn-IN"
          BS_BA: :"bs-BA"
          CA_ES: :"ca-ES"
          CS_CZ: :"cs-CZ"
          DA_DK: :"da-DK"
          DE_AT: :"de-AT"
          DE_CH: :"de-CH"
          DE_DE: :"de-DE"
          EL_GR: :"el-GR"
          EN_AU: :"en-AU"
          EN_CA: :"en-CA"
          EN_GB: :"en-GB"
          EN_GH: :"en-GH"
          EN_HK: :"en-HK"
          EN_IE: :"en-IE"
          EN_IN: :"en-IN"
          EN_KE: :"en-KE"
          EN_NG: :"en-NG"
          EN_NZ: :"en-NZ"
          EN_PH: :"en-PH"
          EN_PK: :"en-PK"
          EN_SG: :"en-SG"
          EN_TZ: :"en-TZ"
          EN_US: :"en-US"
          EN_ZA: :"en-ZA"
          ES_AR: :"es-AR"
          ES_BO: :"es-BO"
          ES_CL: :"es-CL"
          ES_CO: :"es-CO"
          ES_CR: :"es-CR"
          ES_DO: :"es-DO"
          ES_EC: :"es-EC"
          ES_ES: :"es-ES"
          ES_GT: :"es-GT"
          ES_HN: :"es-HN"
          ES_MX: :"es-MX"
          ES_NI: :"es-NI"
          ES_PA: :"es-PA"
          ES_PE: :"es-PE"
          ES_PR: :"es-PR"
          ES_PY: :"es-PY"
          ES_SV: :"es-SV"
          ES_US: :"es-US"
          ES_UY: :"es-UY"
          ES_VE: :"es-VE"
          ET_EE: :"et-EE"
          EU_ES: :"eu-ES"
          FA_IR: :"fa-IR"
          FI_FI: :"fi-FI"
          FIL_PH: :"fil-PH"
          FR_BE: :"fr-BE"
          FR_CA: :"fr-CA"
          FR_CH: :"fr-CH"
          FR_FR: :"fr-FR"
          GL_ES: :"gl-ES"
          GU_IN: :"gu-IN"
          HI_IN: :"hi-IN"
          HR_HR: :"hr-HR"
          HU_HU: :"hu-HU"
          HY_AM: :"hy-AM"
          ID_ID: :"id-ID"
          IS_IS: :"is-IS"
          IT_CH: :"it-CH"
          IT_IT: :"it-IT"
          IW_IL: :"iw-IL"
          JA_JP: :"ja-JP"
          JV_ID: :"jv-ID"
          KA_GE: :"ka-GE"
          KK_KZ: :"kk-KZ"
          KM_KH: :"km-KH"
          KN_IN: :"kn-IN"
          KO_KR: :"ko-KR"
          LO_LA: :"lo-LA"
          LT_LT: :"lt-LT"
          LV_LV: :"lv-LV"
          MK_MK: :"mk-MK"
          ML_IN: :"ml-IN"
          MN_MN: :"mn-MN"
          MR_IN: :"mr-IN"
          MS_MY: :"ms-MY"
          MY_MM: :"my-MM"
          NE_NP: :"ne-NP"
          NL_BE: :"nl-BE"
          NL_NL: :"nl-NL"
          NO_NO: :"no-NO"
          PA_GURU_IN: :"pa-Guru-IN"
          PL_PL: :"pl-PL"
          PT_BR: :"pt-BR"
          PT_PT: :"pt-PT"
          RO_RO: :"ro-RO"
          RU_RU: :"ru-RU"
          RW_RW: :"rw-RW"
          SI_LK: :"si-LK"
          SK_SK: :"sk-SK"
          SL_SI: :"sl-SI"
          SQ_AL: :"sq-AL"
          SR_RS: :"sr-RS"
          SS_LATN_ZA: :"ss-latn-za"
          ST_ZA: :"st-ZA"
          SU_ID: :"su-ID"
          SV_SE: :"sv-SE"
          SW_KE: :"sw-KE"
          SW_TZ: :"sw-TZ"
          TA_IN: :"ta-IN"
          TA_LK: :"ta-LK"
          TA_MY: :"ta-MY"
          TA_SG: :"ta-SG"
          TE_IN: :"te-IN"
          TH_TH: :"th-TH"
          TN_LATN_ZA: :"tn-latn-za"
          TR_TR: :"tr-TR"
          TS_ZA: :"ts-ZA"
          UK_UA: :"uk-UA"
          UR_IN: :"ur-IN"
          UR_PK: :"ur-PK"
          UZ_UZ: :"uz-UZ"
          VE_ZA: :"ve-ZA"
          VI_VN: :"vi-VN"
          XH_ZA: :"xh-ZA"
          YUE_HANT_HK: :"yue-Hant-HK"
          ZH: :zh
          ZH_TW: :"zh-TW"
          ZU_ZA: :"zu-ZA"

          def self?.values: -> ::Array[Telnyx::Models::Calls::ActionStartRecordingParams::transcription_language]
        end

        type trim = :"trim-silence"

        module Trim
          extend Telnyx::Internal::Type::Enum

          TRIM_SILENCE: :"trim-silence"

          def self?.values: -> ::Array[Telnyx::Models::Calls::ActionStartRecordingParams::trim]
        end
      end
    end
  end
end
