module Telnyx
  module Models
    module Calls
      type transcription_engine_b_config =
        {
          language: Telnyx::Models::Calls::telnyx_transcription_language,
          transcription_engine: Telnyx::Models::Calls::TranscriptionEngineBConfig::transcription_engine,
          transcription_model: Telnyx::Models::Calls::TranscriptionEngineBConfig::transcription_model
        }

      class TranscriptionEngineBConfig < Telnyx::Internal::Type::BaseModel
        attr_reader language: Telnyx::Models::Calls::telnyx_transcription_language?

        def language=: (
          Telnyx::Models::Calls::telnyx_transcription_language
        ) -> Telnyx::Models::Calls::telnyx_transcription_language

        attr_reader transcription_engine: Telnyx::Models::Calls::TranscriptionEngineBConfig::transcription_engine?

        def transcription_engine=: (
          Telnyx::Models::Calls::TranscriptionEngineBConfig::transcription_engine
        ) -> Telnyx::Models::Calls::TranscriptionEngineBConfig::transcription_engine

        attr_reader transcription_model: Telnyx::Models::Calls::TranscriptionEngineBConfig::transcription_model?

        def transcription_model=: (
          Telnyx::Models::Calls::TranscriptionEngineBConfig::transcription_model
        ) -> Telnyx::Models::Calls::TranscriptionEngineBConfig::transcription_model

        def initialize: (
          ?language: Telnyx::Models::Calls::telnyx_transcription_language,
          ?transcription_engine: Telnyx::Models::Calls::TranscriptionEngineBConfig::transcription_engine,
          ?transcription_model: Telnyx::Models::Calls::TranscriptionEngineBConfig::transcription_model
        ) -> void

        def to_hash: -> {
          language: Telnyx::Models::Calls::telnyx_transcription_language,
          transcription_engine: Telnyx::Models::Calls::TranscriptionEngineBConfig::transcription_engine,
          transcription_model: Telnyx::Models::Calls::TranscriptionEngineBConfig::transcription_model
        }

        type transcription_engine = :B

        module TranscriptionEngine
          extend Telnyx::Internal::Type::Enum

          B: :B

          def self?.values: -> ::Array[Telnyx::Models::Calls::TranscriptionEngineBConfig::transcription_engine]
        end

        type transcription_model =
          :"openai/whisper-tiny" | :"openai/whisper-large-v3-turbo"

        module TranscriptionModel
          extend Telnyx::Internal::Type::Enum

          OPENAI_WHISPER_TINY: :"openai/whisper-tiny"
          OPENAI_WHISPER_LARGE_V3_TURBO: :"openai/whisper-large-v3-turbo"

          def self?.values: -> ::Array[Telnyx::Models::Calls::TranscriptionEngineBConfig::transcription_model]
        end
      end
    end
  end
end
