module Telnyx
  module Models
    module Calls
      type transcription_engine_b_config =
        {
          language: Telnyx::Models::Calls::TranscriptionEngineBConfig::language,
          transcription_engine: Telnyx::Models::Calls::TranscriptionEngineBConfig::transcription_engine,
          transcription_model: Telnyx::Models::Calls::TranscriptionEngineBConfig::transcription_model
        }

      class TranscriptionEngineBConfig < Telnyx::Internal::Type::BaseModel
        attr_reader language: Telnyx::Models::Calls::TranscriptionEngineBConfig::language?

        def language=: (
          Telnyx::Models::Calls::TranscriptionEngineBConfig::language
        ) -> Telnyx::Models::Calls::TranscriptionEngineBConfig::language

        attr_reader transcription_engine: Telnyx::Models::Calls::TranscriptionEngineBConfig::transcription_engine?

        def transcription_engine=: (
          Telnyx::Models::Calls::TranscriptionEngineBConfig::transcription_engine
        ) -> Telnyx::Models::Calls::TranscriptionEngineBConfig::transcription_engine

        attr_reader transcription_model: Telnyx::Models::Calls::TranscriptionEngineBConfig::transcription_model?

        def transcription_model=: (
          Telnyx::Models::Calls::TranscriptionEngineBConfig::transcription_model
        ) -> Telnyx::Models::Calls::TranscriptionEngineBConfig::transcription_model

        def initialize: (
          ?language: Telnyx::Models::Calls::TranscriptionEngineBConfig::language,
          ?transcription_engine: Telnyx::Models::Calls::TranscriptionEngineBConfig::transcription_engine,
          ?transcription_model: Telnyx::Models::Calls::TranscriptionEngineBConfig::transcription_model
        ) -> void

        def to_hash: -> {
          language: Telnyx::Models::Calls::TranscriptionEngineBConfig::language,
          transcription_engine: Telnyx::Models::Calls::TranscriptionEngineBConfig::transcription_engine,
          transcription_model: Telnyx::Models::Calls::TranscriptionEngineBConfig::transcription_model
        }

        type language =
          :en
          | :zh
          | :de
          | :es
          | :ru
          | :ko
          | :fr
          | :ja
          | :pt
          | :tr
          | :pl
          | :ca
          | :nl
          | :ar
          | :sv
          | :it
          | :id
          | :hi
          | :fi
          | :vi
          | :he
          | :uk
          | :el
          | :ms
          | :cs
          | :ro
          | :da
          | :hu
          | :ta
          | :no
          | :th
          | :ur
          | :hr
          | :bg
          | :lt
          | :la
          | :mi
          | :ml
          | :cy
          | :sk
          | :te
          | :fa
          | :lv
          | :bn
          | :sr
          | :az
          | :sl
          | :kn
          | :et
          | :mk
          | :br
          | :eu
          | :is
          | :hy
          | :ne
          | :mn
          | :bs
          | :kk
          | :sq
          | :sw
          | :gl
          | :mr
          | :pa
          | :si
          | :km
          | :sn
          | :yo
          | :so
          | :af
          | :oc
          | :ka
          | :be
          | :tg
          | :sd
          | :gu
          | :am
          | :yi
          | :lo
          | :uz
          | :fo
          | :ht
          | :ps
          | :tk
          | :nn
          | :mt
          | :sa
          | :lb
          | :my
          | :bo
          | :tl
          | :mg
          | :as
          | :tt
          | :haw
          | :ln
          | :ha
          | :ba
          | :jw
          | :su
          | :auto_detect

        module Language
          extend Telnyx::Internal::Type::Enum

          EN: :en
          ZH: :zh
          DE: :de
          ES: :es
          RU: :ru
          KO: :ko
          FR: :fr
          JA: :ja
          PT: :pt
          TR: :tr
          PL: :pl
          CA: :ca
          NL: :nl
          AR: :ar
          SV: :sv
          IT: :it
          ID: :id
          HI: :hi
          FI: :fi
          VI: :vi
          HE: :he
          UK: :uk
          EL: :el
          MS: :ms
          CS: :cs
          RO: :ro
          DA: :da
          HU: :hu
          TA: :ta
          NO: :no
          TH: :th
          UR: :ur
          HR: :hr
          BG: :bg
          LT: :lt
          LA: :la
          MI: :mi
          ML: :ml
          CY: :cy
          SK: :sk
          TE: :te
          FA: :fa
          LV: :lv
          BN: :bn
          SR: :sr
          AZ: :az
          SL: :sl
          KN: :kn
          ET: :et
          MK: :mk
          BR: :br
          EU: :eu
          IS: :is
          HY: :hy
          NE: :ne
          MN: :mn
          BS: :bs
          KK: :kk
          SQ: :sq
          SW: :sw
          GL: :gl
          MR: :mr
          PA: :pa
          SI: :si
          KM: :km
          SN: :sn
          YO: :yo
          SO: :so
          AF: :af
          OC: :oc
          KA: :ka
          BE: :be
          TG: :tg
          SD: :sd
          GU: :gu
          AM: :am
          YI: :yi
          LO: :lo
          UZ: :uz
          FO: :fo
          HT: :ht
          PS: :ps
          TK: :tk
          NN: :nn
          MT: :mt
          SA: :sa
          LB: :lb
          MY: :my
          BO: :bo
          TL: :tl
          MG: :mg
          AS: :as
          TT: :tt
          HAW: :haw
          LN: :ln
          HA: :ha
          BA: :ba
          JW: :jw
          SU: :su
          AUTO_DETECT: :auto_detect

          def self?.values: -> ::Array[Telnyx::Models::Calls::TranscriptionEngineBConfig::language]
        end

        type transcription_engine = :B

        module TranscriptionEngine
          extend Telnyx::Internal::Type::Enum

          B: :B

          def self?.values: -> ::Array[Telnyx::Models::Calls::TranscriptionEngineBConfig::transcription_engine]
        end

        type transcription_model =
          :"openai/whisper-tiny" | :"openai/whisper-large-v3-turbo"

        module TranscriptionModel
          extend Telnyx::Internal::Type::Enum

          OPENAI_WHISPER_TINY: :"openai/whisper-tiny"
          OPENAI_WHISPER_LARGE_V3_TURBO: :"openai/whisper-large-v3-turbo"

          def self?.values: -> ::Array[Telnyx::Models::Calls::TranscriptionEngineBConfig::transcription_model]
        end
      end
    end
  end
end
