module Telnyx
  module Models
    type global_ip_protocol_list_response =
      { data: ::Array[Telnyx::Models::GlobalIPProtocolListResponse::Data] }

    class GlobalIPProtocolListResponse < Telnyx::Internal::Type::BaseModel
      attr_reader data: ::Array[Telnyx::Models::GlobalIPProtocolListResponse::Data]?

      def data=: (
        ::Array[Telnyx::Models::GlobalIPProtocolListResponse::Data]
      ) -> ::Array[Telnyx::Models::GlobalIPProtocolListResponse::Data]

      def initialize: (
        ?data: ::Array[Telnyx::Models::GlobalIPProtocolListResponse::Data]
      ) -> void

      def to_hash: -> {
        data: ::Array[Telnyx::Models::GlobalIPProtocolListResponse::Data]
      }

      type data = { code: String, name: String, record_type: String }

      class Data < Telnyx::Internal::Type::BaseModel
        attr_reader name: String?

        def name=: (String) -> String

        attr_reader code: String?

        def code=: (String) -> String

        attr_reader record_type: String?

        def record_type=: (String) -> String

        def initialize: (
          ?code: String,
          ?name: String,
          ?record_type: String
        ) -> void

        def to_hash: -> { code: String, name: String, record_type: String }
      end
    end
  end
end
