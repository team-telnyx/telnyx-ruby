module Telnyx
  module Models
    type siprec_connector_retrieve_response =
      { data: Telnyx::Models::SiprecConnectorRetrieveResponse::Data }

    class SiprecConnectorRetrieveResponse < Telnyx::Internal::Type::BaseModel
      attr_accessor data: Telnyx::Models::SiprecConnectorRetrieveResponse::Data

      def initialize: (
        data: Telnyx::Models::SiprecConnectorRetrieveResponse::Data
      ) -> void

      def to_hash: -> {
        data: Telnyx::Models::SiprecConnectorRetrieveResponse::Data
      }

      type data =
        {
          app_subdomain: String,
          created_at: String,
          host: String,
          name: String,
          port: Integer,
          record_type: String,
          updated_at: String
        }

      class Data < Telnyx::Internal::Type::BaseModel
        attr_reader app_subdomain: String?

        def app_subdomain=: (String) -> String

        attr_reader created_at: String?

        def created_at=: (String) -> String

        attr_reader host: String?

        def host=: (String) -> String

        attr_reader name: String?

        def name=: (String) -> String

        attr_reader port: Integer?

        def port=: (Integer) -> Integer

        attr_reader record_type: String?

        def record_type=: (String) -> String

        attr_reader updated_at: String?

        def updated_at=: (String) -> String

        def initialize: (
          ?app_subdomain: String,
          ?created_at: String,
          ?host: String,
          ?name: String,
          ?port: Integer,
          ?record_type: String,
          ?updated_at: String
        ) -> void

        def to_hash: -> {
          app_subdomain: String,
          created_at: String,
          host: String,
          name: String,
          port: Integer,
          record_type: String,
          updated_at: String
        }
      end
    end
  end
end
