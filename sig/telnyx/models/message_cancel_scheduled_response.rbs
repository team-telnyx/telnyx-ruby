module Telnyx
  module Models
    type message_cancel_scheduled_response =
      {
        id: String,
        completed_at: Time,
        cost: Telnyx::Models::MessageCancelScheduledResponse::Cost?,
        cost_breakdown: Telnyx::Models::MessageCancelScheduledResponse::CostBreakdown?,
        direction: Telnyx::Models::MessageCancelScheduledResponse::direction,
        encoding: String,
        errors: ::Array[Telnyx::MessagingError],
        from: Telnyx::Models::MessageCancelScheduledResponse::From,
        media: ::Array[Telnyx::Models::MessageCancelScheduledResponse::Media],
        messaging_profile_id: String,
        organization_id: String,
        parts: Integer,
        received_at: Time,
        record_type: Telnyx::Models::MessageCancelScheduledResponse::record_type,
        sent_at: Time,
        subject: String?,
        tags: ::Array[String],
        tcr_campaign_billable: bool,
        tcr_campaign_id: String?,
        tcr_campaign_registered: String?,
        text: String,
        to: ::Array[Telnyx::Models::MessageCancelScheduledResponse::To],
        type: Telnyx::Models::MessageCancelScheduledResponse::type_,
        valid_until: Time?,
        webhook_failover_url: String?,
        webhook_url: String?
      }

    class MessageCancelScheduledResponse < Telnyx::Internal::Type::BaseModel
      attr_reader id: String?

      def id=: (String) -> String

      attr_reader completed_at: Time?

      def completed_at=: (Time) -> Time

      attr_accessor cost: Telnyx::Models::MessageCancelScheduledResponse::Cost?

      attr_accessor cost_breakdown: Telnyx::Models::MessageCancelScheduledResponse::CostBreakdown?

      attr_reader direction: Telnyx::Models::MessageCancelScheduledResponse::direction?

      def direction=: (
        Telnyx::Models::MessageCancelScheduledResponse::direction
      ) -> Telnyx::Models::MessageCancelScheduledResponse::direction

      attr_reader encoding: String?

      def encoding=: (String) -> String

      attr_reader errors: ::Array[Telnyx::MessagingError]?

      def errors=: (
        ::Array[Telnyx::MessagingError]
      ) -> ::Array[Telnyx::MessagingError]

      attr_reader from: Telnyx::Models::MessageCancelScheduledResponse::From?

      def from=: (
        Telnyx::Models::MessageCancelScheduledResponse::From
      ) -> Telnyx::Models::MessageCancelScheduledResponse::From

      attr_reader media: ::Array[Telnyx::Models::MessageCancelScheduledResponse::Media]?

      def media=: (
        ::Array[Telnyx::Models::MessageCancelScheduledResponse::Media]
      ) -> ::Array[Telnyx::Models::MessageCancelScheduledResponse::Media]

      attr_reader messaging_profile_id: String?

      def messaging_profile_id=: (String) -> String

      attr_reader organization_id: String?

      def organization_id=: (String) -> String

      attr_reader parts: Integer?

      def parts=: (Integer) -> Integer

      attr_reader received_at: Time?

      def received_at=: (Time) -> Time

      attr_reader record_type: Telnyx::Models::MessageCancelScheduledResponse::record_type?

      def record_type=: (
        Telnyx::Models::MessageCancelScheduledResponse::record_type
      ) -> Telnyx::Models::MessageCancelScheduledResponse::record_type

      attr_reader sent_at: Time?

      def sent_at=: (Time) -> Time

      attr_accessor subject: String?

      attr_reader tags: ::Array[String]?

      def tags=: (::Array[String]) -> ::Array[String]

      attr_reader tcr_campaign_billable: bool?

      def tcr_campaign_billable=: (bool) -> bool

      attr_accessor tcr_campaign_id: String?

      attr_accessor tcr_campaign_registered: String?

      attr_reader text: String?

      def text=: (String) -> String

      attr_reader to: ::Array[Telnyx::Models::MessageCancelScheduledResponse::To]?

      def to=: (
        ::Array[Telnyx::Models::MessageCancelScheduledResponse::To]
      ) -> ::Array[Telnyx::Models::MessageCancelScheduledResponse::To]

      attr_reader type: Telnyx::Models::MessageCancelScheduledResponse::type_?

      def type=: (
        Telnyx::Models::MessageCancelScheduledResponse::type_
      ) -> Telnyx::Models::MessageCancelScheduledResponse::type_

      attr_accessor valid_until: Time?

      attr_accessor webhook_failover_url: String?

      attr_accessor webhook_url: String?

      def initialize: (
        ?id: String,
        ?completed_at: Time,
        ?cost: Telnyx::Models::MessageCancelScheduledResponse::Cost?,
        ?cost_breakdown: Telnyx::Models::MessageCancelScheduledResponse::CostBreakdown?,
        ?direction: Telnyx::Models::MessageCancelScheduledResponse::direction,
        ?encoding: String,
        ?errors: ::Array[Telnyx::MessagingError],
        ?from: Telnyx::Models::MessageCancelScheduledResponse::From,
        ?media: ::Array[Telnyx::Models::MessageCancelScheduledResponse::Media],
        ?messaging_profile_id: String,
        ?organization_id: String,
        ?parts: Integer,
        ?received_at: Time,
        ?record_type: Telnyx::Models::MessageCancelScheduledResponse::record_type,
        ?sent_at: Time,
        ?subject: String?,
        ?tags: ::Array[String],
        ?tcr_campaign_billable: bool,
        ?tcr_campaign_id: String?,
        ?tcr_campaign_registered: String?,
        ?text: String,
        ?to: ::Array[Telnyx::Models::MessageCancelScheduledResponse::To],
        ?type: Telnyx::Models::MessageCancelScheduledResponse::type_,
        ?valid_until: Time?,
        ?webhook_failover_url: String?,
        ?webhook_url: String?
      ) -> void

      def to_hash: -> {
        id: String,
        completed_at: Time,
        cost: Telnyx::Models::MessageCancelScheduledResponse::Cost?,
        cost_breakdown: Telnyx::Models::MessageCancelScheduledResponse::CostBreakdown?,
        direction: Telnyx::Models::MessageCancelScheduledResponse::direction,
        encoding: String,
        errors: ::Array[Telnyx::MessagingError],
        from: Telnyx::Models::MessageCancelScheduledResponse::From,
        media: ::Array[Telnyx::Models::MessageCancelScheduledResponse::Media],
        messaging_profile_id: String,
        organization_id: String,
        parts: Integer,
        received_at: Time,
        record_type: Telnyx::Models::MessageCancelScheduledResponse::record_type,
        sent_at: Time,
        subject: String?,
        tags: ::Array[String],
        tcr_campaign_billable: bool,
        tcr_campaign_id: String?,
        tcr_campaign_registered: String?,
        text: String,
        to: ::Array[Telnyx::Models::MessageCancelScheduledResponse::To],
        type: Telnyx::Models::MessageCancelScheduledResponse::type_,
        valid_until: Time?,
        webhook_failover_url: String?,
        webhook_url: String?
      }

      type cost = { amount: String, currency: String }

      class Cost < Telnyx::Internal::Type::BaseModel
        attr_reader amount: String?

        def amount=: (String) -> String

        attr_reader currency: String?

        def currency=: (String) -> String

        def initialize: (?amount: String, ?currency: String) -> void

        def to_hash: -> { amount: String, currency: String }
      end

      type cost_breakdown =
        {
          carrier_fee: Telnyx::Models::MessageCancelScheduledResponse::CostBreakdown::CarrierFee,
          rate: Telnyx::Models::MessageCancelScheduledResponse::CostBreakdown::Rate
        }

      class CostBreakdown < Telnyx::Internal::Type::BaseModel
        attr_reader carrier_fee: Telnyx::Models::MessageCancelScheduledResponse::CostBreakdown::CarrierFee?

        def carrier_fee=: (
          Telnyx::Models::MessageCancelScheduledResponse::CostBreakdown::CarrierFee
        ) -> Telnyx::Models::MessageCancelScheduledResponse::CostBreakdown::CarrierFee

        attr_reader rate: Telnyx::Models::MessageCancelScheduledResponse::CostBreakdown::Rate?

        def rate=: (
          Telnyx::Models::MessageCancelScheduledResponse::CostBreakdown::Rate
        ) -> Telnyx::Models::MessageCancelScheduledResponse::CostBreakdown::Rate

        def initialize: (
          ?carrier_fee: Telnyx::Models::MessageCancelScheduledResponse::CostBreakdown::CarrierFee,
          ?rate: Telnyx::Models::MessageCancelScheduledResponse::CostBreakdown::Rate
        ) -> void

        def to_hash: -> {
          carrier_fee: Telnyx::Models::MessageCancelScheduledResponse::CostBreakdown::CarrierFee,
          rate: Telnyx::Models::MessageCancelScheduledResponse::CostBreakdown::Rate
        }

        type carrier_fee = { amount: String, currency: String }

        class CarrierFee < Telnyx::Internal::Type::BaseModel
          attr_reader amount: String?

          def amount=: (String) -> String

          attr_reader currency: String?

          def currency=: (String) -> String

          def initialize: (?amount: String, ?currency: String) -> void

          def to_hash: -> { amount: String, currency: String }
        end

        type rate = { amount: String, currency: String }

        class Rate < Telnyx::Internal::Type::BaseModel
          attr_reader amount: String?

          def amount=: (String) -> String

          attr_reader currency: String?

          def currency=: (String) -> String

          def initialize: (?amount: String, ?currency: String) -> void

          def to_hash: -> { amount: String, currency: String }
        end
      end

      type direction = :outbound

      module Direction
        extend Telnyx::Internal::Type::Enum

        OUTBOUND: :outbound

        def self?.values: -> ::Array[Telnyx::Models::MessageCancelScheduledResponse::direction]
      end

      type from =
        {
          carrier: String,
          line_type: Telnyx::Models::MessageCancelScheduledResponse::From::line_type,
          phone_number: String
        }

      class From < Telnyx::Internal::Type::BaseModel
        attr_reader carrier: String?

        def carrier=: (String) -> String

        attr_reader line_type: Telnyx::Models::MessageCancelScheduledResponse::From::line_type?

        def line_type=: (
          Telnyx::Models::MessageCancelScheduledResponse::From::line_type
        ) -> Telnyx::Models::MessageCancelScheduledResponse::From::line_type

        attr_reader phone_number: String?

        def phone_number=: (String) -> String

        def initialize: (
          ?carrier: String,
          ?line_type: Telnyx::Models::MessageCancelScheduledResponse::From::line_type,
          ?phone_number: String
        ) -> void

        def to_hash: -> {
          carrier: String,
          line_type: Telnyx::Models::MessageCancelScheduledResponse::From::line_type,
          phone_number: String
        }

        type line_type =
          :Wireline | :Wireless | :VoWiFi | :VoIP | :"Pre-Paid Wireless" | :""

        module LineType
          extend Telnyx::Internal::Type::Enum

          WIRELINE: :Wireline
          WIRELESS: :Wireless
          VO_WI_FI: :VoWiFi
          VO_IP: :VoIP
          PRE_PAID_WIRELESS: :"Pre-Paid Wireless"
          EMPTY: :""

          def self?.values: -> ::Array[Telnyx::Models::MessageCancelScheduledResponse::From::line_type]
        end
      end

      type media =
        {
          content_type: String?,
          :sha256 => String?,
          size: Integer?,
          url: String
        }

      class Media < Telnyx::Internal::Type::BaseModel
        attr_accessor content_type: String?

        attr_accessor sha256: String?

        attr_accessor size: Integer?

        attr_reader url: String?

        def url=: (String) -> String

        def initialize: (
          ?content_type: String?,
          ?sha256: String?,
          ?size: Integer?,
          ?url: String
        ) -> void

        def to_hash: -> {
          content_type: String?,
          :sha256 => String?,
          size: Integer?,
          url: String
        }
      end

      type record_type = :message

      module RecordType
        extend Telnyx::Internal::Type::Enum

        MESSAGE: :message

        def self?.values: -> ::Array[Telnyx::Models::MessageCancelScheduledResponse::record_type]
      end

      type to =
        {
          carrier: String,
          line_type: Telnyx::Models::MessageCancelScheduledResponse::To::line_type,
          phone_number: String,
          status: Telnyx::Models::MessageCancelScheduledResponse::To::status
        }

      class To < Telnyx::Internal::Type::BaseModel
        attr_reader carrier: String?

        def carrier=: (String) -> String

        attr_reader line_type: Telnyx::Models::MessageCancelScheduledResponse::To::line_type?

        def line_type=: (
          Telnyx::Models::MessageCancelScheduledResponse::To::line_type
        ) -> Telnyx::Models::MessageCancelScheduledResponse::To::line_type

        attr_reader phone_number: String?

        def phone_number=: (String) -> String

        attr_reader status: Telnyx::Models::MessageCancelScheduledResponse::To::status?

        def status=: (
          Telnyx::Models::MessageCancelScheduledResponse::To::status
        ) -> Telnyx::Models::MessageCancelScheduledResponse::To::status

        def initialize: (
          ?carrier: String,
          ?line_type: Telnyx::Models::MessageCancelScheduledResponse::To::line_type,
          ?phone_number: String,
          ?status: Telnyx::Models::MessageCancelScheduledResponse::To::status
        ) -> void

        def to_hash: -> {
          carrier: String,
          line_type: Telnyx::Models::MessageCancelScheduledResponse::To::line_type,
          phone_number: String,
          status: Telnyx::Models::MessageCancelScheduledResponse::To::status
        }

        type line_type =
          :Wireline | :Wireless | :VoWiFi | :VoIP | :"Pre-Paid Wireless" | :""

        module LineType
          extend Telnyx::Internal::Type::Enum

          WIRELINE: :Wireline
          WIRELESS: :Wireless
          VO_WI_FI: :VoWiFi
          VO_IP: :VoIP
          PRE_PAID_WIRELESS: :"Pre-Paid Wireless"
          EMPTY: :""

          def self?.values: -> ::Array[Telnyx::Models::MessageCancelScheduledResponse::To::line_type]
        end

        type status =
          :scheduled
          | :queued
          | :sending
          | :sent
          | :cancelled
          | :expired
          | :sending_failed
          | :delivery_unconfirmed
          | :delivered
          | :delivery_failed

        module Status
          extend Telnyx::Internal::Type::Enum

          SCHEDULED: :scheduled
          QUEUED: :queued
          SENDING: :sending
          SENT: :sent
          CANCELLED: :cancelled
          EXPIRED: :expired
          SENDING_FAILED: :sending_failed
          DELIVERY_UNCONFIRMED: :delivery_unconfirmed
          DELIVERED: :delivered
          DELIVERY_FAILED: :delivery_failed

          def self?.values: -> ::Array[Telnyx::Models::MessageCancelScheduledResponse::To::status]
        end
      end

      type type_ = :SMS | :MMS

      module Type
        extend Telnyx::Internal::Type::Enum

        SMS: :SMS
        MMS: :MMS

        def self?.values: -> ::Array[Telnyx::Models::MessageCancelScheduledResponse::type_]
      end
    end
  end
end
