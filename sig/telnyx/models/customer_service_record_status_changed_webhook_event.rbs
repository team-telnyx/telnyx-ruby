module Telnyx
  module Models
    type customer_service_record_status_changed_webhook_event =
      {
        data: Telnyx::CustomerServiceRecordStatusChangedWebhookEvent::Data,
        meta: Telnyx::CustomerServiceRecordStatusChangedWebhookEvent::Meta
      }

    class CustomerServiceRecordStatusChangedWebhookEvent < Telnyx::Internal::Type::BaseModel
      attr_reader data: Telnyx::CustomerServiceRecordStatusChangedWebhookEvent::Data?

      def data=: (
        Telnyx::CustomerServiceRecordStatusChangedWebhookEvent::Data
      ) -> Telnyx::CustomerServiceRecordStatusChangedWebhookEvent::Data

      attr_reader meta: Telnyx::CustomerServiceRecordStatusChangedWebhookEvent::Meta?

      def meta=: (
        Telnyx::CustomerServiceRecordStatusChangedWebhookEvent::Meta
      ) -> Telnyx::CustomerServiceRecordStatusChangedWebhookEvent::Meta

      def initialize: (
        ?data: Telnyx::CustomerServiceRecordStatusChangedWebhookEvent::Data,
        ?meta: Telnyx::CustomerServiceRecordStatusChangedWebhookEvent::Meta
      ) -> void

      def to_hash: -> {
        data: Telnyx::CustomerServiceRecordStatusChangedWebhookEvent::Data,
        meta: Telnyx::CustomerServiceRecordStatusChangedWebhookEvent::Meta
      }

      type data =
        {
          id: String,
          event_type: Telnyx::Models::CustomerServiceRecordStatusChangedWebhookEvent::Data::event_type,
          occurred_at: Time,
          payload: Telnyx::CustomerServiceRecordStatusChangedWebhookEvent::Data::Payload,
          record_type: Telnyx::Models::CustomerServiceRecordStatusChangedWebhookEvent::Data::record_type
        }

      class Data < Telnyx::Internal::Type::BaseModel
        attr_reader id: String?

        def id=: (String) -> String

        attr_reader event_type: Telnyx::Models::CustomerServiceRecordStatusChangedWebhookEvent::Data::event_type?

        def event_type=: (
          Telnyx::Models::CustomerServiceRecordStatusChangedWebhookEvent::Data::event_type
        ) -> Telnyx::Models::CustomerServiceRecordStatusChangedWebhookEvent::Data::event_type

        attr_reader occurred_at: Time?

        def occurred_at=: (Time) -> Time

        attr_reader payload: Telnyx::CustomerServiceRecordStatusChangedWebhookEvent::Data::Payload?

        def payload=: (
          Telnyx::CustomerServiceRecordStatusChangedWebhookEvent::Data::Payload
        ) -> Telnyx::CustomerServiceRecordStatusChangedWebhookEvent::Data::Payload

        attr_reader record_type: Telnyx::Models::CustomerServiceRecordStatusChangedWebhookEvent::Data::record_type?

        def record_type=: (
          Telnyx::Models::CustomerServiceRecordStatusChangedWebhookEvent::Data::record_type
        ) -> Telnyx::Models::CustomerServiceRecordStatusChangedWebhookEvent::Data::record_type

        def initialize: (
          ?id: String,
          ?event_type: Telnyx::Models::CustomerServiceRecordStatusChangedWebhookEvent::Data::event_type,
          ?occurred_at: Time,
          ?payload: Telnyx::CustomerServiceRecordStatusChangedWebhookEvent::Data::Payload,
          ?record_type: Telnyx::Models::CustomerServiceRecordStatusChangedWebhookEvent::Data::record_type
        ) -> void

        def to_hash: -> {
          id: String,
          event_type: Telnyx::Models::CustomerServiceRecordStatusChangedWebhookEvent::Data::event_type,
          occurred_at: Time,
          payload: Telnyx::CustomerServiceRecordStatusChangedWebhookEvent::Data::Payload,
          record_type: Telnyx::Models::CustomerServiceRecordStatusChangedWebhookEvent::Data::record_type
        }

        type event_type = :"customer_service_record.status_changed"

        module EventType
          extend Telnyx::Internal::Type::Enum

          CUSTOMER_SERVICE_RECORD_STATUS_CHANGED: :"customer_service_record.status_changed"

          def self?.values: -> ::Array[Telnyx::Models::CustomerServiceRecordStatusChangedWebhookEvent::Data::event_type]
        end

        type payload =
          {
            id: String,
            phone_number: String,
            status: Telnyx::Models::CustomerServiceRecordStatusChangedWebhookEvent::Data::Payload::status,
            updated_at: Time
          }

        class Payload < Telnyx::Internal::Type::BaseModel
          attr_reader id: String?

          def id=: (String) -> String

          attr_reader phone_number: String?

          def phone_number=: (String) -> String

          attr_reader status: Telnyx::Models::CustomerServiceRecordStatusChangedWebhookEvent::Data::Payload::status?

          def status=: (
            Telnyx::Models::CustomerServiceRecordStatusChangedWebhookEvent::Data::Payload::status
          ) -> Telnyx::Models::CustomerServiceRecordStatusChangedWebhookEvent::Data::Payload::status

          attr_reader updated_at: Time?

          def updated_at=: (Time) -> Time

          def initialize: (
            ?id: String,
            ?phone_number: String,
            ?status: Telnyx::Models::CustomerServiceRecordStatusChangedWebhookEvent::Data::Payload::status,
            ?updated_at: Time
          ) -> void

          def to_hash: -> {
            id: String,
            phone_number: String,
            status: Telnyx::Models::CustomerServiceRecordStatusChangedWebhookEvent::Data::Payload::status,
            updated_at: Time
          }

          type status = :pending | :completed | :failed

          module Status
            extend Telnyx::Internal::Type::Enum

            PENDING: :pending
            COMPLETED: :completed
            FAILED: :failed

            def self?.values: -> ::Array[Telnyx::Models::CustomerServiceRecordStatusChangedWebhookEvent::Data::Payload::status]
          end
        end

        type record_type = :event

        module RecordType
          extend Telnyx::Internal::Type::Enum

          EVENT: :event

          def self?.values: -> ::Array[Telnyx::Models::CustomerServiceRecordStatusChangedWebhookEvent::Data::record_type]
        end
      end

      type meta = { attempt: Integer, delivered_to: String }

      class Meta < Telnyx::Internal::Type::BaseModel
        attr_reader attempt: Integer?

        def attempt=: (Integer) -> Integer

        attr_reader delivered_to: String?

        def delivered_to=: (String) -> String

        def initialize: (?attempt: Integer, ?delivered_to: String) -> void

        def to_hash: -> { attempt: Integer, delivered_to: String }
      end
    end
  end
end
