module Telnyx
  module Models
    type conference_create_params =
      {
        call_control_id: String,
        name: String,
        beep_enabled: Telnyx::Models::ConferenceCreateParams::beep_enabled,
        client_state: String,
        comfort_noise: bool,
        command_id: String,
        duration_minutes: Integer,
        hold_audio_url: String,
        hold_media_name: String,
        max_participants: Integer,
        region: Telnyx::Models::ConferenceCreateParams::region,
        start_conference_on_create: bool
      }
      & Telnyx::Internal::Type::request_parameters

    class ConferenceCreateParams < Telnyx::Internal::Type::BaseModel
      extend Telnyx::Internal::Type::RequestParameters::Converter
      include Telnyx::Internal::Type::RequestParameters

      attr_accessor call_control_id: String

      attr_accessor name: String

      attr_reader beep_enabled: Telnyx::Models::ConferenceCreateParams::beep_enabled?

      def beep_enabled=: (
        Telnyx::Models::ConferenceCreateParams::beep_enabled
      ) -> Telnyx::Models::ConferenceCreateParams::beep_enabled

      attr_reader client_state: String?

      def client_state=: (String) -> String

      attr_reader comfort_noise: bool?

      def comfort_noise=: (bool) -> bool

      attr_reader command_id: String?

      def command_id=: (String) -> String

      attr_reader duration_minutes: Integer?

      def duration_minutes=: (Integer) -> Integer

      attr_reader hold_audio_url: String?

      def hold_audio_url=: (String) -> String

      attr_reader hold_media_name: String?

      def hold_media_name=: (String) -> String

      attr_reader max_participants: Integer?

      def max_participants=: (Integer) -> Integer

      attr_reader region: Telnyx::Models::ConferenceCreateParams::region?

      def region=: (
        Telnyx::Models::ConferenceCreateParams::region
      ) -> Telnyx::Models::ConferenceCreateParams::region

      attr_reader start_conference_on_create: bool?

      def start_conference_on_create=: (bool) -> bool

      def initialize: (
        call_control_id: String,
        name: String,
        ?beep_enabled: Telnyx::Models::ConferenceCreateParams::beep_enabled,
        ?client_state: String,
        ?comfort_noise: bool,
        ?command_id: String,
        ?duration_minutes: Integer,
        ?hold_audio_url: String,
        ?hold_media_name: String,
        ?max_participants: Integer,
        ?region: Telnyx::Models::ConferenceCreateParams::region,
        ?start_conference_on_create: bool,
        ?request_options: Telnyx::request_opts
      ) -> void

      def to_hash: -> {
        call_control_id: String,
        name: String,
        beep_enabled: Telnyx::Models::ConferenceCreateParams::beep_enabled,
        client_state: String,
        comfort_noise: bool,
        command_id: String,
        duration_minutes: Integer,
        hold_audio_url: String,
        hold_media_name: String,
        max_participants: Integer,
        region: Telnyx::Models::ConferenceCreateParams::region,
        start_conference_on_create: bool,
        request_options: Telnyx::RequestOptions
      }

      type beep_enabled = :always | :never | :on_enter | :on_exit

      module BeepEnabled
        extend Telnyx::Internal::Type::Enum

        ALWAYS: :always
        NEVER: :never
        ON_ENTER: :on_enter
        ON_EXIT: :on_exit

        def self?.values: -> ::Array[Telnyx::Models::ConferenceCreateParams::beep_enabled]
      end

      type region = :Australia | :Europe | :"Middle East" | :US

      module Region
        extend Telnyx::Internal::Type::Enum

        AUSTRALIA: :Australia
        EUROPE: :Europe
        MIDDLE_EAST: :"Middle East"
        US: :US

        def self?.values: -> ::Array[Telnyx::Models::ConferenceCreateParams::region]
      end
    end
  end
end
