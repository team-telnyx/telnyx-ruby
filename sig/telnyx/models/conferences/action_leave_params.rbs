module Telnyx
  module Models
    module Conferences
      type action_leave_params =
        {
          call_control_id: String,
          beep_enabled: Telnyx::Models::Conferences::ActionLeaveParams::beep_enabled,
          command_id: String
        }
        & Telnyx::Internal::Type::request_parameters

      class ActionLeaveParams < Telnyx::Internal::Type::BaseModel
        extend Telnyx::Internal::Type::RequestParameters::Converter
        include Telnyx::Internal::Type::RequestParameters

        attr_accessor call_control_id: String

        attr_reader beep_enabled: Telnyx::Models::Conferences::ActionLeaveParams::beep_enabled?

        def beep_enabled=: (
          Telnyx::Models::Conferences::ActionLeaveParams::beep_enabled
        ) -> Telnyx::Models::Conferences::ActionLeaveParams::beep_enabled

        attr_reader command_id: String?

        def command_id=: (String) -> String

        def initialize: (
          call_control_id: String,
          ?beep_enabled: Telnyx::Models::Conferences::ActionLeaveParams::beep_enabled,
          ?command_id: String,
          ?request_options: Telnyx::request_opts
        ) -> void

        def to_hash: -> {
          call_control_id: String,
          beep_enabled: Telnyx::Models::Conferences::ActionLeaveParams::beep_enabled,
          command_id: String,
          request_options: Telnyx::RequestOptions
        }

        type beep_enabled = :always | :never | :on_enter | :on_exit

        module BeepEnabled
          extend Telnyx::Internal::Type::Enum

          ALWAYS: :always
          NEVER: :never
          ON_ENTER: :on_enter
          ON_EXIT: :on_exit

          def self?.values: -> ::Array[Telnyx::Models::Conferences::ActionLeaveParams::beep_enabled]
        end
      end
    end
  end
end
