module Telnyx
  module Models
    type conference_playback_started_webhook_event =
      { data: Telnyx::ConferencePlaybackStartedWebhookEvent::Data }

    class ConferencePlaybackStartedWebhookEvent < Telnyx::Internal::Type::BaseModel
      attr_reader data: Telnyx::ConferencePlaybackStartedWebhookEvent::Data?

      def data=: (
        Telnyx::ConferencePlaybackStartedWebhookEvent::Data
      ) -> Telnyx::ConferencePlaybackStartedWebhookEvent::Data

      def initialize: (
        ?data: Telnyx::ConferencePlaybackStartedWebhookEvent::Data
      ) -> void

      def to_hash: -> {
        data: Telnyx::ConferencePlaybackStartedWebhookEvent::Data
      }

      type data =
        {
          id: String,
          event_type: Telnyx::Models::ConferencePlaybackStartedWebhookEvent::Data::event_type,
          payload: Telnyx::ConferencePlaybackStartedWebhookEvent::Data::Payload,
          record_type: Telnyx::Models::ConferencePlaybackStartedWebhookEvent::Data::record_type
        }

      class Data < Telnyx::Internal::Type::BaseModel
        attr_reader id: String?

        def id=: (String) -> String

        attr_reader event_type: Telnyx::Models::ConferencePlaybackStartedWebhookEvent::Data::event_type?

        def event_type=: (
          Telnyx::Models::ConferencePlaybackStartedWebhookEvent::Data::event_type
        ) -> Telnyx::Models::ConferencePlaybackStartedWebhookEvent::Data::event_type

        attr_reader payload: Telnyx::ConferencePlaybackStartedWebhookEvent::Data::Payload?

        def payload=: (
          Telnyx::ConferencePlaybackStartedWebhookEvent::Data::Payload
        ) -> Telnyx::ConferencePlaybackStartedWebhookEvent::Data::Payload

        attr_reader record_type: Telnyx::Models::ConferencePlaybackStartedWebhookEvent::Data::record_type?

        def record_type=: (
          Telnyx::Models::ConferencePlaybackStartedWebhookEvent::Data::record_type
        ) -> Telnyx::Models::ConferencePlaybackStartedWebhookEvent::Data::record_type

        def initialize: (
          ?id: String,
          ?event_type: Telnyx::Models::ConferencePlaybackStartedWebhookEvent::Data::event_type,
          ?payload: Telnyx::ConferencePlaybackStartedWebhookEvent::Data::Payload,
          ?record_type: Telnyx::Models::ConferencePlaybackStartedWebhookEvent::Data::record_type
        ) -> void

        def to_hash: -> {
          id: String,
          event_type: Telnyx::Models::ConferencePlaybackStartedWebhookEvent::Data::event_type,
          payload: Telnyx::ConferencePlaybackStartedWebhookEvent::Data::Payload,
          record_type: Telnyx::Models::ConferencePlaybackStartedWebhookEvent::Data::record_type
        }

        type event_type = :"conference.playback.started"

        module EventType
          extend Telnyx::Internal::Type::Enum

          CONFERENCE_PLAYBACK_STARTED: :"conference.playback.started"

          def self?.values: -> ::Array[Telnyx::Models::ConferencePlaybackStartedWebhookEvent::Data::event_type]
        end

        type payload =
          {
            conference_id: String,
            connection_id: String,
            creator_call_session_id: String,
            media_name: String,
            media_url: String,
            occurred_at: Time
          }

        class Payload < Telnyx::Internal::Type::BaseModel
          attr_reader conference_id: String?

          def conference_id=: (String) -> String

          attr_reader connection_id: String?

          def connection_id=: (String) -> String

          attr_reader creator_call_session_id: String?

          def creator_call_session_id=: (String) -> String

          attr_reader media_name: String?

          def media_name=: (String) -> String

          attr_reader media_url: String?

          def media_url=: (String) -> String

          attr_reader occurred_at: Time?

          def occurred_at=: (Time) -> Time

          def initialize: (
            ?conference_id: String,
            ?connection_id: String,
            ?creator_call_session_id: String,
            ?media_name: String,
            ?media_url: String,
            ?occurred_at: Time
          ) -> void

          def to_hash: -> {
            conference_id: String,
            connection_id: String,
            creator_call_session_id: String,
            media_name: String,
            media_url: String,
            occurred_at: Time
          }
        end

        type record_type = :event

        module RecordType
          extend Telnyx::Internal::Type::Enum

          EVENT: :event

          def self?.values: -> ::Array[Telnyx::Models::ConferencePlaybackStartedWebhookEvent::Data::record_type]
        end
      end
    end
  end
end
