module Telnyx
  module Models
    module AI
      type inference_embedding_webhook_tool_params =
        {
          description: String,
          name: String,
          url: String,
          body_parameters: Telnyx::AI::InferenceEmbeddingWebhookToolParams::BodyParameters,
          headers: ::Array[Telnyx::AI::InferenceEmbeddingWebhookToolParams::Header],
          method_: Telnyx::Models::AI::InferenceEmbeddingWebhookToolParams::method_,
          path_parameters: Telnyx::AI::InferenceEmbeddingWebhookToolParams::PathParameters,
          query_parameters: Telnyx::AI::InferenceEmbeddingWebhookToolParams::QueryParameters
        }

      class InferenceEmbeddingWebhookToolParams < Telnyx::Internal::Type::BaseModel
        attr_accessor description: String

        attr_accessor name: String

        attr_accessor url: String

        attr_reader body_parameters: Telnyx::AI::InferenceEmbeddingWebhookToolParams::BodyParameters?

        def body_parameters=: (
          Telnyx::AI::InferenceEmbeddingWebhookToolParams::BodyParameters
        ) -> Telnyx::AI::InferenceEmbeddingWebhookToolParams::BodyParameters

        attr_reader headers: ::Array[Telnyx::AI::InferenceEmbeddingWebhookToolParams::Header]?

        def headers=: (
          ::Array[Telnyx::AI::InferenceEmbeddingWebhookToolParams::Header]
        ) -> ::Array[Telnyx::AI::InferenceEmbeddingWebhookToolParams::Header]

        attr_reader method_: Telnyx::Models::AI::InferenceEmbeddingWebhookToolParams::method_?

        def method_=: (
          Telnyx::Models::AI::InferenceEmbeddingWebhookToolParams::method_
        ) -> Telnyx::Models::AI::InferenceEmbeddingWebhookToolParams::method_

        attr_reader path_parameters: Telnyx::AI::InferenceEmbeddingWebhookToolParams::PathParameters?

        def path_parameters=: (
          Telnyx::AI::InferenceEmbeddingWebhookToolParams::PathParameters
        ) -> Telnyx::AI::InferenceEmbeddingWebhookToolParams::PathParameters

        attr_reader query_parameters: Telnyx::AI::InferenceEmbeddingWebhookToolParams::QueryParameters?

        def query_parameters=: (
          Telnyx::AI::InferenceEmbeddingWebhookToolParams::QueryParameters
        ) -> Telnyx::AI::InferenceEmbeddingWebhookToolParams::QueryParameters

        def initialize: (
          description: String,
          name: String,
          url: String,
          ?body_parameters: Telnyx::AI::InferenceEmbeddingWebhookToolParams::BodyParameters,
          ?headers: ::Array[Telnyx::AI::InferenceEmbeddingWebhookToolParams::Header],
          ?method_: Telnyx::Models::AI::InferenceEmbeddingWebhookToolParams::method_,
          ?path_parameters: Telnyx::AI::InferenceEmbeddingWebhookToolParams::PathParameters,
          ?query_parameters: Telnyx::AI::InferenceEmbeddingWebhookToolParams::QueryParameters
        ) -> void

        def to_hash: -> {
          description: String,
          name: String,
          url: String,
          body_parameters: Telnyx::AI::InferenceEmbeddingWebhookToolParams::BodyParameters,
          headers: ::Array[Telnyx::AI::InferenceEmbeddingWebhookToolParams::Header],
          method_: Telnyx::Models::AI::InferenceEmbeddingWebhookToolParams::method_,
          path_parameters: Telnyx::AI::InferenceEmbeddingWebhookToolParams::PathParameters,
          query_parameters: Telnyx::AI::InferenceEmbeddingWebhookToolParams::QueryParameters
        }

        type body_parameters =
          {
            properties: ::Hash[Symbol, top],
            required: ::Array[String],
            type: Telnyx::Models::AI::InferenceEmbeddingWebhookToolParams::BodyParameters::type_
          }

        class BodyParameters < Telnyx::Internal::Type::BaseModel
          attr_reader properties: ::Hash[Symbol, top]?

          def properties=: (::Hash[Symbol, top]) -> ::Hash[Symbol, top]

          attr_reader required: ::Array[String]?

          def required=: (::Array[String]) -> ::Array[String]

          attr_reader type: Telnyx::Models::AI::InferenceEmbeddingWebhookToolParams::BodyParameters::type_?

          def type=: (
            Telnyx::Models::AI::InferenceEmbeddingWebhookToolParams::BodyParameters::type_
          ) -> Telnyx::Models::AI::InferenceEmbeddingWebhookToolParams::BodyParameters::type_

          def initialize: (
            ?properties: ::Hash[Symbol, top],
            ?required: ::Array[String],
            ?type: Telnyx::Models::AI::InferenceEmbeddingWebhookToolParams::BodyParameters::type_
          ) -> void

          def to_hash: -> {
            properties: ::Hash[Symbol, top],
            required: ::Array[String],
            type: Telnyx::Models::AI::InferenceEmbeddingWebhookToolParams::BodyParameters::type_
          }

          type type_ = :object

          module Type
            extend Telnyx::Internal::Type::Enum

            OBJECT: :object

            def self?.values: -> ::Array[Telnyx::Models::AI::InferenceEmbeddingWebhookToolParams::BodyParameters::type_]
          end
        end

        type header = { name: String, value: String }

        class Header < Telnyx::Internal::Type::BaseModel
          attr_reader name: String?

          def name=: (String) -> String

          attr_reader value: String?

          def value=: (String) -> String

          def initialize: (?name: String, ?value: String) -> void

          def to_hash: -> { name: String, value: String }
        end

        type method_ = :GET | :POST | :PUT | :DELETE | :PATCH

        module Method
          extend Telnyx::Internal::Type::Enum

          GET: :GET
          POST: :POST
          PUT: :PUT
          DELETE: :DELETE
          PATCH: :PATCH

          def self?.values: -> ::Array[Telnyx::Models::AI::InferenceEmbeddingWebhookToolParams::method_]
        end

        type path_parameters =
          {
            properties: ::Hash[Symbol, top],
            required: ::Array[String],
            type: Telnyx::Models::AI::InferenceEmbeddingWebhookToolParams::PathParameters::type_
          }

        class PathParameters < Telnyx::Internal::Type::BaseModel
          attr_reader properties: ::Hash[Symbol, top]?

          def properties=: (::Hash[Symbol, top]) -> ::Hash[Symbol, top]

          attr_reader required: ::Array[String]?

          def required=: (::Array[String]) -> ::Array[String]

          attr_reader type: Telnyx::Models::AI::InferenceEmbeddingWebhookToolParams::PathParameters::type_?

          def type=: (
            Telnyx::Models::AI::InferenceEmbeddingWebhookToolParams::PathParameters::type_
          ) -> Telnyx::Models::AI::InferenceEmbeddingWebhookToolParams::PathParameters::type_

          def initialize: (
            ?properties: ::Hash[Symbol, top],
            ?required: ::Array[String],
            ?type: Telnyx::Models::AI::InferenceEmbeddingWebhookToolParams::PathParameters::type_
          ) -> void

          def to_hash: -> {
            properties: ::Hash[Symbol, top],
            required: ::Array[String],
            type: Telnyx::Models::AI::InferenceEmbeddingWebhookToolParams::PathParameters::type_
          }

          type type_ = :object

          module Type
            extend Telnyx::Internal::Type::Enum

            OBJECT: :object

            def self?.values: -> ::Array[Telnyx::Models::AI::InferenceEmbeddingWebhookToolParams::PathParameters::type_]
          end
        end

        type query_parameters =
          {
            properties: ::Hash[Symbol, top],
            required: ::Array[String],
            type: Telnyx::Models::AI::InferenceEmbeddingWebhookToolParams::QueryParameters::type_
          }

        class QueryParameters < Telnyx::Internal::Type::BaseModel
          attr_reader properties: ::Hash[Symbol, top]?

          def properties=: (::Hash[Symbol, top]) -> ::Hash[Symbol, top]

          attr_reader required: ::Array[String]?

          def required=: (::Array[String]) -> ::Array[String]

          attr_reader type: Telnyx::Models::AI::InferenceEmbeddingWebhookToolParams::QueryParameters::type_?

          def type=: (
            Telnyx::Models::AI::InferenceEmbeddingWebhookToolParams::QueryParameters::type_
          ) -> Telnyx::Models::AI::InferenceEmbeddingWebhookToolParams::QueryParameters::type_

          def initialize: (
            ?properties: ::Hash[Symbol, top],
            ?required: ::Array[String],
            ?type: Telnyx::Models::AI::InferenceEmbeddingWebhookToolParams::QueryParameters::type_
          ) -> void

          def to_hash: -> {
            properties: ::Hash[Symbol, top],
            required: ::Array[String],
            type: Telnyx::Models::AI::InferenceEmbeddingWebhookToolParams::QueryParameters::type_
          }

          type type_ = :object

          module Type
            extend Telnyx::Internal::Type::Enum

            OBJECT: :object

            def self?.values: -> ::Array[Telnyx::Models::AI::InferenceEmbeddingWebhookToolParams::QueryParameters::type_]
          end
        end
      end
    end
  end
end
