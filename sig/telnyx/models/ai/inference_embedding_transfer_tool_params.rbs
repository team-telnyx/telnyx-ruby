module Telnyx
  module Models
    module AI
      type inference_embedding_transfer_tool_params =
        {
          from: String,
          targets: ::Array[Telnyx::AI::InferenceEmbeddingTransferToolParams::Target],
          custom_headers: ::Array[Telnyx::AI::InferenceEmbeddingTransferToolParams::CustomHeader],
          warm_transfer_instructions: String
        }

      class InferenceEmbeddingTransferToolParams < Telnyx::Internal::Type::BaseModel
        attr_accessor from: String

        attr_accessor targets: ::Array[Telnyx::AI::InferenceEmbeddingTransferToolParams::Target]

        attr_reader custom_headers: ::Array[Telnyx::AI::InferenceEmbeddingTransferToolParams::CustomHeader]?

        def custom_headers=: (
          ::Array[Telnyx::AI::InferenceEmbeddingTransferToolParams::CustomHeader]
        ) -> ::Array[Telnyx::AI::InferenceEmbeddingTransferToolParams::CustomHeader]

        attr_reader warm_transfer_instructions: String?

        def warm_transfer_instructions=: (String) -> String

        def initialize: (
          from: String,
          targets: ::Array[Telnyx::AI::InferenceEmbeddingTransferToolParams::Target],
          ?custom_headers: ::Array[Telnyx::AI::InferenceEmbeddingTransferToolParams::CustomHeader],
          ?warm_transfer_instructions: String
        ) -> void

        def to_hash: -> {
          from: String,
          targets: ::Array[Telnyx::AI::InferenceEmbeddingTransferToolParams::Target],
          custom_headers: ::Array[Telnyx::AI::InferenceEmbeddingTransferToolParams::CustomHeader],
          warm_transfer_instructions: String
        }

        type target = { name: String, to: String }

        class Target < Telnyx::Internal::Type::BaseModel
          attr_reader name: String?

          def name=: (String) -> String

          attr_reader to: String?

          def to=: (String) -> String

          def initialize: (?name: String, ?to: String) -> void

          def to_hash: -> { name: String, to: String }
        end

        type custom_header = { name: String, value: String }

        class CustomHeader < Telnyx::Internal::Type::BaseModel
          attr_reader name: String?

          def name=: (String) -> String

          attr_reader value: String?

          def value=: (String) -> String

          def initialize: (?name: String, ?value: String) -> void

          def to_hash: -> { name: String, value: String }
        end
      end
    end
  end
end
