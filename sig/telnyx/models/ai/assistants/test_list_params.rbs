module Telnyx
  module Models
    module AI
      module Assistants
        type test_list_params =
          {
            destination: String,
            page: Telnyx::AI::Assistants::TestListParams::Page,
            telnyx_conversation_channel: String,
            test_suite: String
          }
          & Telnyx::Internal::Type::request_parameters

        class TestListParams < Telnyx::Internal::Type::BaseModel
          extend Telnyx::Internal::Type::RequestParameters::Converter
          include Telnyx::Internal::Type::RequestParameters

          attr_reader destination: String?

          def destination=: (String) -> String

          attr_reader page: Telnyx::AI::Assistants::TestListParams::Page?

          def page=: (
            Telnyx::AI::Assistants::TestListParams::Page
          ) -> Telnyx::AI::Assistants::TestListParams::Page

          attr_reader telnyx_conversation_channel: String?

          def telnyx_conversation_channel=: (String) -> String

          attr_reader test_suite: String?

          def test_suite=: (String) -> String

          def initialize: (
            ?destination: String,
            ?page: Telnyx::AI::Assistants::TestListParams::Page,
            ?telnyx_conversation_channel: String,
            ?test_suite: String,
            ?request_options: Telnyx::request_opts
          ) -> void

          def to_hash: -> {
            destination: String,
            page: Telnyx::AI::Assistants::TestListParams::Page,
            telnyx_conversation_channel: String,
            test_suite: String,
            request_options: Telnyx::RequestOptions
          }

          type page = { number: Integer, size: Integer }

          class Page < Telnyx::Internal::Type::BaseModel
            attr_reader number: Integer?

            def number=: (Integer) -> Integer

            attr_reader size: Integer?

            def size=: (Integer) -> Integer

            def initialize: (?number: Integer, ?size: Integer) -> void

            def to_hash: -> { number: Integer, size: Integer }
          end
        end
      end
    end
  end
end
