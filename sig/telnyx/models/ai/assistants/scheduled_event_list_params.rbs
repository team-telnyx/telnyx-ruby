module Telnyx
  module Models
    module AI
      module Assistants
        type scheduled_event_list_params =
          {
            conversation_channel: Telnyx::Models::AI::Assistants::conversation_channel_type,
            from_date: Time,
            page: Telnyx::AI::Assistants::ScheduledEventListParams::Page,
            to_date: Time
          }
          & Telnyx::Internal::Type::request_parameters

        class ScheduledEventListParams < Telnyx::Internal::Type::BaseModel
          extend Telnyx::Internal::Type::RequestParameters::Converter
          include Telnyx::Internal::Type::RequestParameters

          attr_reader conversation_channel: Telnyx::Models::AI::Assistants::conversation_channel_type?

          def conversation_channel=: (
            Telnyx::Models::AI::Assistants::conversation_channel_type
          ) -> Telnyx::Models::AI::Assistants::conversation_channel_type

          attr_reader from_date: Time?

          def from_date=: (Time) -> Time

          attr_reader page: Telnyx::AI::Assistants::ScheduledEventListParams::Page?

          def page=: (
            Telnyx::AI::Assistants::ScheduledEventListParams::Page
          ) -> Telnyx::AI::Assistants::ScheduledEventListParams::Page

          attr_reader to_date: Time?

          def to_date=: (Time) -> Time

          def initialize: (
            ?conversation_channel: Telnyx::Models::AI::Assistants::conversation_channel_type,
            ?from_date: Time,
            ?page: Telnyx::AI::Assistants::ScheduledEventListParams::Page,
            ?to_date: Time,
            ?request_options: Telnyx::request_opts
          ) -> void

          def to_hash: -> {
            conversation_channel: Telnyx::Models::AI::Assistants::conversation_channel_type,
            from_date: Time,
            page: Telnyx::AI::Assistants::ScheduledEventListParams::Page,
            to_date: Time,
            request_options: Telnyx::RequestOptions
          }

          type page = { number: Integer, size: Integer }

          class Page < Telnyx::Internal::Type::BaseModel
            attr_reader number: Integer?

            def number=: (Integer) -> Integer

            attr_reader size: Integer?

            def size=: (Integer) -> Integer

            def initialize: (?number: Integer, ?size: Integer) -> void

            def to_hash: -> { number: Integer, size: Integer }
          end
        end
      end
    end
  end
end
