module Telnyx
  module Models
    module AI
      module Assistants
        type scheduled_sms_event_response =
          {
            assistant_id: String,
            scheduled_at_fixed_datetime: Time,
            telnyx_agent_target: String,
            telnyx_conversation_channel: Telnyx::Models::AI::Assistants::conversation_channel_type,
            telnyx_end_user_target: String,
            text: String,
            conversation_id: String,
            conversation_metadata: ::Hash[Symbol, Telnyx::Models::AI::Assistants::ScheduledSMSEventResponse::conversation_metadata],
            created_at: Time,
            errors: ::Array[String],
            retry_count: Integer,
            scheduled_event_id: String,
            status: Telnyx::Models::AI::Assistants::event_status
          }

        class ScheduledSMSEventResponse < Telnyx::Internal::Type::BaseModel
          attr_accessor assistant_id: String

          attr_accessor scheduled_at_fixed_datetime: Time

          attr_accessor telnyx_agent_target: String

          attr_accessor telnyx_conversation_channel: Telnyx::Models::AI::Assistants::conversation_channel_type

          attr_accessor telnyx_end_user_target: String

          attr_accessor text: String

          attr_reader conversation_id: String?

          def conversation_id=: (String) -> String

          attr_reader conversation_metadata: ::Hash[Symbol, Telnyx::Models::AI::Assistants::ScheduledSMSEventResponse::conversation_metadata]?

          def conversation_metadata=: (
            ::Hash[Symbol, Telnyx::Models::AI::Assistants::ScheduledSMSEventResponse::conversation_metadata]
          ) -> ::Hash[Symbol, Telnyx::Models::AI::Assistants::ScheduledSMSEventResponse::conversation_metadata]

          attr_reader created_at: Time?

          def created_at=: (Time) -> Time

          attr_reader errors: ::Array[String]?

          def errors=: (::Array[String]) -> ::Array[String]

          attr_reader retry_count: Integer?

          def retry_count=: (Integer) -> Integer

          attr_reader scheduled_event_id: String?

          def scheduled_event_id=: (String) -> String

          attr_reader status: Telnyx::Models::AI::Assistants::event_status?

          def status=: (
            Telnyx::Models::AI::Assistants::event_status
          ) -> Telnyx::Models::AI::Assistants::event_status

          def initialize: (
            assistant_id: String,
            scheduled_at_fixed_datetime: Time,
            telnyx_agent_target: String,
            telnyx_conversation_channel: Telnyx::Models::AI::Assistants::conversation_channel_type,
            telnyx_end_user_target: String,
            text: String,
            ?conversation_id: String,
            ?conversation_metadata: ::Hash[Symbol, Telnyx::Models::AI::Assistants::ScheduledSMSEventResponse::conversation_metadata],
            ?created_at: Time,
            ?errors: ::Array[String],
            ?retry_count: Integer,
            ?scheduled_event_id: String,
            ?status: Telnyx::Models::AI::Assistants::event_status
          ) -> void

          def to_hash: -> {
            assistant_id: String,
            scheduled_at_fixed_datetime: Time,
            telnyx_agent_target: String,
            telnyx_conversation_channel: Telnyx::Models::AI::Assistants::conversation_channel_type,
            telnyx_end_user_target: String,
            text: String,
            conversation_id: String,
            conversation_metadata: ::Hash[Symbol, Telnyx::Models::AI::Assistants::ScheduledSMSEventResponse::conversation_metadata],
            created_at: Time,
            errors: ::Array[String],
            retry_count: Integer,
            scheduled_event_id: String,
            status: Telnyx::Models::AI::Assistants::event_status
          }

          type conversation_metadata = String | Integer | bool

          module ConversationMetadata
            extend Telnyx::Internal::Type::Union

            def self?.variants: -> ::Array[Telnyx::Models::AI::Assistants::ScheduledSMSEventResponse::conversation_metadata]
          end
        end
      end
    end
  end
end
