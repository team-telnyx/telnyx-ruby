module Telnyx
  module Models
    type partner_campaign_list_shared_by_me_response =
      {
        page: Integer,
        records: ::Array[Telnyx::Models::PartnerCampaignListSharedByMeResponse::Record],
        total_records: Integer
      }

    class PartnerCampaignListSharedByMeResponse < Telnyx::Internal::Type::BaseModel
      attr_reader page: Integer?

      def page=: (Integer) -> Integer

      attr_reader records: ::Array[Telnyx::Models::PartnerCampaignListSharedByMeResponse::Record]?

      def records=: (
        ::Array[Telnyx::Models::PartnerCampaignListSharedByMeResponse::Record]
      ) -> ::Array[Telnyx::Models::PartnerCampaignListSharedByMeResponse::Record]

      attr_reader total_records: Integer?

      def total_records=: (Integer) -> Integer

      def initialize: (
        ?page: Integer,
        ?records: ::Array[Telnyx::Models::PartnerCampaignListSharedByMeResponse::Record],
        ?total_records: Integer
      ) -> void

      def to_hash: -> {
        page: Integer,
        records: ::Array[Telnyx::Models::PartnerCampaignListSharedByMeResponse::Record],
        total_records: Integer
      }

      type record =
        {
          brand_id: String,
          campaign_id: String,
          usecase: String,
          create_date: String,
          status: String
        }

      class Record < Telnyx::Internal::Type::BaseModel
        attr_accessor brand_id: String

        attr_accessor campaign_id: String

        attr_accessor usecase: String

        attr_reader create_date: String?

        def create_date=: (String) -> String

        attr_reader status: String?

        def status=: (String) -> String

        def initialize: (
          brand_id: String,
          campaign_id: String,
          usecase: String,
          ?create_date: String,
          ?status: String
        ) -> void

        def to_hash: -> {
          brand_id: String,
          campaign_id: String,
          usecase: String,
          create_date: String,
          status: String
        }
      end
    end
  end
end
