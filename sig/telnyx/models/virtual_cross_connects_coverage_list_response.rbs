module Telnyx
  module Models
    type virtual_cross_connects_coverage_list_response =
      {
        data: ::Array[Telnyx::Models::VirtualCrossConnectsCoverageListResponse::Data],
        meta: Telnyx::PaginationMeta
      }

    class VirtualCrossConnectsCoverageListResponse < Telnyx::Internal::Type::BaseModel
      attr_reader data: ::Array[Telnyx::Models::VirtualCrossConnectsCoverageListResponse::Data]?

      def data=: (
        ::Array[Telnyx::Models::VirtualCrossConnectsCoverageListResponse::Data]
      ) -> ::Array[Telnyx::Models::VirtualCrossConnectsCoverageListResponse::Data]

      attr_reader meta: Telnyx::PaginationMeta?

      def meta=: (Telnyx::PaginationMeta) -> Telnyx::PaginationMeta

      def initialize: (
        ?data: ::Array[Telnyx::Models::VirtualCrossConnectsCoverageListResponse::Data],
        ?meta: Telnyx::PaginationMeta
      ) -> void

      def to_hash: -> {
        data: ::Array[Telnyx::Models::VirtualCrossConnectsCoverageListResponse::Data],
        meta: Telnyx::PaginationMeta
      }

      type data =
        {
          available_bandwidth: ::Array[Float],
          cloud_provider: Telnyx::Models::VirtualCrossConnectsCoverageListResponse::Data::cloud_provider,
          cloud_provider_region: String,
          location: Telnyx::Models::VirtualCrossConnectsCoverageListResponse::Data::Location,
          record_type: String
        }

      class Data < Telnyx::Internal::Type::BaseModel
        attr_reader available_bandwidth: ::Array[Float]?

        def available_bandwidth=: (::Array[Float]) -> ::Array[Float]

        attr_reader cloud_provider: Telnyx::Models::VirtualCrossConnectsCoverageListResponse::Data::cloud_provider?

        def cloud_provider=: (
          Telnyx::Models::VirtualCrossConnectsCoverageListResponse::Data::cloud_provider
        ) -> Telnyx::Models::VirtualCrossConnectsCoverageListResponse::Data::cloud_provider

        attr_reader cloud_provider_region: String?

        def cloud_provider_region=: (String) -> String

        attr_reader location: Telnyx::Models::VirtualCrossConnectsCoverageListResponse::Data::Location?

        def location=: (
          Telnyx::Models::VirtualCrossConnectsCoverageListResponse::Data::Location
        ) -> Telnyx::Models::VirtualCrossConnectsCoverageListResponse::Data::Location

        attr_reader record_type: String?

        def record_type=: (String) -> String

        def initialize: (
          ?available_bandwidth: ::Array[Float],
          ?cloud_provider: Telnyx::Models::VirtualCrossConnectsCoverageListResponse::Data::cloud_provider,
          ?cloud_provider_region: String,
          ?location: Telnyx::Models::VirtualCrossConnectsCoverageListResponse::Data::Location,
          ?record_type: String
        ) -> void

        def to_hash: -> {
          available_bandwidth: ::Array[Float],
          cloud_provider: Telnyx::Models::VirtualCrossConnectsCoverageListResponse::Data::cloud_provider,
          cloud_provider_region: String,
          location: Telnyx::Models::VirtualCrossConnectsCoverageListResponse::Data::Location,
          record_type: String
        }

        type cloud_provider = :aws | :azure | :gce

        module CloudProvider
          extend Telnyx::Internal::Type::Enum

          AWS: :aws
          AZURE: :azure
          GCE: :gce

          def self?.values: -> ::Array[Telnyx::Models::VirtualCrossConnectsCoverageListResponse::Data::cloud_provider]
        end

        type location =
          {
            code: String,
            name: String,
            pop: String,
            region: String,
            site: String
          }

        class Location < Telnyx::Internal::Type::BaseModel
          attr_reader code: String?

          def code=: (String) -> String

          attr_reader name: String?

          def name=: (String) -> String

          attr_reader pop: String?

          def pop=: (String) -> String

          attr_reader region: String?

          def region=: (String) -> String

          attr_reader site: String?

          def site=: (String) -> String

          def initialize: (
            ?code: String,
            ?name: String,
            ?pop: String,
            ?region: String,
            ?site: String
          ) -> void

          def to_hash: -> {
            code: String,
            name: String,
            pop: String,
            region: String,
            site: String
          }
        end
      end
    end
  end
end
