module Telnyx
  module Models
    type customer_service_record =
      {
        id: String,
        created_at: Time,
        error_message: String,
        phone_number: String,
        record_type: String,
        result: Telnyx::CustomerServiceRecord::Result,
        status: Telnyx::Models::CustomerServiceRecord::status,
        updated_at: Time
      }

    class CustomerServiceRecord < Telnyx::Internal::Type::BaseModel
      attr_reader error_message: String?

      def error_message=: (String) -> String

      attr_reader phone_number: String?

      def phone_number=: (String) -> String

      attr_reader result: Telnyx::CustomerServiceRecord::Result?

      def result=: (
        Telnyx::CustomerServiceRecord::Result
      ) -> Telnyx::CustomerServiceRecord::Result

      attr_reader status: Telnyx::Models::CustomerServiceRecord::status?

      def status=: (
        Telnyx::Models::CustomerServiceRecord::status
      ) -> Telnyx::Models::CustomerServiceRecord::status

      attr_reader id: String?

      def id=: (String) -> String

      attr_reader created_at: Time?

      def created_at=: (Time) -> Time

      attr_reader record_type: String?

      def record_type=: (String) -> String

      attr_reader updated_at: Time?

      def updated_at=: (Time) -> Time

      def initialize: (
        ?id: String,
        ?created_at: Time,
        ?error_message: String,
        ?phone_number: String,
        ?record_type: String,
        ?result: Telnyx::CustomerServiceRecord::Result,
        ?status: Telnyx::Models::CustomerServiceRecord::status,
        ?updated_at: Time
      ) -> void

      def to_hash: -> {
        id: String,
        created_at: Time,
        error_message: String,
        phone_number: String,
        record_type: String,
        result: Telnyx::CustomerServiceRecord::Result,
        status: Telnyx::Models::CustomerServiceRecord::status,
        updated_at: Time
      }

      type result =
        {
          address: Telnyx::CustomerServiceRecord::Result::Address,
          admin: Telnyx::CustomerServiceRecord::Result::Admin,
          associated_phone_numbers: ::Array[String],
          carrier_name: String
        }

      class Result < Telnyx::Internal::Type::BaseModel
        attr_reader address: Telnyx::CustomerServiceRecord::Result::Address?

        def address=: (
          Telnyx::CustomerServiceRecord::Result::Address
        ) -> Telnyx::CustomerServiceRecord::Result::Address

        attr_reader admin: Telnyx::CustomerServiceRecord::Result::Admin?

        def admin=: (
          Telnyx::CustomerServiceRecord::Result::Admin
        ) -> Telnyx::CustomerServiceRecord::Result::Admin

        attr_reader associated_phone_numbers: ::Array[String]?

        def associated_phone_numbers=: (::Array[String]) -> ::Array[String]

        attr_reader carrier_name: String?

        def carrier_name=: (String) -> String

        def initialize: (
          ?address: Telnyx::CustomerServiceRecord::Result::Address,
          ?admin: Telnyx::CustomerServiceRecord::Result::Admin,
          ?associated_phone_numbers: ::Array[String],
          ?carrier_name: String
        ) -> void

        def to_hash: -> {
          address: Telnyx::CustomerServiceRecord::Result::Address,
          admin: Telnyx::CustomerServiceRecord::Result::Admin,
          associated_phone_numbers: ::Array[String],
          carrier_name: String
        }

        type address =
          {
            administrative_area: String,
            full_address: String,
            locality: String,
            postal_code: String,
            street_address: String
          }

        class Address < Telnyx::Internal::Type::BaseModel
          attr_reader administrative_area: String?

          def administrative_area=: (String) -> String

          attr_reader full_address: String?

          def full_address=: (String) -> String

          attr_reader locality: String?

          def locality=: (String) -> String

          attr_reader postal_code: String?

          def postal_code=: (String) -> String

          attr_reader street_address: String?

          def street_address=: (String) -> String

          def initialize: (
            ?administrative_area: String,
            ?full_address: String,
            ?locality: String,
            ?postal_code: String,
            ?street_address: String
          ) -> void

          def to_hash: -> {
            administrative_area: String,
            full_address: String,
            locality: String,
            postal_code: String,
            street_address: String
          }
        end

        type admin =
          {
            account_number: String,
            authorized_person_name: String,
            billing_phone_number: String,
            name: String
          }

        class Admin < Telnyx::Internal::Type::BaseModel
          attr_reader account_number: String?

          def account_number=: (String) -> String

          attr_reader authorized_person_name: String?

          def authorized_person_name=: (String) -> String

          attr_reader billing_phone_number: String?

          def billing_phone_number=: (String) -> String

          attr_reader name: String?

          def name=: (String) -> String

          def initialize: (
            ?account_number: String,
            ?authorized_person_name: String,
            ?billing_phone_number: String,
            ?name: String
          ) -> void

          def to_hash: -> {
            account_number: String,
            authorized_person_name: String,
            billing_phone_number: String,
            name: String
          }
        end
      end

      type status = :pending | :completed | :failed

      module Status
        extend Telnyx::Internal::Type::Enum

        PENDING: :pending
        COMPLETED: :completed
        FAILED: :failed

        def self?.values: -> ::Array[Telnyx::Models::CustomerServiceRecord::status]
      end
    end
  end
end
