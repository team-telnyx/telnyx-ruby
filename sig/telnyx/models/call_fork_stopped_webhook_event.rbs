module Telnyx
  module Models
    type call_fork_stopped_webhook_event =
      { data: Telnyx::CallForkStoppedWebhookEvent::Data }

    class CallForkStoppedWebhookEvent < Telnyx::Internal::Type::BaseModel
      attr_reader data: Telnyx::CallForkStoppedWebhookEvent::Data?

      def data=: (
        Telnyx::CallForkStoppedWebhookEvent::Data
      ) -> Telnyx::CallForkStoppedWebhookEvent::Data

      def initialize: (?data: Telnyx::CallForkStoppedWebhookEvent::Data) -> void

      def to_hash: -> { data: Telnyx::CallForkStoppedWebhookEvent::Data }

      type data =
        {
          id: String,
          event_type: Telnyx::Models::CallForkStoppedWebhookEvent::Data::event_type,
          occurred_at: Time,
          payload: Telnyx::CallForkStoppedWebhookEvent::Data::Payload,
          record_type: Telnyx::Models::CallForkStoppedWebhookEvent::Data::record_type
        }

      class Data < Telnyx::Internal::Type::BaseModel
        attr_reader id: String?

        def id=: (String) -> String

        attr_reader event_type: Telnyx::Models::CallForkStoppedWebhookEvent::Data::event_type?

        def event_type=: (
          Telnyx::Models::CallForkStoppedWebhookEvent::Data::event_type
        ) -> Telnyx::Models::CallForkStoppedWebhookEvent::Data::event_type

        attr_reader occurred_at: Time?

        def occurred_at=: (Time) -> Time

        attr_reader payload: Telnyx::CallForkStoppedWebhookEvent::Data::Payload?

        def payload=: (
          Telnyx::CallForkStoppedWebhookEvent::Data::Payload
        ) -> Telnyx::CallForkStoppedWebhookEvent::Data::Payload

        attr_reader record_type: Telnyx::Models::CallForkStoppedWebhookEvent::Data::record_type?

        def record_type=: (
          Telnyx::Models::CallForkStoppedWebhookEvent::Data::record_type
        ) -> Telnyx::Models::CallForkStoppedWebhookEvent::Data::record_type

        def initialize: (
          ?id: String,
          ?event_type: Telnyx::Models::CallForkStoppedWebhookEvent::Data::event_type,
          ?occurred_at: Time,
          ?payload: Telnyx::CallForkStoppedWebhookEvent::Data::Payload,
          ?record_type: Telnyx::Models::CallForkStoppedWebhookEvent::Data::record_type
        ) -> void

        def to_hash: -> {
          id: String,
          event_type: Telnyx::Models::CallForkStoppedWebhookEvent::Data::event_type,
          occurred_at: Time,
          payload: Telnyx::CallForkStoppedWebhookEvent::Data::Payload,
          record_type: Telnyx::Models::CallForkStoppedWebhookEvent::Data::record_type
        }

        type event_type = :"call.fork.stopped"

        module EventType
          extend Telnyx::Internal::Type::Enum

          CALL_FORK_STOPPED: :"call.fork.stopped"

          def self?.values: -> ::Array[Telnyx::Models::CallForkStoppedWebhookEvent::Data::event_type]
        end

        type payload =
          {
            call_control_id: String,
            call_leg_id: String,
            call_session_id: String,
            client_state: String,
            connection_id: String,
            stream_type: Telnyx::Models::CallForkStoppedWebhookEvent::Data::Payload::stream_type
          }

        class Payload < Telnyx::Internal::Type::BaseModel
          attr_reader call_control_id: String?

          def call_control_id=: (String) -> String

          attr_reader call_leg_id: String?

          def call_leg_id=: (String) -> String

          attr_reader call_session_id: String?

          def call_session_id=: (String) -> String

          attr_reader client_state: String?

          def client_state=: (String) -> String

          attr_reader connection_id: String?

          def connection_id=: (String) -> String

          attr_reader stream_type: Telnyx::Models::CallForkStoppedWebhookEvent::Data::Payload::stream_type?

          def stream_type=: (
            Telnyx::Models::CallForkStoppedWebhookEvent::Data::Payload::stream_type
          ) -> Telnyx::Models::CallForkStoppedWebhookEvent::Data::Payload::stream_type

          def initialize: (
            ?call_control_id: String,
            ?call_leg_id: String,
            ?call_session_id: String,
            ?client_state: String,
            ?connection_id: String,
            ?stream_type: Telnyx::Models::CallForkStoppedWebhookEvent::Data::Payload::stream_type
          ) -> void

          def to_hash: -> {
            call_control_id: String,
            call_leg_id: String,
            call_session_id: String,
            client_state: String,
            connection_id: String,
            stream_type: Telnyx::Models::CallForkStoppedWebhookEvent::Data::Payload::stream_type
          }

          type stream_type = :decrypted

          module StreamType
            extend Telnyx::Internal::Type::Enum

            DECRYPTED: :decrypted

            def self?.values: -> ::Array[Telnyx::Models::CallForkStoppedWebhookEvent::Data::Payload::stream_type]
          end
        end

        type record_type = :event

        module RecordType
          extend Telnyx::Internal::Type::Enum

          EVENT: :event

          def self?.values: -> ::Array[Telnyx::Models::CallForkStoppedWebhookEvent::Data::record_type]
        end
      end
    end
  end
end
