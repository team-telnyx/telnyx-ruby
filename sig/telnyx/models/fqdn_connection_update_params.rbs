module Telnyx
  module Models
    type fqdn_connection_update_params =
      {
        active: bool,
        anchorsite_override: Telnyx::Models::anchorsite_override,
        android_push_credential_id: String?,
        connection_name: String,
        default_on_hold_comfort_noise_enabled: bool,
        dtmf_type: Telnyx::Models::dtmf_type,
        encode_contact_header_enabled: bool,
        encrypted_media: Telnyx::Models::encrypted_media?,
        inbound: Telnyx::InboundFqdn,
        ios_push_credential_id: String?,
        :onnet_t38_passthrough_enabled => bool,
        outbound: Telnyx::OutboundFqdn,
        rtcp_settings: Telnyx::ConnectionRtcpSettings,
        tags: ::Array[String],
        transport_protocol: Telnyx::Models::transport_protocol,
        webhook_api_version: Telnyx::Models::webhook_api_version,
        webhook_event_failover_url: String?,
        webhook_event_url: String,
        webhook_timeout_secs: Integer?
      }
      & Telnyx::Internal::Type::request_parameters

    class FqdnConnectionUpdateParams < Telnyx::Internal::Type::BaseModel
      extend Telnyx::Internal::Type::RequestParameters::Converter
      include Telnyx::Internal::Type::RequestParameters

      attr_reader active: bool?

      def active=: (bool) -> bool

      attr_reader anchorsite_override: Telnyx::Models::anchorsite_override?

      def anchorsite_override=: (
        Telnyx::Models::anchorsite_override
      ) -> Telnyx::Models::anchorsite_override

      attr_accessor android_push_credential_id: String?

      attr_reader connection_name: String?

      def connection_name=: (String) -> String

      attr_reader default_on_hold_comfort_noise_enabled: bool?

      def default_on_hold_comfort_noise_enabled=: (bool) -> bool

      attr_reader dtmf_type: Telnyx::Models::dtmf_type?

      def dtmf_type=: (Telnyx::Models::dtmf_type) -> Telnyx::Models::dtmf_type

      attr_reader encode_contact_header_enabled: bool?

      def encode_contact_header_enabled=: (bool) -> bool

      attr_accessor encrypted_media: Telnyx::Models::encrypted_media?

      attr_reader inbound: Telnyx::InboundFqdn?

      def inbound=: (Telnyx::InboundFqdn) -> Telnyx::InboundFqdn

      attr_accessor ios_push_credential_id: String?

      attr_reader onnet_t38_passthrough_enabled: bool?

      def onnet_t38_passthrough_enabled=: (bool) -> bool

      attr_reader outbound: Telnyx::OutboundFqdn?

      def outbound=: (Telnyx::OutboundFqdn) -> Telnyx::OutboundFqdn

      attr_reader rtcp_settings: Telnyx::ConnectionRtcpSettings?

      def rtcp_settings=: (
        Telnyx::ConnectionRtcpSettings
      ) -> Telnyx::ConnectionRtcpSettings

      attr_reader tags: ::Array[String]?

      def tags=: (::Array[String]) -> ::Array[String]

      attr_reader transport_protocol: Telnyx::Models::transport_protocol?

      def transport_protocol=: (
        Telnyx::Models::transport_protocol
      ) -> Telnyx::Models::transport_protocol

      attr_reader webhook_api_version: Telnyx::Models::webhook_api_version?

      def webhook_api_version=: (
        Telnyx::Models::webhook_api_version
      ) -> Telnyx::Models::webhook_api_version

      attr_accessor webhook_event_failover_url: String?

      attr_reader webhook_event_url: String?

      def webhook_event_url=: (String) -> String

      attr_accessor webhook_timeout_secs: Integer?

      def initialize: (
        ?active: bool,
        ?anchorsite_override: Telnyx::Models::anchorsite_override,
        ?android_push_credential_id: String?,
        ?connection_name: String,
        ?default_on_hold_comfort_noise_enabled: bool,
        ?dtmf_type: Telnyx::Models::dtmf_type,
        ?encode_contact_header_enabled: bool,
        ?encrypted_media: Telnyx::Models::encrypted_media?,
        ?inbound: Telnyx::InboundFqdn,
        ?ios_push_credential_id: String?,
        ?onnet_t38_passthrough_enabled: bool,
        ?outbound: Telnyx::OutboundFqdn,
        ?rtcp_settings: Telnyx::ConnectionRtcpSettings,
        ?tags: ::Array[String],
        ?transport_protocol: Telnyx::Models::transport_protocol,
        ?webhook_api_version: Telnyx::Models::webhook_api_version,
        ?webhook_event_failover_url: String?,
        ?webhook_event_url: String,
        ?webhook_timeout_secs: Integer?,
        ?request_options: Telnyx::request_opts
      ) -> void

      def to_hash: -> {
        active: bool,
        anchorsite_override: Telnyx::Models::anchorsite_override,
        android_push_credential_id: String?,
        connection_name: String,
        default_on_hold_comfort_noise_enabled: bool,
        dtmf_type: Telnyx::Models::dtmf_type,
        encode_contact_header_enabled: bool,
        encrypted_media: Telnyx::Models::encrypted_media?,
        inbound: Telnyx::InboundFqdn,
        ios_push_credential_id: String?,
        :onnet_t38_passthrough_enabled => bool,
        outbound: Telnyx::OutboundFqdn,
        rtcp_settings: Telnyx::ConnectionRtcpSettings,
        tags: ::Array[String],
        transport_protocol: Telnyx::Models::transport_protocol,
        webhook_api_version: Telnyx::Models::webhook_api_version,
        webhook_event_failover_url: String?,
        webhook_event_url: String,
        webhook_timeout_secs: Integer?,
        request_options: Telnyx::RequestOptions
      }
    end
  end
end
