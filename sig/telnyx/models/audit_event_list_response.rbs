module Telnyx
  module Models
    type audit_event_list_response =
      {
        data: ::Array[Telnyx::Models::AuditEventListResponse::Data],
        meta: Telnyx::Models::AuditEventListResponse::Meta
      }

    class AuditEventListResponse < Telnyx::Internal::Type::BaseModel
      attr_reader data: ::Array[Telnyx::Models::AuditEventListResponse::Data]?

      def data=: (
        ::Array[Telnyx::Models::AuditEventListResponse::Data]
      ) -> ::Array[Telnyx::Models::AuditEventListResponse::Data]

      attr_reader meta: Telnyx::Models::AuditEventListResponse::Meta?

      def meta=: (
        Telnyx::Models::AuditEventListResponse::Meta
      ) -> Telnyx::Models::AuditEventListResponse::Meta

      def initialize: (
        ?data: ::Array[Telnyx::Models::AuditEventListResponse::Data],
        ?meta: Telnyx::Models::AuditEventListResponse::Meta
      ) -> void

      def to_hash: -> {
        data: ::Array[Telnyx::Models::AuditEventListResponse::Data],
        meta: Telnyx::Models::AuditEventListResponse::Meta
      }

      type data =
        {
          id: String,
          alternate_resource_id: String?,
          change_made_by: Telnyx::Models::AuditEventListResponse::Data::change_made_by,
          change_type: String,
          changes: ::Array[Telnyx::Models::AuditEventListResponse::Data::Change]?,
          created_at: Time,
          organization_id: String,
          record_type: String,
          resource_id: String,
          user_id: String
        }

      class Data < Telnyx::Internal::Type::BaseModel
        attr_reader id: String?

        def id=: (String) -> String

        attr_accessor alternate_resource_id: String?

        attr_reader change_made_by: Telnyx::Models::AuditEventListResponse::Data::change_made_by?

        def change_made_by=: (
          Telnyx::Models::AuditEventListResponse::Data::change_made_by
        ) -> Telnyx::Models::AuditEventListResponse::Data::change_made_by

        attr_reader change_type: String?

        def change_type=: (String) -> String

        attr_accessor changes: ::Array[Telnyx::Models::AuditEventListResponse::Data::Change]?

        attr_reader created_at: Time?

        def created_at=: (Time) -> Time

        attr_reader organization_id: String?

        def organization_id=: (String) -> String

        attr_reader record_type: String?

        def record_type=: (String) -> String

        attr_reader resource_id: String?

        def resource_id=: (String) -> String

        attr_reader user_id: String?

        def user_id=: (String) -> String

        def initialize: (
          ?id: String,
          ?alternate_resource_id: String?,
          ?change_made_by: Telnyx::Models::AuditEventListResponse::Data::change_made_by,
          ?change_type: String,
          ?changes: ::Array[Telnyx::Models::AuditEventListResponse::Data::Change]?,
          ?created_at: Time,
          ?organization_id: String,
          ?record_type: String,
          ?resource_id: String,
          ?user_id: String
        ) -> void

        def to_hash: -> {
          id: String,
          alternate_resource_id: String?,
          change_made_by: Telnyx::Models::AuditEventListResponse::Data::change_made_by,
          change_type: String,
          changes: ::Array[Telnyx::Models::AuditEventListResponse::Data::Change]?,
          created_at: Time,
          organization_id: String,
          record_type: String,
          resource_id: String,
          user_id: String
        }

        type change_made_by =
          :telnyx | :account_manager | :account_owner | :organization_member

        module ChangeMadeBy
          extend Telnyx::Internal::Type::Enum

          TELNYX: :telnyx
          ACCOUNT_MANAGER: :account_manager
          ACCOUNT_OWNER: :account_owner
          ORGANIZATION_MEMBER: :organization_member

          def self?.values: -> ::Array[Telnyx::Models::AuditEventListResponse::Data::change_made_by]
        end

        type change =
          {
            field: String,
            from: Telnyx::Models::AuditEventListResponse::Data::Change::from?,
            to: Telnyx::Models::AuditEventListResponse::Data::Change::to?
          }

        class Change < Telnyx::Internal::Type::BaseModel
          attr_reader field: String?

          def field=: (String) -> String

          attr_accessor from: Telnyx::Models::AuditEventListResponse::Data::Change::from?

          attr_accessor to: Telnyx::Models::AuditEventListResponse::Data::Change::to?

          def initialize: (
            ?field: String,
            ?from: Telnyx::Models::AuditEventListResponse::Data::Change::from?,
            ?to: Telnyx::Models::AuditEventListResponse::Data::Change::to?
          ) -> void

          def to_hash: -> {
            field: String,
            from: Telnyx::Models::AuditEventListResponse::Data::Change::from?,
            to: Telnyx::Models::AuditEventListResponse::Data::Change::to?
          }

          type from = String | Float | bool | ::Hash[Symbol, top] | ::Array[top]

          module From
            extend Telnyx::Internal::Type::Union

            def self?.variants: -> ::Array[Telnyx::Models::AuditEventListResponse::Data::Change::from]

            UnionMember3Map: Telnyx::Internal::Type::Converter

            UnionMember4Array: Telnyx::Internal::Type::Converter
          end

          type to = String | Float | bool | ::Hash[Symbol, top] | ::Array[top]

          module To
            extend Telnyx::Internal::Type::Union

            def self?.variants: -> ::Array[Telnyx::Models::AuditEventListResponse::Data::Change::to]

            UnionMember3Map: Telnyx::Internal::Type::Converter

            UnionMember4Array: Telnyx::Internal::Type::Converter
          end
        end
      end

      type meta =
        {
          page_number: Integer,
          page_size: Integer,
          total_pages: Integer,
          total_results: Integer
        }

      class Meta < Telnyx::Internal::Type::BaseModel
        attr_reader page_number: Integer?

        def page_number=: (Integer) -> Integer

        attr_reader page_size: Integer?

        def page_size=: (Integer) -> Integer

        attr_reader total_pages: Integer?

        def total_pages=: (Integer) -> Integer

        attr_reader total_results: Integer?

        def total_results=: (Integer) -> Integer

        def initialize: (
          ?page_number: Integer,
          ?page_size: Integer,
          ?total_pages: Integer,
          ?total_results: Integer
        ) -> void

        def to_hash: -> {
          page_number: Integer,
          page_size: Integer,
          total_pages: Integer,
          total_results: Integer
        }
      end
    end
  end
end
