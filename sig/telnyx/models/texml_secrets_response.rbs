module Telnyx
  module Models
    type texml_secrets_response =
      { data: Telnyx::Models::TexmlSecretsResponse::Data }

    class TexmlSecretsResponse < Telnyx::Internal::Type::BaseModel
      attr_reader data: Telnyx::Models::TexmlSecretsResponse::Data?

      def data=: (
        Telnyx::Models::TexmlSecretsResponse::Data
      ) -> Telnyx::Models::TexmlSecretsResponse::Data

      def initialize: (
        ?data: Telnyx::Models::TexmlSecretsResponse::Data
      ) -> void

      def to_hash: -> { data: Telnyx::Models::TexmlSecretsResponse::Data }

      type data =
        {
          name: String,
          value: Telnyx::Models::TexmlSecretsResponse::Data::value
        }

      class Data < Telnyx::Internal::Type::BaseModel
        attr_reader name: String?

        def name=: (String) -> String

        attr_reader value: Telnyx::Models::TexmlSecretsResponse::Data::value?

        def value=: (
          Telnyx::Models::TexmlSecretsResponse::Data::value
        ) -> Telnyx::Models::TexmlSecretsResponse::Data::value

        def initialize: (
          ?name: String,
          ?value: Telnyx::Models::TexmlSecretsResponse::Data::value
        ) -> void

        def to_hash: -> {
          name: String,
          value: Telnyx::Models::TexmlSecretsResponse::Data::value
        }

        type value = :REDACTED

        module Value
          extend Telnyx::Internal::Type::Enum

          REDACTED: :REDACTED

          def self?.values: -> ::Array[Telnyx::Models::TexmlSecretsResponse::Data::value]
        end
      end
    end
  end
end
