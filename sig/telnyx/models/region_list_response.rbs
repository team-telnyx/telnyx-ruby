module Telnyx
  module Models
    type region_list_response =
      { data: ::Array[Telnyx::Models::RegionListResponse::Data] }

    class RegionListResponse < Telnyx::Internal::Type::BaseModel
      attr_reader data: ::Array[Telnyx::Models::RegionListResponse::Data]?

      def data=: (
        ::Array[Telnyx::Models::RegionListResponse::Data]
      ) -> ::Array[Telnyx::Models::RegionListResponse::Data]

      def initialize: (
        ?data: ::Array[Telnyx::Models::RegionListResponse::Data]
      ) -> void

      def to_hash: -> {
        data: ::Array[Telnyx::Models::RegionListResponse::Data]
      }

      type data =
        {
          code: String,
          created_at: String,
          name: String,
          record_type: String,
          supported_interfaces: ::Array[String],
          updated_at: String
        }

      class Data < Telnyx::Internal::Type::BaseModel
        attr_reader code: String?

        def code=: (String) -> String

        attr_reader name: String?

        def name=: (String) -> String

        attr_reader supported_interfaces: ::Array[String]?

        def supported_interfaces=: (::Array[String]) -> ::Array[String]

        attr_reader created_at: String?

        def created_at=: (String) -> String

        attr_reader record_type: String?

        def record_type=: (String) -> String

        attr_reader updated_at: String?

        def updated_at=: (String) -> String

        def initialize: (
          ?code: String,
          ?created_at: String,
          ?name: String,
          ?record_type: String,
          ?supported_interfaces: ::Array[String],
          ?updated_at: String
        ) -> void

        def to_hash: -> {
          code: String,
          created_at: String,
          name: String,
          record_type: String,
          supported_interfaces: ::Array[String],
          updated_at: String
        }
      end
    end
  end
end
