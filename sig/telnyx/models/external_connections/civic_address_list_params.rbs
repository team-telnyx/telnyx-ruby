module Telnyx
  module Models
    module ExternalConnections
      type civic_address_list_params =
        { filter: Telnyx::ExternalConnections::CivicAddressListParams::Filter }
        & Telnyx::Internal::Type::request_parameters

      class CivicAddressListParams < Telnyx::Internal::Type::BaseModel
        extend Telnyx::Internal::Type::RequestParameters::Converter
        include Telnyx::Internal::Type::RequestParameters

        attr_reader filter: Telnyx::ExternalConnections::CivicAddressListParams::Filter?

        def filter=: (
          Telnyx::ExternalConnections::CivicAddressListParams::Filter
        ) -> Telnyx::ExternalConnections::CivicAddressListParams::Filter

        def initialize: (
          ?filter: Telnyx::ExternalConnections::CivicAddressListParams::Filter,
          ?request_options: Telnyx::request_opts
        ) -> void

        def to_hash: -> {
          filter: Telnyx::ExternalConnections::CivicAddressListParams::Filter,
          request_options: Telnyx::RequestOptions
        }

        type filter = { country: ::Array[String] }

        class Filter < Telnyx::Internal::Type::BaseModel
          attr_reader country: ::Array[String]?

          def country=: (::Array[String]) -> ::Array[String]

          def initialize: (?country: ::Array[String]) -> void

          def to_hash: -> { country: ::Array[String] }
        end
      end
    end
  end
end
