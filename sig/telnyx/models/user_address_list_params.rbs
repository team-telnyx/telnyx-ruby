module Telnyx
  module Models
    type user_address_list_params =
      {
        filter: Telnyx::UserAddressListParams::Filter,
        page: Telnyx::UserAddressListParams::Page,
        sort: Telnyx::Models::UserAddressListParams::sort
      }
      & Telnyx::Internal::Type::request_parameters

    class UserAddressListParams < Telnyx::Internal::Type::BaseModel
      extend Telnyx::Internal::Type::RequestParameters::Converter
      include Telnyx::Internal::Type::RequestParameters

      attr_reader filter: Telnyx::UserAddressListParams::Filter?

      def filter=: (
        Telnyx::UserAddressListParams::Filter
      ) -> Telnyx::UserAddressListParams::Filter

      attr_reader page: Telnyx::UserAddressListParams::Page?

      def page=: (
        Telnyx::UserAddressListParams::Page
      ) -> Telnyx::UserAddressListParams::Page

      attr_reader sort: Telnyx::Models::UserAddressListParams::sort?

      def sort=: (
        Telnyx::Models::UserAddressListParams::sort
      ) -> Telnyx::Models::UserAddressListParams::sort

      def initialize: (
        ?filter: Telnyx::UserAddressListParams::Filter,
        ?page: Telnyx::UserAddressListParams::Page,
        ?sort: Telnyx::Models::UserAddressListParams::sort,
        ?request_options: Telnyx::request_opts
      ) -> void

      def to_hash: -> {
        filter: Telnyx::UserAddressListParams::Filter,
        page: Telnyx::UserAddressListParams::Page,
        sort: Telnyx::Models::UserAddressListParams::sort,
        request_options: Telnyx::RequestOptions
      }

      type filter =
        {
          customer_reference: Telnyx::UserAddressListParams::Filter::CustomerReference,
          street_address: Telnyx::UserAddressListParams::Filter::StreetAddress
        }

      class Filter < Telnyx::Internal::Type::BaseModel
        attr_reader customer_reference: Telnyx::UserAddressListParams::Filter::CustomerReference?

        def customer_reference=: (
          Telnyx::UserAddressListParams::Filter::CustomerReference
        ) -> Telnyx::UserAddressListParams::Filter::CustomerReference

        attr_reader street_address: Telnyx::UserAddressListParams::Filter::StreetAddress?

        def street_address=: (
          Telnyx::UserAddressListParams::Filter::StreetAddress
        ) -> Telnyx::UserAddressListParams::Filter::StreetAddress

        def initialize: (
          ?customer_reference: Telnyx::UserAddressListParams::Filter::CustomerReference,
          ?street_address: Telnyx::UserAddressListParams::Filter::StreetAddress
        ) -> void

        def to_hash: -> {
          customer_reference: Telnyx::UserAddressListParams::Filter::CustomerReference,
          street_address: Telnyx::UserAddressListParams::Filter::StreetAddress
        }

        type customer_reference = { contains: String, eq: String }

        class CustomerReference < Telnyx::Internal::Type::BaseModel
          attr_reader contains: String?

          def contains=: (String) -> String

          attr_reader eq: String?

          def eq=: (String) -> String

          def initialize: (?contains: String, ?eq: String) -> void

          def to_hash: -> { contains: String, eq: String }
        end

        type street_address = { contains: String }

        class StreetAddress < Telnyx::Internal::Type::BaseModel
          attr_reader contains: String?

          def contains=: (String) -> String

          def initialize: (?contains: String) -> void

          def to_hash: -> { contains: String }
        end
      end

      type page = { number: Integer, size: Integer }

      class Page < Telnyx::Internal::Type::BaseModel
        attr_reader number: Integer?

        def number=: (Integer) -> Integer

        attr_reader size: Integer?

        def size=: (Integer) -> Integer

        def initialize: (?number: Integer, ?size: Integer) -> void

        def to_hash: -> { number: Integer, size: Integer }
      end

      type sort =
        :created_at
        | :first_name
        | :last_name
        | :business_name
        | :street_address

      module Sort
        extend Telnyx::Internal::Type::Enum

        CREATED_AT: :created_at
        FIRST_NAME: :first_name
        LAST_NAME: :last_name
        BUSINESS_NAME: :business_name
        STREET_ADDRESS: :street_address

        def self?.values: -> ::Array[Telnyx::Models::UserAddressListParams::sort]
      end
    end
  end
end
