module Telnyx
  module Models
    type audit_event_list_params =
      {
        filter: Telnyx::AuditEventListParams::Filter,
        page: Telnyx::AuditEventListParams::Page,
        sort: Telnyx::Models::AuditEventListParams::sort
      }
      & Telnyx::Internal::Type::request_parameters

    class AuditEventListParams < Telnyx::Internal::Type::BaseModel
      extend Telnyx::Internal::Type::RequestParameters::Converter
      include Telnyx::Internal::Type::RequestParameters

      attr_reader filter: Telnyx::AuditEventListParams::Filter?

      def filter=: (
        Telnyx::AuditEventListParams::Filter
      ) -> Telnyx::AuditEventListParams::Filter

      attr_reader page: Telnyx::AuditEventListParams::Page?

      def page=: (
        Telnyx::AuditEventListParams::Page
      ) -> Telnyx::AuditEventListParams::Page

      attr_reader sort: Telnyx::Models::AuditEventListParams::sort?

      def sort=: (
        Telnyx::Models::AuditEventListParams::sort
      ) -> Telnyx::Models::AuditEventListParams::sort

      def initialize: (
        ?filter: Telnyx::AuditEventListParams::Filter,
        ?page: Telnyx::AuditEventListParams::Page,
        ?sort: Telnyx::Models::AuditEventListParams::sort,
        ?request_options: Telnyx::request_opts
      ) -> void

      def to_hash: -> {
        filter: Telnyx::AuditEventListParams::Filter,
        page: Telnyx::AuditEventListParams::Page,
        sort: Telnyx::Models::AuditEventListParams::sort,
        request_options: Telnyx::RequestOptions
      }

      type filter = { created_after: Time, created_before: Time }

      class Filter < Telnyx::Internal::Type::BaseModel
        attr_reader created_after: Time?

        def created_after=: (Time) -> Time

        attr_reader created_before: Time?

        def created_before=: (Time) -> Time

        def initialize: (?created_after: Time, ?created_before: Time) -> void

        def to_hash: -> { created_after: Time, created_before: Time }
      end

      type page = { number: Integer, size: Integer }

      class Page < Telnyx::Internal::Type::BaseModel
        attr_reader number: Integer?

        def number=: (Integer) -> Integer

        attr_reader size: Integer?

        def size=: (Integer) -> Integer

        def initialize: (?number: Integer, ?size: Integer) -> void

        def to_hash: -> { number: Integer, size: Integer }
      end

      type sort = :asc | :desc

      module Sort
        extend Telnyx::Internal::Type::Enum

        ASC: :asc
        DESC: :desc

        def self?.values: -> ::Array[Telnyx::Models::AuditEventListParams::sort]
      end
    end
  end
end
