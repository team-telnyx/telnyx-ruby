module Telnyx
  module Models
    type global_ip_health_check_retrieve_response =
      { data: Telnyx::Models::GlobalIPHealthCheckRetrieveResponse::Data }

    class GlobalIPHealthCheckRetrieveResponse < Telnyx::Internal::Type::BaseModel
      attr_reader data: Telnyx::Models::GlobalIPHealthCheckRetrieveResponse::Data?

      def data=: (
        Telnyx::Models::GlobalIPHealthCheckRetrieveResponse::Data
      ) -> Telnyx::Models::GlobalIPHealthCheckRetrieveResponse::Data

      def initialize: (
        ?data: Telnyx::Models::GlobalIPHealthCheckRetrieveResponse::Data
      ) -> void

      def to_hash: -> {
        data: Telnyx::Models::GlobalIPHealthCheckRetrieveResponse::Data
      }

      type data =
        {
          global_ip_id: String,
          health_check_params: ::Hash[Symbol, top],
          health_check_type: String,
          record_type: String
        }

      class Data < Telnyx::Models::Record
        def global_ip_id: -> String?

        def global_ip_id=: (String _) -> String

        def health_check_params: -> ::Hash[Symbol, top]?

        def health_check_params=: (::Hash[Symbol, top] _) -> ::Hash[Symbol, top]

        def health_check_type: -> String?

        def health_check_type=: (String _) -> String

        def record_type: -> String?

        def record_type=: (String _) -> String

        def initialize: (
          ?global_ip_id: String,
          ?health_check_params: ::Hash[Symbol, top],
          ?health_check_type: String,
          ?record_type: String
        ) -> void

        def to_hash: -> {
          global_ip_id: String,
          health_check_params: ::Hash[Symbol, top],
          health_check_type: String,
          record_type: String
        }
      end
    end
  end
end
