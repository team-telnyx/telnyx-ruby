module Telnyx
  module Models
    type conference_floor_changed_webhook_event =
      {
        id: String,
        event_type: Telnyx::Models::ConferenceFloorChangedWebhookEvent::event_type,
        payload: Telnyx::ConferenceFloorChangedWebhookEvent::Payload,
        record_type: Telnyx::Models::ConferenceFloorChangedWebhookEvent::record_type
      }

    class ConferenceFloorChangedWebhookEvent < Telnyx::Internal::Type::BaseModel
      attr_reader id: String?

      def id=: (String) -> String

      attr_reader event_type: Telnyx::Models::ConferenceFloorChangedWebhookEvent::event_type?

      def event_type=: (
        Telnyx::Models::ConferenceFloorChangedWebhookEvent::event_type
      ) -> Telnyx::Models::ConferenceFloorChangedWebhookEvent::event_type

      attr_reader payload: Telnyx::ConferenceFloorChangedWebhookEvent::Payload?

      def payload=: (
        Telnyx::ConferenceFloorChangedWebhookEvent::Payload
      ) -> Telnyx::ConferenceFloorChangedWebhookEvent::Payload

      attr_reader record_type: Telnyx::Models::ConferenceFloorChangedWebhookEvent::record_type?

      def record_type=: (
        Telnyx::Models::ConferenceFloorChangedWebhookEvent::record_type
      ) -> Telnyx::Models::ConferenceFloorChangedWebhookEvent::record_type

      def initialize: (
        ?id: String,
        ?event_type: Telnyx::Models::ConferenceFloorChangedWebhookEvent::event_type,
        ?payload: Telnyx::ConferenceFloorChangedWebhookEvent::Payload,
        ?record_type: Telnyx::Models::ConferenceFloorChangedWebhookEvent::record_type
      ) -> void

      def to_hash: -> {
        id: String,
        event_type: Telnyx::Models::ConferenceFloorChangedWebhookEvent::event_type,
        payload: Telnyx::ConferenceFloorChangedWebhookEvent::Payload,
        record_type: Telnyx::Models::ConferenceFloorChangedWebhookEvent::record_type
      }

      type event_type = :"conference.floor.changed"

      module EventType
        extend Telnyx::Internal::Type::Enum

        CONFERENCE_FLOOR_CHANGED: :"conference.floor.changed"

        def self?.values: -> ::Array[Telnyx::Models::ConferenceFloorChangedWebhookEvent::event_type]
      end

      type payload =
        {
          call_control_id: String,
          call_leg_id: String,
          call_session_id: String,
          client_state: String,
          conference_id: String,
          connection_id: String,
          occurred_at: Time
        }

      class Payload < Telnyx::Internal::Type::BaseModel
        attr_reader call_control_id: String?

        def call_control_id=: (String) -> String

        attr_reader call_leg_id: String?

        def call_leg_id=: (String) -> String

        attr_reader call_session_id: String?

        def call_session_id=: (String) -> String

        attr_reader client_state: String?

        def client_state=: (String) -> String

        attr_reader conference_id: String?

        def conference_id=: (String) -> String

        attr_reader connection_id: String?

        def connection_id=: (String) -> String

        attr_reader occurred_at: Time?

        def occurred_at=: (Time) -> Time

        def initialize: (
          ?call_control_id: String,
          ?call_leg_id: String,
          ?call_session_id: String,
          ?client_state: String,
          ?conference_id: String,
          ?connection_id: String,
          ?occurred_at: Time
        ) -> void

        def to_hash: -> {
          call_control_id: String,
          call_leg_id: String,
          call_session_id: String,
          client_state: String,
          conference_id: String,
          connection_id: String,
          occurred_at: Time
        }
      end

      type record_type = :event

      module RecordType
        extend Telnyx::Internal::Type::Enum

        EVENT: :event

        def self?.values: -> ::Array[Telnyx::Models::ConferenceFloorChangedWebhookEvent::record_type]
      end
    end
  end
end
