module Telnyx
  module Models
    module Legacy
      module Reporting
        module BatchDetailRecords
          type stt_detail_report_response =
            {
              id: String,
              created_at: Time,
              download_link: String,
              end_date: Time,
              record_type: String,
              start_date: Time,
              status: Telnyx::Models::Legacy::Reporting::BatchDetailRecords::SttDetailReportResponse::status
            }

          class SttDetailReportResponse < Telnyx::Internal::Type::BaseModel
            attr_reader id: String?

            def id=: (String) -> String

            attr_reader created_at: Time?

            def created_at=: (Time) -> Time

            attr_reader download_link: String?

            def download_link=: (String) -> String

            attr_reader end_date: Time?

            def end_date=: (Time) -> Time

            attr_reader record_type: String?

            def record_type=: (String) -> String

            attr_reader start_date: Time?

            def start_date=: (Time) -> Time

            attr_reader status: Telnyx::Models::Legacy::Reporting::BatchDetailRecords::SttDetailReportResponse::status?

            def status=: (
              Telnyx::Models::Legacy::Reporting::BatchDetailRecords::SttDetailReportResponse::status
            ) -> Telnyx::Models::Legacy::Reporting::BatchDetailRecords::SttDetailReportResponse::status

            def initialize: (
              ?id: String,
              ?created_at: Time,
              ?download_link: String,
              ?end_date: Time,
              ?record_type: String,
              ?start_date: Time,
              ?status: Telnyx::Models::Legacy::Reporting::BatchDetailRecords::SttDetailReportResponse::status
            ) -> void

            def to_hash: -> {
              id: String,
              created_at: Time,
              download_link: String,
              end_date: Time,
              record_type: String,
              start_date: Time,
              status: Telnyx::Models::Legacy::Reporting::BatchDetailRecords::SttDetailReportResponse::status
            }

            type status = :PENDING | :COMPLETE | :FAILED | :EXPIRED

            module Status
              extend Telnyx::Internal::Type::Enum

              PENDING: :PENDING
              COMPLETE: :COMPLETE
              FAILED: :FAILED
              EXPIRED: :EXPIRED

              def self?.values: -> ::Array[Telnyx::Models::Legacy::Reporting::BatchDetailRecords::SttDetailReportResponse::status]
            end
          end
        end
      end
    end
  end
end
