module Telnyx
  module Models
    type requirement_list_params =
      {
        filter: Telnyx::RequirementListParams::Filter,
        page: Telnyx::RequirementListParams::Page,
        sort: ::Array[Telnyx::Models::RequirementListParams::sort]
      }
      & Telnyx::Internal::Type::request_parameters

    class RequirementListParams < Telnyx::Internal::Type::BaseModel
      extend Telnyx::Internal::Type::RequestParameters::Converter
      include Telnyx::Internal::Type::RequestParameters

      attr_reader filter: Telnyx::RequirementListParams::Filter?

      def filter=: (
        Telnyx::RequirementListParams::Filter
      ) -> Telnyx::RequirementListParams::Filter

      attr_reader page: Telnyx::RequirementListParams::Page?

      def page=: (
        Telnyx::RequirementListParams::Page
      ) -> Telnyx::RequirementListParams::Page

      attr_reader sort: ::Array[Telnyx::Models::RequirementListParams::sort]?

      def sort=: (
        ::Array[Telnyx::Models::RequirementListParams::sort]
      ) -> ::Array[Telnyx::Models::RequirementListParams::sort]

      def initialize: (
        ?filter: Telnyx::RequirementListParams::Filter,
        ?page: Telnyx::RequirementListParams::Page,
        ?sort: ::Array[Telnyx::Models::RequirementListParams::sort],
        ?request_options: Telnyx::request_opts
      ) -> void

      def to_hash: -> {
        filter: Telnyx::RequirementListParams::Filter,
        page: Telnyx::RequirementListParams::Page,
        sort: ::Array[Telnyx::Models::RequirementListParams::sort],
        request_options: Telnyx::RequestOptions
      }

      type filter =
        {
          action: Telnyx::Models::RequirementListParams::Filter::action,
          country_code: String,
          phone_number_type: Telnyx::Models::RequirementListParams::Filter::phone_number_type
        }

      class Filter < Telnyx::Internal::Type::BaseModel
        attr_reader action: Telnyx::Models::RequirementListParams::Filter::action?

        def action=: (
          Telnyx::Models::RequirementListParams::Filter::action
        ) -> Telnyx::Models::RequirementListParams::Filter::action

        attr_reader country_code: String?

        def country_code=: (String) -> String

        attr_reader phone_number_type: Telnyx::Models::RequirementListParams::Filter::phone_number_type?

        def phone_number_type=: (
          Telnyx::Models::RequirementListParams::Filter::phone_number_type
        ) -> Telnyx::Models::RequirementListParams::Filter::phone_number_type

        def initialize: (
          ?action: Telnyx::Models::RequirementListParams::Filter::action,
          ?country_code: String,
          ?phone_number_type: Telnyx::Models::RequirementListParams::Filter::phone_number_type
        ) -> void

        def to_hash: -> {
          action: Telnyx::Models::RequirementListParams::Filter::action,
          country_code: String,
          phone_number_type: Telnyx::Models::RequirementListParams::Filter::phone_number_type
        }

        type action = :branded_calling | :ordering | :porting

        module Action
          extend Telnyx::Internal::Type::Enum

          BRANDED_CALLING: :branded_calling
          ORDERING: :ordering
          PORTING: :porting

          def self?.values: -> ::Array[Telnyx::Models::RequirementListParams::Filter::action]
        end

        type phone_number_type = :local | :national | :toll_free

        module PhoneNumberType
          extend Telnyx::Internal::Type::Enum

          LOCAL: :local
          NATIONAL: :national
          TOLL_FREE: :toll_free

          def self?.values: -> ::Array[Telnyx::Models::RequirementListParams::Filter::phone_number_type]
        end
      end

      type page = { number: Integer, size: Integer }

      class Page < Telnyx::Internal::Type::BaseModel
        attr_reader number: Integer?

        def number=: (Integer) -> Integer

        attr_reader size: Integer?

        def size=: (Integer) -> Integer

        def initialize: (?number: Integer, ?size: Integer) -> void

        def to_hash: -> { number: Integer, size: Integer }
      end

      type sort =
        :created_at
        | :updated_at
        | :country_code
        | :phone_number_type
        | :"-created_at"
        | :"-updated_at"
        | :"-country_code"
        | :"-phone_number_type"

      module Sort
        extend Telnyx::Internal::Type::Enum

        CREATED_AT: :created_at
        UPDATED_AT: :updated_at
        COUNTRY_CODE: :country_code
        PHONE_NUMBER_TYPE: :phone_number_type
        CREATED_AT_DESC: :"-created_at"
        UPDATED_AT_DESC: :"-updated_at"
        COUNTRY_CODE_DESC: :"-country_code"
        PHONE_NUMBER_TYPE_DESC: :"-phone_number_type"

        def self?.values: -> ::Array[Telnyx::Models::RequirementListParams::sort]
      end
    end
  end
end
