module Telnyx
  module Models
    type brand_list_response =
      {
        page: Integer,
        records: ::Array[Telnyx::Models::BrandListResponse::Record],
        total_records: Integer
      }

    class BrandListResponse < Telnyx::Internal::Type::BaseModel
      attr_reader page: Integer?

      def page=: (Integer) -> Integer

      attr_reader records: ::Array[Telnyx::Models::BrandListResponse::Record]?

      def records=: (
        ::Array[Telnyx::Models::BrandListResponse::Record]
      ) -> ::Array[Telnyx::Models::BrandListResponse::Record]

      attr_reader total_records: Integer?

      def total_records=: (Integer) -> Integer

      def initialize: (
        ?page: Integer,
        ?records: ::Array[Telnyx::Models::BrandListResponse::Record],
        ?total_records: Integer
      ) -> void

      def to_hash: -> {
        page: Integer,
        records: ::Array[Telnyx::Models::BrandListResponse::Record],
        total_records: Integer
      }

      type record =
        {
          assigned_campaings_count: Integer,
          brand_id: String,
          company_name: String,
          created_at: String,
          display_name: String,
          email: String,
          entity_type: Telnyx::Models::entity_type,
          failure_reasons: String,
          identity_status: Telnyx::Models::brand_identity_status,
          status: Telnyx::Models::BrandListResponse::Record::status,
          tcr_brand_id: String,
          updated_at: String,
          website: String
        }

      class Record < Telnyx::Internal::Type::BaseModel
        attr_reader assigned_campaings_count: Integer?

        def assigned_campaings_count=: (Integer) -> Integer

        attr_reader brand_id: String?

        def brand_id=: (String) -> String

        attr_reader company_name: String?

        def company_name=: (String) -> String

        attr_reader created_at: String?

        def created_at=: (String) -> String

        attr_reader display_name: String?

        def display_name=: (String) -> String

        attr_reader email: String?

        def email=: (String) -> String

        attr_reader entity_type: Telnyx::Models::entity_type?

        def entity_type=: (
          Telnyx::Models::entity_type
        ) -> Telnyx::Models::entity_type

        attr_reader failure_reasons: String?

        def failure_reasons=: (String) -> String

        attr_reader identity_status: Telnyx::Models::brand_identity_status?

        def identity_status=: (
          Telnyx::Models::brand_identity_status
        ) -> Telnyx::Models::brand_identity_status

        attr_reader status: Telnyx::Models::BrandListResponse::Record::status?

        def status=: (
          Telnyx::Models::BrandListResponse::Record::status
        ) -> Telnyx::Models::BrandListResponse::Record::status

        attr_reader tcr_brand_id: String?

        def tcr_brand_id=: (String) -> String

        attr_reader updated_at: String?

        def updated_at=: (String) -> String

        attr_reader website: String?

        def website=: (String) -> String

        def initialize: (
          ?assigned_campaings_count: Integer,
          ?brand_id: String,
          ?company_name: String,
          ?created_at: String,
          ?display_name: String,
          ?email: String,
          ?entity_type: Telnyx::Models::entity_type,
          ?failure_reasons: String,
          ?identity_status: Telnyx::Models::brand_identity_status,
          ?status: Telnyx::Models::BrandListResponse::Record::status,
          ?tcr_brand_id: String,
          ?updated_at: String,
          ?website: String
        ) -> void

        def to_hash: -> {
          assigned_campaings_count: Integer,
          brand_id: String,
          company_name: String,
          created_at: String,
          display_name: String,
          email: String,
          entity_type: Telnyx::Models::entity_type,
          failure_reasons: String,
          identity_status: Telnyx::Models::brand_identity_status,
          status: Telnyx::Models::BrandListResponse::Record::status,
          tcr_brand_id: String,
          updated_at: String,
          website: String
        }

        type status = :OK | :REGISTRATION_PENDING | :REGISTRATION_FAILED

        module Status
          extend Telnyx::Internal::Type::Enum

          OK: :OK
          REGISTRATION_PENDING: :REGISTRATION_PENDING
          REGISTRATION_FAILED: :REGISTRATION_FAILED

          def self?.values: -> ::Array[Telnyx::Models::BrandListResponse::Record::status]
        end
      end
    end
  end
end
