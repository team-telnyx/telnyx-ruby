module Telnyx
  module Models
    type report_list_wdrs_response =
      {
        data: ::Array[Telnyx::Models::ReportListWdrsResponse::Data],
        meta: Telnyx::Models::ReportListWdrsResponse::Meta
      }

    class ReportListWdrsResponse < Telnyx::Internal::Type::BaseModel
      attr_reader data: ::Array[Telnyx::Models::ReportListWdrsResponse::Data]?

      def data=: (
        ::Array[Telnyx::Models::ReportListWdrsResponse::Data]
      ) -> ::Array[Telnyx::Models::ReportListWdrsResponse::Data]

      attr_reader meta: Telnyx::Models::ReportListWdrsResponse::Meta?

      def meta=: (
        Telnyx::Models::ReportListWdrsResponse::Meta
      ) -> Telnyx::Models::ReportListWdrsResponse::Meta

      def initialize: (
        ?data: ::Array[Telnyx::Models::ReportListWdrsResponse::Data],
        ?meta: Telnyx::Models::ReportListWdrsResponse::Meta
      ) -> void

      def to_hash: -> {
        data: ::Array[Telnyx::Models::ReportListWdrsResponse::Data],
        meta: Telnyx::Models::ReportListWdrsResponse::Meta
      }

      type data =
        {
          id: String,
          cost: Telnyx::Models::ReportListWdrsResponse::Data::Cost,
          created_at: Time,
          downlink_data: Telnyx::Models::ReportListWdrsResponse::Data::DownlinkData,
          duration_seconds: Float,
          imsi: String,
          mcc: String,
          mnc: String,
          phone_number: String,
          rate: Telnyx::Models::ReportListWdrsResponse::Data::Rate,
          record_type: String,
          sim_card_id: String,
          sim_group_id: String,
          sim_group_name: String,
          uplink_data: Telnyx::Models::ReportListWdrsResponse::Data::UplinkData
        }

      class Data < Telnyx::Internal::Type::BaseModel
        attr_reader id: String?

        def id=: (String) -> String

        attr_reader cost: Telnyx::Models::ReportListWdrsResponse::Data::Cost?

        def cost=: (
          Telnyx::Models::ReportListWdrsResponse::Data::Cost
        ) -> Telnyx::Models::ReportListWdrsResponse::Data::Cost

        attr_reader created_at: Time?

        def created_at=: (Time) -> Time

        attr_reader downlink_data: Telnyx::Models::ReportListWdrsResponse::Data::DownlinkData?

        def downlink_data=: (
          Telnyx::Models::ReportListWdrsResponse::Data::DownlinkData
        ) -> Telnyx::Models::ReportListWdrsResponse::Data::DownlinkData

        attr_reader duration_seconds: Float?

        def duration_seconds=: (Float) -> Float

        attr_reader imsi: String?

        def imsi=: (String) -> String

        attr_reader mcc: String?

        def mcc=: (String) -> String

        attr_reader mnc: String?

        def mnc=: (String) -> String

        attr_reader phone_number: String?

        def phone_number=: (String) -> String

        attr_reader rate: Telnyx::Models::ReportListWdrsResponse::Data::Rate?

        def rate=: (
          Telnyx::Models::ReportListWdrsResponse::Data::Rate
        ) -> Telnyx::Models::ReportListWdrsResponse::Data::Rate

        attr_reader record_type: String?

        def record_type=: (String) -> String

        attr_reader sim_card_id: String?

        def sim_card_id=: (String) -> String

        attr_reader sim_group_id: String?

        def sim_group_id=: (String) -> String

        attr_reader sim_group_name: String?

        def sim_group_name=: (String) -> String

        attr_reader uplink_data: Telnyx::Models::ReportListWdrsResponse::Data::UplinkData?

        def uplink_data=: (
          Telnyx::Models::ReportListWdrsResponse::Data::UplinkData
        ) -> Telnyx::Models::ReportListWdrsResponse::Data::UplinkData

        def initialize: (
          ?id: String,
          ?cost: Telnyx::Models::ReportListWdrsResponse::Data::Cost,
          ?created_at: Time,
          ?downlink_data: Telnyx::Models::ReportListWdrsResponse::Data::DownlinkData,
          ?duration_seconds: Float,
          ?imsi: String,
          ?mcc: String,
          ?mnc: String,
          ?phone_number: String,
          ?rate: Telnyx::Models::ReportListWdrsResponse::Data::Rate,
          ?record_type: String,
          ?sim_card_id: String,
          ?sim_group_id: String,
          ?sim_group_name: String,
          ?uplink_data: Telnyx::Models::ReportListWdrsResponse::Data::UplinkData
        ) -> void

        def to_hash: -> {
          id: String,
          cost: Telnyx::Models::ReportListWdrsResponse::Data::Cost,
          created_at: Time,
          downlink_data: Telnyx::Models::ReportListWdrsResponse::Data::DownlinkData,
          duration_seconds: Float,
          imsi: String,
          mcc: String,
          mnc: String,
          phone_number: String,
          rate: Telnyx::Models::ReportListWdrsResponse::Data::Rate,
          record_type: String,
          sim_card_id: String,
          sim_group_id: String,
          sim_group_name: String,
          uplink_data: Telnyx::Models::ReportListWdrsResponse::Data::UplinkData
        }

        type cost =
          {
            amount: String,
            currency: Telnyx::Models::ReportListWdrsResponse::Data::Cost::currency
          }

        class Cost < Telnyx::Internal::Type::BaseModel
          attr_reader amount: String?

          def amount=: (String) -> String

          attr_reader currency: Telnyx::Models::ReportListWdrsResponse::Data::Cost::currency?

          def currency=: (
            Telnyx::Models::ReportListWdrsResponse::Data::Cost::currency
          ) -> Telnyx::Models::ReportListWdrsResponse::Data::Cost::currency

          def initialize: (
            ?amount: String,
            ?currency: Telnyx::Models::ReportListWdrsResponse::Data::Cost::currency
          ) -> void

          def to_hash: -> {
            amount: String,
            currency: Telnyx::Models::ReportListWdrsResponse::Data::Cost::currency
          }

          type currency = :AUD | :CAD | :EUR | :GBP | :USD

          module Currency
            extend Telnyx::Internal::Type::Enum

            AUD: :AUD
            CAD: :CAD
            EUR: :EUR
            GBP: :GBP
            USD: :USD

            def self?.values: -> ::Array[Telnyx::Models::ReportListWdrsResponse::Data::Cost::currency]
          end
        end

        type downlink_data =
          {
            amount: Float,
            unit: Telnyx::Models::ReportListWdrsResponse::Data::DownlinkData::unit
          }

        class DownlinkData < Telnyx::Internal::Type::BaseModel
          attr_reader amount: Float?

          def amount=: (Float) -> Float

          attr_reader unit: Telnyx::Models::ReportListWdrsResponse::Data::DownlinkData::unit?

          def unit=: (
            Telnyx::Models::ReportListWdrsResponse::Data::DownlinkData::unit
          ) -> Telnyx::Models::ReportListWdrsResponse::Data::DownlinkData::unit

          def initialize: (
            ?amount: Float,
            ?unit: Telnyx::Models::ReportListWdrsResponse::Data::DownlinkData::unit
          ) -> void

          def to_hash: -> {
            amount: Float,
            unit: Telnyx::Models::ReportListWdrsResponse::Data::DownlinkData::unit
          }

          type unit = :B | :KB | :MB

          module Unit
            extend Telnyx::Internal::Type::Enum

            B: :B
            KB: :KB
            MB: :MB

            def self?.values: -> ::Array[Telnyx::Models::ReportListWdrsResponse::Data::DownlinkData::unit]
          end
        end

        type rate =
          {
            amount: String,
            currency: Telnyx::Models::ReportListWdrsResponse::Data::Rate::currency
          }

        class Rate < Telnyx::Internal::Type::BaseModel
          attr_reader amount: String?

          def amount=: (String) -> String

          attr_reader currency: Telnyx::Models::ReportListWdrsResponse::Data::Rate::currency?

          def currency=: (
            Telnyx::Models::ReportListWdrsResponse::Data::Rate::currency
          ) -> Telnyx::Models::ReportListWdrsResponse::Data::Rate::currency

          def initialize: (
            ?amount: String,
            ?currency: Telnyx::Models::ReportListWdrsResponse::Data::Rate::currency
          ) -> void

          def to_hash: -> {
            amount: String,
            currency: Telnyx::Models::ReportListWdrsResponse::Data::Rate::currency
          }

          type currency = :AUD | :CAD | :EUR | :GBP | :USD

          module Currency
            extend Telnyx::Internal::Type::Enum

            AUD: :AUD
            CAD: :CAD
            EUR: :EUR
            GBP: :GBP
            USD: :USD

            def self?.values: -> ::Array[Telnyx::Models::ReportListWdrsResponse::Data::Rate::currency]
          end
        end

        type uplink_data =
          {
            amount: Float,
            unit: Telnyx::Models::ReportListWdrsResponse::Data::UplinkData::unit
          }

        class UplinkData < Telnyx::Internal::Type::BaseModel
          attr_reader amount: Float?

          def amount=: (Float) -> Float

          attr_reader unit: Telnyx::Models::ReportListWdrsResponse::Data::UplinkData::unit?

          def unit=: (
            Telnyx::Models::ReportListWdrsResponse::Data::UplinkData::unit
          ) -> Telnyx::Models::ReportListWdrsResponse::Data::UplinkData::unit

          def initialize: (
            ?amount: Float,
            ?unit: Telnyx::Models::ReportListWdrsResponse::Data::UplinkData::unit
          ) -> void

          def to_hash: -> {
            amount: Float,
            unit: Telnyx::Models::ReportListWdrsResponse::Data::UplinkData::unit
          }

          type unit = :B | :KB | :MB

          module Unit
            extend Telnyx::Internal::Type::Enum

            B: :B
            KB: :KB
            MB: :MB

            def self?.values: -> ::Array[Telnyx::Models::ReportListWdrsResponse::Data::UplinkData::unit]
          end
        end
      end

      type meta =
        {
          page_number: Integer,
          page_size: Integer,
          total_pages: Integer,
          total_results: Integer
        }

      class Meta < Telnyx::Internal::Type::BaseModel
        attr_reader page_number: Integer?

        def page_number=: (Integer) -> Integer

        attr_reader page_size: Integer?

        def page_size=: (Integer) -> Integer

        attr_reader total_pages: Integer?

        def total_pages=: (Integer) -> Integer

        attr_reader total_results: Integer?

        def total_results=: (Integer) -> Integer

        def initialize: (
          ?page_number: Integer,
          ?page_size: Integer,
          ?total_pages: Integer,
          ?total_results: Integer
        ) -> void

        def to_hash: -> {
          page_number: Integer,
          page_size: Integer,
          total_pages: Integer,
          total_results: Integer
        }
      end
    end
  end
end
