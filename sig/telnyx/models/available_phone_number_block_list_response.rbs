module Telnyx
  module Models
    type available_phone_number_block_list_response =
      {
        data: ::Array[Telnyx::Models::AvailablePhoneNumberBlockListResponse::Data],
        meta: Telnyx::Models::AvailablePhoneNumberBlockListResponse::Meta
      }

    class AvailablePhoneNumberBlockListResponse < Telnyx::Internal::Type::BaseModel
      attr_reader data: ::Array[Telnyx::Models::AvailablePhoneNumberBlockListResponse::Data]?

      def data=: (
        ::Array[Telnyx::Models::AvailablePhoneNumberBlockListResponse::Data]
      ) -> ::Array[Telnyx::Models::AvailablePhoneNumberBlockListResponse::Data]

      attr_reader meta: Telnyx::Models::AvailablePhoneNumberBlockListResponse::Meta?

      def meta=: (
        Telnyx::Models::AvailablePhoneNumberBlockListResponse::Meta
      ) -> Telnyx::Models::AvailablePhoneNumberBlockListResponse::Meta

      def initialize: (
        ?data: ::Array[Telnyx::Models::AvailablePhoneNumberBlockListResponse::Data],
        ?meta: Telnyx::Models::AvailablePhoneNumberBlockListResponse::Meta
      ) -> void

      def to_hash: -> {
        data: ::Array[Telnyx::Models::AvailablePhoneNumberBlockListResponse::Data],
        meta: Telnyx::Models::AvailablePhoneNumberBlockListResponse::Meta
      }

      type data =
        {
          cost_information: Telnyx::Models::AvailablePhoneNumberBlockListResponse::Data::CostInformation,
          features: ::Array[Telnyx::Models::AvailablePhoneNumberBlockListResponse::Data::Feature],
          range: Integer,
          record_type: Telnyx::Models::AvailablePhoneNumberBlockListResponse::Data::record_type,
          region_information: ::Array[Telnyx::Models::AvailablePhoneNumberBlockListResponse::Data::RegionInformation],
          starting_number: String
        }

      class Data < Telnyx::Internal::Type::BaseModel
        attr_reader cost_information: Telnyx::Models::AvailablePhoneNumberBlockListResponse::Data::CostInformation?

        def cost_information=: (
          Telnyx::Models::AvailablePhoneNumberBlockListResponse::Data::CostInformation
        ) -> Telnyx::Models::AvailablePhoneNumberBlockListResponse::Data::CostInformation

        attr_reader features: ::Array[Telnyx::Models::AvailablePhoneNumberBlockListResponse::Data::Feature]?

        def features=: (
          ::Array[Telnyx::Models::AvailablePhoneNumberBlockListResponse::Data::Feature]
        ) -> ::Array[Telnyx::Models::AvailablePhoneNumberBlockListResponse::Data::Feature]

        attr_reader range: Integer?

        def range=: (Integer) -> Integer

        attr_reader record_type: Telnyx::Models::AvailablePhoneNumberBlockListResponse::Data::record_type?

        def record_type=: (
          Telnyx::Models::AvailablePhoneNumberBlockListResponse::Data::record_type
        ) -> Telnyx::Models::AvailablePhoneNumberBlockListResponse::Data::record_type

        attr_reader region_information: ::Array[Telnyx::Models::AvailablePhoneNumberBlockListResponse::Data::RegionInformation]?

        def region_information=: (
          ::Array[Telnyx::Models::AvailablePhoneNumberBlockListResponse::Data::RegionInformation]
        ) -> ::Array[Telnyx::Models::AvailablePhoneNumberBlockListResponse::Data::RegionInformation]

        attr_reader starting_number: String?

        def starting_number=: (String) -> String

        def initialize: (
          ?cost_information: Telnyx::Models::AvailablePhoneNumberBlockListResponse::Data::CostInformation,
          ?features: ::Array[Telnyx::Models::AvailablePhoneNumberBlockListResponse::Data::Feature],
          ?range: Integer,
          ?record_type: Telnyx::Models::AvailablePhoneNumberBlockListResponse::Data::record_type,
          ?region_information: ::Array[Telnyx::Models::AvailablePhoneNumberBlockListResponse::Data::RegionInformation],
          ?starting_number: String
        ) -> void

        def to_hash: -> {
          cost_information: Telnyx::Models::AvailablePhoneNumberBlockListResponse::Data::CostInformation,
          features: ::Array[Telnyx::Models::AvailablePhoneNumberBlockListResponse::Data::Feature],
          range: Integer,
          record_type: Telnyx::Models::AvailablePhoneNumberBlockListResponse::Data::record_type,
          region_information: ::Array[Telnyx::Models::AvailablePhoneNumberBlockListResponse::Data::RegionInformation],
          starting_number: String
        }

        type cost_information =
          { currency: String, monthly_cost: String, upfront_cost: String }

        class CostInformation < Telnyx::Internal::Type::BaseModel
          attr_reader currency: String?

          def currency=: (String) -> String

          attr_reader monthly_cost: String?

          def monthly_cost=: (String) -> String

          attr_reader upfront_cost: String?

          def upfront_cost=: (String) -> String

          def initialize: (
            ?currency: String,
            ?monthly_cost: String,
            ?upfront_cost: String
          ) -> void

          def to_hash: -> {
            currency: String,
            monthly_cost: String,
            upfront_cost: String
          }
        end

        type feature = { name: String }

        class Feature < Telnyx::Internal::Type::BaseModel
          attr_reader name: String?

          def name=: (String) -> String

          def initialize: (?name: String) -> void

          def to_hash: -> { name: String }
        end

        type record_type = :available_phone_number_block

        module RecordType
          extend Telnyx::Internal::Type::Enum

          AVAILABLE_PHONE_NUMBER_BLOCK: :available_phone_number_block

          def self?.values: -> ::Array[Telnyx::Models::AvailablePhoneNumberBlockListResponse::Data::record_type]
        end

        type region_information =
          {
            region_name: String,
            region_type: Telnyx::Models::AvailablePhoneNumberBlockListResponse::Data::RegionInformation::region_type
          }

        class RegionInformation < Telnyx::Internal::Type::BaseModel
          attr_reader region_name: String?

          def region_name=: (String) -> String

          attr_reader region_type: Telnyx::Models::AvailablePhoneNumberBlockListResponse::Data::RegionInformation::region_type?

          def region_type=: (
            Telnyx::Models::AvailablePhoneNumberBlockListResponse::Data::RegionInformation::region_type
          ) -> Telnyx::Models::AvailablePhoneNumberBlockListResponse::Data::RegionInformation::region_type

          def initialize: (
            ?region_name: String,
            ?region_type: Telnyx::Models::AvailablePhoneNumberBlockListResponse::Data::RegionInformation::region_type
          ) -> void

          def to_hash: -> {
            region_name: String,
            region_type: Telnyx::Models::AvailablePhoneNumberBlockListResponse::Data::RegionInformation::region_type
          }

          type region_type = :country_code | :rate_center | :state | :location

          module RegionType
            extend Telnyx::Internal::Type::Enum

            COUNTRY_CODE: :country_code
            RATE_CENTER: :rate_center
            STATE: :state
            LOCATION: :location

            def self?.values: -> ::Array[Telnyx::Models::AvailablePhoneNumberBlockListResponse::Data::RegionInformation::region_type]
          end
        end
      end

      type meta = { best_effort_results: Integer, total_results: Integer }

      class Meta < Telnyx::Internal::Type::BaseModel
        attr_reader best_effort_results: Integer?

        def best_effort_results=: (Integer) -> Integer

        attr_reader total_results: Integer?

        def total_results=: (Integer) -> Integer

        def initialize: (
          ?best_effort_results: Integer,
          ?total_results: Integer
        ) -> void

        def to_hash: -> { best_effort_results: Integer, total_results: Integer }
      end
    end
  end
end
