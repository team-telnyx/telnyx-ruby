module Telnyx
  module Models
    type room_recording_retrieve_response =
      { data: Telnyx::Models::RoomRecordingRetrieveResponse::Data }

    class RoomRecordingRetrieveResponse < Telnyx::Internal::Type::BaseModel
      attr_reader data: Telnyx::Models::RoomRecordingRetrieveResponse::Data?

      def data=: (
        Telnyx::Models::RoomRecordingRetrieveResponse::Data
      ) -> Telnyx::Models::RoomRecordingRetrieveResponse::Data

      def initialize: (
        ?data: Telnyx::Models::RoomRecordingRetrieveResponse::Data
      ) -> void

      def to_hash: -> {
        data: Telnyx::Models::RoomRecordingRetrieveResponse::Data
      }

      type data =
        {
          id: String,
          codec: String,
          completed_at: Time,
          created_at: Time,
          download_url: String,
          duration_secs: Integer,
          ended_at: Time,
          participant_id: String,
          record_type: String,
          room_id: String,
          session_id: String,
          size_mb: Float,
          started_at: Time,
          status: Telnyx::Models::RoomRecordingRetrieveResponse::Data::status,
          type: Telnyx::Models::RoomRecordingRetrieveResponse::Data::type_,
          updated_at: Time
        }

      class Data < Telnyx::Internal::Type::BaseModel
        attr_reader id: String?

        def id=: (String) -> String

        attr_reader codec: String?

        def codec=: (String) -> String

        attr_reader completed_at: Time?

        def completed_at=: (Time) -> Time

        attr_reader created_at: Time?

        def created_at=: (Time) -> Time

        attr_reader download_url: String?

        def download_url=: (String) -> String

        attr_reader duration_secs: Integer?

        def duration_secs=: (Integer) -> Integer

        attr_reader ended_at: Time?

        def ended_at=: (Time) -> Time

        attr_reader participant_id: String?

        def participant_id=: (String) -> String

        attr_reader room_id: String?

        def room_id=: (String) -> String

        attr_reader session_id: String?

        def session_id=: (String) -> String

        attr_reader size_mb: Float?

        def size_mb=: (Float) -> Float

        attr_reader started_at: Time?

        def started_at=: (Time) -> Time

        attr_reader status: Telnyx::Models::RoomRecordingRetrieveResponse::Data::status?

        def status=: (
          Telnyx::Models::RoomRecordingRetrieveResponse::Data::status
        ) -> Telnyx::Models::RoomRecordingRetrieveResponse::Data::status

        attr_reader type: Telnyx::Models::RoomRecordingRetrieveResponse::Data::type_?

        def type=: (
          Telnyx::Models::RoomRecordingRetrieveResponse::Data::type_
        ) -> Telnyx::Models::RoomRecordingRetrieveResponse::Data::type_

        attr_reader updated_at: Time?

        def updated_at=: (Time) -> Time

        attr_reader record_type: String?

        def record_type=: (String) -> String

        def initialize: (
          ?id: String,
          ?codec: String,
          ?completed_at: Time,
          ?created_at: Time,
          ?download_url: String,
          ?duration_secs: Integer,
          ?ended_at: Time,
          ?participant_id: String,
          ?record_type: String,
          ?room_id: String,
          ?session_id: String,
          ?size_mb: Float,
          ?started_at: Time,
          ?status: Telnyx::Models::RoomRecordingRetrieveResponse::Data::status,
          ?type: Telnyx::Models::RoomRecordingRetrieveResponse::Data::type_,
          ?updated_at: Time
        ) -> void

        def to_hash: -> {
          id: String,
          codec: String,
          completed_at: Time,
          created_at: Time,
          download_url: String,
          duration_secs: Integer,
          ended_at: Time,
          participant_id: String,
          record_type: String,
          room_id: String,
          session_id: String,
          size_mb: Float,
          started_at: Time,
          status: Telnyx::Models::RoomRecordingRetrieveResponse::Data::status,
          type: Telnyx::Models::RoomRecordingRetrieveResponse::Data::type_,
          updated_at: Time
        }

        type status = :completed | :processing

        module Status
          extend Telnyx::Internal::Type::Enum

          COMPLETED: :completed
          PROCESSING: :processing

          def self?.values: -> ::Array[Telnyx::Models::RoomRecordingRetrieveResponse::Data::status]
        end

        type type_ = :audio | :video

        module Type
          extend Telnyx::Internal::Type::Enum

          AUDIO: :audio
          VIDEO: :video

          def self?.values: -> ::Array[Telnyx::Models::RoomRecordingRetrieveResponse::Data::type_]
        end
      end
    end
  end
end
