module Telnyx
  module Models
    type requirement_group_create_params =
      {
        action: Telnyx::Models::RequirementGroupCreateParams::action,
        country_code: String,
        phone_number_type: Telnyx::Models::RequirementGroupCreateParams::phone_number_type,
        customer_reference: String,
        regulatory_requirements: ::Array[Telnyx::RequirementGroupCreateParams::RegulatoryRequirement]
      }
      & Telnyx::Internal::Type::request_parameters

    class RequirementGroupCreateParams < Telnyx::Internal::Type::BaseModel
      extend Telnyx::Internal::Type::RequestParameters::Converter
      include Telnyx::Internal::Type::RequestParameters

      attr_accessor action: Telnyx::Models::RequirementGroupCreateParams::action

      attr_accessor country_code: String

      attr_accessor phone_number_type: Telnyx::Models::RequirementGroupCreateParams::phone_number_type

      attr_reader customer_reference: String?

      def customer_reference=: (String) -> String

      attr_reader regulatory_requirements: ::Array[Telnyx::RequirementGroupCreateParams::RegulatoryRequirement]?

      def regulatory_requirements=: (
        ::Array[Telnyx::RequirementGroupCreateParams::RegulatoryRequirement]
      ) -> ::Array[Telnyx::RequirementGroupCreateParams::RegulatoryRequirement]

      def initialize: (
        action: Telnyx::Models::RequirementGroupCreateParams::action,
        country_code: String,
        phone_number_type: Telnyx::Models::RequirementGroupCreateParams::phone_number_type,
        ?customer_reference: String,
        ?regulatory_requirements: ::Array[Telnyx::RequirementGroupCreateParams::RegulatoryRequirement],
        ?request_options: Telnyx::request_opts
      ) -> void

      def to_hash: -> {
        action: Telnyx::Models::RequirementGroupCreateParams::action,
        country_code: String,
        phone_number_type: Telnyx::Models::RequirementGroupCreateParams::phone_number_type,
        customer_reference: String,
        regulatory_requirements: ::Array[Telnyx::RequirementGroupCreateParams::RegulatoryRequirement],
        request_options: Telnyx::RequestOptions
      }

      type action = :ordering | :porting

      module Action
        extend Telnyx::Internal::Type::Enum

        ORDERING: :ordering
        PORTING: :porting

        def self?.values: -> ::Array[Telnyx::Models::RequirementGroupCreateParams::action]
      end

      type phone_number_type =
        :local | :toll_free | :mobile | :national | :shared_cost

      module PhoneNumberType
        extend Telnyx::Internal::Type::Enum

        LOCAL: :local
        TOLL_FREE: :toll_free
        MOBILE: :mobile
        NATIONAL: :national
        SHARED_COST: :shared_cost

        def self?.values: -> ::Array[Telnyx::Models::RequirementGroupCreateParams::phone_number_type]
      end

      type regulatory_requirement =
        { field_value: String, requirement_id: String }

      class RegulatoryRequirement < Telnyx::Internal::Type::BaseModel
        attr_reader field_value: String?

        def field_value=: (String) -> String

        attr_reader requirement_id: String?

        def requirement_id=: (String) -> String

        def initialize: (?field_value: String, ?requirement_id: String) -> void

        def to_hash: -> { field_value: String, requirement_id: String }
      end
    end
  end
end
