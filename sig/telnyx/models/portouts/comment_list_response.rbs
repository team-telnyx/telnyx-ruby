module Telnyx
  module Models
    module Portouts
      type comment_list_response =
        {
          data: ::Array[Telnyx::Models::Portouts::CommentListResponse::Data],
          meta: Telnyx::Metadata
        }

      class CommentListResponse < Telnyx::Internal::Type::BaseModel
        attr_reader data: ::Array[Telnyx::Models::Portouts::CommentListResponse::Data]?

        def data=: (
          ::Array[Telnyx::Models::Portouts::CommentListResponse::Data]
        ) -> ::Array[Telnyx::Models::Portouts::CommentListResponse::Data]

        attr_reader meta: Telnyx::Metadata?

        def meta=: (Telnyx::Metadata) -> Telnyx::Metadata

        def initialize: (
          ?data: ::Array[Telnyx::Models::Portouts::CommentListResponse::Data],
          ?meta: Telnyx::Metadata
        ) -> void

        def to_hash: -> {
          data: ::Array[Telnyx::Models::Portouts::CommentListResponse::Data],
          meta: Telnyx::Metadata
        }

        type data =
          {
            id: String,
            body: String,
            created_at: String,
            user_id: String,
            portout_id: String,
            record_type: String
          }

        class Data < Telnyx::Internal::Type::BaseModel
          attr_accessor id: String

          attr_accessor body: String

          attr_accessor created_at: String

          attr_accessor user_id: String

          attr_reader portout_id: String?

          def portout_id=: (String) -> String

          attr_reader record_type: String?

          def record_type=: (String) -> String

          def initialize: (
            id: String,
            body: String,
            created_at: String,
            user_id: String,
            ?portout_id: String,
            ?record_type: String
          ) -> void

          def to_hash: -> {
            id: String,
            body: String,
            created_at: String,
            user_id: String,
            portout_id: String,
            record_type: String
          }
        end
      end
    end
  end
end
