module Telnyx
  module Models
    type conference =
      {
        id: String,
        created_at: String,
        expires_at: String,
        name: String,
        record_type: Telnyx::Models::Conference::record_type,
        connection_id: String,
        end_reason: Telnyx::Models::Conference::end_reason,
        ended_by: Telnyx::Conference::EndedBy,
        region: String,
        status: Telnyx::Models::Conference::status,
        updated_at: String
      }

    class Conference < Telnyx::Internal::Type::BaseModel
      attr_accessor id: String

      attr_accessor created_at: String

      attr_accessor expires_at: String

      attr_accessor name: String

      attr_accessor record_type: Telnyx::Models::Conference::record_type

      attr_reader connection_id: String?

      def connection_id=: (String) -> String

      attr_reader end_reason: Telnyx::Models::Conference::end_reason?

      def end_reason=: (
        Telnyx::Models::Conference::end_reason
      ) -> Telnyx::Models::Conference::end_reason

      attr_reader ended_by: Telnyx::Conference::EndedBy?

      def ended_by=: (
        Telnyx::Conference::EndedBy
      ) -> Telnyx::Conference::EndedBy

      attr_reader region: String?

      def region=: (String) -> String

      attr_reader status: Telnyx::Models::Conference::status?

      def status=: (
        Telnyx::Models::Conference::status
      ) -> Telnyx::Models::Conference::status

      attr_reader updated_at: String?

      def updated_at=: (String) -> String

      def initialize: (
        id: String,
        created_at: String,
        expires_at: String,
        name: String,
        record_type: Telnyx::Models::Conference::record_type,
        ?connection_id: String,
        ?end_reason: Telnyx::Models::Conference::end_reason,
        ?ended_by: Telnyx::Conference::EndedBy,
        ?region: String,
        ?status: Telnyx::Models::Conference::status,
        ?updated_at: String
      ) -> void

      def to_hash: -> {
        id: String,
        created_at: String,
        expires_at: String,
        name: String,
        record_type: Telnyx::Models::Conference::record_type,
        connection_id: String,
        end_reason: Telnyx::Models::Conference::end_reason,
        ended_by: Telnyx::Conference::EndedBy,
        region: String,
        status: Telnyx::Models::Conference::status,
        updated_at: String
      }

      type record_type = :conference

      module RecordType
        extend Telnyx::Internal::Type::Enum

        CONFERENCE: :conference

        def self?.values: -> ::Array[Telnyx::Models::Conference::record_type]
      end

      type end_reason = :all_left | :ended_via_api | :host_left | :time_exceeded

      module EndReason
        extend Telnyx::Internal::Type::Enum

        ALL_LEFT: :all_left
        ENDED_VIA_API: :ended_via_api
        HOST_LEFT: :host_left
        TIME_EXCEEDED: :time_exceeded

        def self?.values: -> ::Array[Telnyx::Models::Conference::end_reason]
      end

      type ended_by = { call_control_id: String, call_session_id: String }

      class EndedBy < Telnyx::Internal::Type::BaseModel
        attr_reader call_control_id: String?

        def call_control_id=: (String) -> String

        attr_reader call_session_id: String?

        def call_session_id=: (String) -> String

        def initialize: (
          ?call_control_id: String,
          ?call_session_id: String
        ) -> void

        def to_hash: -> { call_control_id: String, call_session_id: String }
      end

      type status = :init | :in_progress | :completed

      module Status
        extend Telnyx::Internal::Type::Enum

        INIT: :init
        IN_PROGRESS: :in_progress
        COMPLETED: :completed

        def self?.values: -> ::Array[Telnyx::Models::Conference::status]
      end
    end
  end
end
