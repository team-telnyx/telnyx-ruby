module Telnyx
  module Models
    type notification_event_condition_list_params =
      {
        filter: Telnyx::NotificationEventConditionListParams::Filter,
        page: Telnyx::NotificationEventConditionListParams::Page
      }
      & Telnyx::Internal::Type::request_parameters

    class NotificationEventConditionListParams < Telnyx::Internal::Type::BaseModel
      extend Telnyx::Internal::Type::RequestParameters::Converter
      include Telnyx::Internal::Type::RequestParameters

      attr_reader filter: Telnyx::NotificationEventConditionListParams::Filter?

      def filter=: (
        Telnyx::NotificationEventConditionListParams::Filter
      ) -> Telnyx::NotificationEventConditionListParams::Filter

      attr_reader page: Telnyx::NotificationEventConditionListParams::Page?

      def page=: (
        Telnyx::NotificationEventConditionListParams::Page
      ) -> Telnyx::NotificationEventConditionListParams::Page

      def initialize: (
        ?filter: Telnyx::NotificationEventConditionListParams::Filter,
        ?page: Telnyx::NotificationEventConditionListParams::Page,
        ?request_options: Telnyx::request_opts
      ) -> void

      def to_hash: -> {
        filter: Telnyx::NotificationEventConditionListParams::Filter,
        page: Telnyx::NotificationEventConditionListParams::Page,
        request_options: Telnyx::RequestOptions
      }

      type filter =
        {
          associated_record_type: Telnyx::NotificationEventConditionListParams::Filter::AssociatedRecordType,
          channel_type_id: Telnyx::NotificationEventConditionListParams::Filter::ChannelTypeID,
          notification_channel: Telnyx::NotificationEventConditionListParams::Filter::NotificationChannel,
          notification_event_condition_id: Telnyx::NotificationEventConditionListParams::Filter::NotificationEventConditionID,
          notification_profile_id: Telnyx::NotificationEventConditionListParams::Filter::NotificationProfileID,
          status: Telnyx::NotificationEventConditionListParams::Filter::Status
        }

      class Filter < Telnyx::Internal::Type::BaseModel
        attr_reader associated_record_type: Telnyx::NotificationEventConditionListParams::Filter::AssociatedRecordType?

        def associated_record_type=: (
          Telnyx::NotificationEventConditionListParams::Filter::AssociatedRecordType
        ) -> Telnyx::NotificationEventConditionListParams::Filter::AssociatedRecordType

        attr_reader channel_type_id: Telnyx::NotificationEventConditionListParams::Filter::ChannelTypeID?

        def channel_type_id=: (
          Telnyx::NotificationEventConditionListParams::Filter::ChannelTypeID
        ) -> Telnyx::NotificationEventConditionListParams::Filter::ChannelTypeID

        attr_reader notification_channel: Telnyx::NotificationEventConditionListParams::Filter::NotificationChannel?

        def notification_channel=: (
          Telnyx::NotificationEventConditionListParams::Filter::NotificationChannel
        ) -> Telnyx::NotificationEventConditionListParams::Filter::NotificationChannel

        attr_reader notification_event_condition_id: Telnyx::NotificationEventConditionListParams::Filter::NotificationEventConditionID?

        def notification_event_condition_id=: (
          Telnyx::NotificationEventConditionListParams::Filter::NotificationEventConditionID
        ) -> Telnyx::NotificationEventConditionListParams::Filter::NotificationEventConditionID

        attr_reader notification_profile_id: Telnyx::NotificationEventConditionListParams::Filter::NotificationProfileID?

        def notification_profile_id=: (
          Telnyx::NotificationEventConditionListParams::Filter::NotificationProfileID
        ) -> Telnyx::NotificationEventConditionListParams::Filter::NotificationProfileID

        attr_reader status: Telnyx::NotificationEventConditionListParams::Filter::Status?

        def status=: (
          Telnyx::NotificationEventConditionListParams::Filter::Status
        ) -> Telnyx::NotificationEventConditionListParams::Filter::Status

        def initialize: (
          ?associated_record_type: Telnyx::NotificationEventConditionListParams::Filter::AssociatedRecordType,
          ?channel_type_id: Telnyx::NotificationEventConditionListParams::Filter::ChannelTypeID,
          ?notification_channel: Telnyx::NotificationEventConditionListParams::Filter::NotificationChannel,
          ?notification_event_condition_id: Telnyx::NotificationEventConditionListParams::Filter::NotificationEventConditionID,
          ?notification_profile_id: Telnyx::NotificationEventConditionListParams::Filter::NotificationProfileID,
          ?status: Telnyx::NotificationEventConditionListParams::Filter::Status
        ) -> void

        def to_hash: -> {
          associated_record_type: Telnyx::NotificationEventConditionListParams::Filter::AssociatedRecordType,
          channel_type_id: Telnyx::NotificationEventConditionListParams::Filter::ChannelTypeID,
          notification_channel: Telnyx::NotificationEventConditionListParams::Filter::NotificationChannel,
          notification_event_condition_id: Telnyx::NotificationEventConditionListParams::Filter::NotificationEventConditionID,
          notification_profile_id: Telnyx::NotificationEventConditionListParams::Filter::NotificationProfileID,
          status: Telnyx::NotificationEventConditionListParams::Filter::Status
        }

        type associated_record_type =
          {
            eq: Telnyx::Models::NotificationEventConditionListParams::Filter::AssociatedRecordType::eq
          }

        class AssociatedRecordType < Telnyx::Internal::Type::BaseModel
          attr_reader eq: Telnyx::Models::NotificationEventConditionListParams::Filter::AssociatedRecordType::eq?

          def eq=: (
            Telnyx::Models::NotificationEventConditionListParams::Filter::AssociatedRecordType::eq
          ) -> Telnyx::Models::NotificationEventConditionListParams::Filter::AssociatedRecordType::eq

          def initialize: (
            ?eq: Telnyx::Models::NotificationEventConditionListParams::Filter::AssociatedRecordType::eq
          ) -> void

          def to_hash: -> {
            eq: Telnyx::Models::NotificationEventConditionListParams::Filter::AssociatedRecordType::eq
          }

          type eq = :account | :phone_number

          module Eq
            extend Telnyx::Internal::Type::Enum

            ACCOUNT: :account
            PHONE_NUMBER: :phone_number

            def self?.values: -> ::Array[Telnyx::Models::NotificationEventConditionListParams::Filter::AssociatedRecordType::eq]
          end
        end

        type channel_type_id =
          {
            eq: Telnyx::Models::NotificationEventConditionListParams::Filter::ChannelTypeID::eq
          }

        class ChannelTypeID < Telnyx::Internal::Type::BaseModel
          attr_reader eq: Telnyx::Models::NotificationEventConditionListParams::Filter::ChannelTypeID::eq?

          def eq=: (
            Telnyx::Models::NotificationEventConditionListParams::Filter::ChannelTypeID::eq
          ) -> Telnyx::Models::NotificationEventConditionListParams::Filter::ChannelTypeID::eq

          def initialize: (
            ?eq: Telnyx::Models::NotificationEventConditionListParams::Filter::ChannelTypeID::eq
          ) -> void

          def to_hash: -> {
            eq: Telnyx::Models::NotificationEventConditionListParams::Filter::ChannelTypeID::eq
          }

          type eq = :webhook | :sms | :email | :voice

          module Eq
            extend Telnyx::Internal::Type::Enum

            WEBHOOK: :webhook
            SMS: :sms
            EMAIL: :email
            VOICE: :voice

            def self?.values: -> ::Array[Telnyx::Models::NotificationEventConditionListParams::Filter::ChannelTypeID::eq]
          end
        end

        type notification_channel = { eq: String }

        class NotificationChannel < Telnyx::Internal::Type::BaseModel
          attr_reader eq: String?

          def eq=: (String) -> String

          def initialize: (?eq: String) -> void

          def to_hash: -> { eq: String }
        end

        type notification_event_condition_id = { eq: String }

        class NotificationEventConditionID < Telnyx::Internal::Type::BaseModel
          attr_reader eq: String?

          def eq=: (String) -> String

          def initialize: (?eq: String) -> void

          def to_hash: -> { eq: String }
        end

        type notification_profile_id = { eq: String }

        class NotificationProfileID < Telnyx::Internal::Type::BaseModel
          attr_reader eq: String?

          def eq=: (String) -> String

          def initialize: (?eq: String) -> void

          def to_hash: -> { eq: String }
        end

        type status =
          {
            eq: Telnyx::Models::NotificationEventConditionListParams::Filter::Status::eq
          }

        class Status < Telnyx::Internal::Type::BaseModel
          attr_reader eq: Telnyx::Models::NotificationEventConditionListParams::Filter::Status::eq?

          def eq=: (
            Telnyx::Models::NotificationEventConditionListParams::Filter::Status::eq
          ) -> Telnyx::Models::NotificationEventConditionListParams::Filter::Status::eq

          def initialize: (
            ?eq: Telnyx::Models::NotificationEventConditionListParams::Filter::Status::eq
          ) -> void

          def to_hash: -> {
            eq: Telnyx::Models::NotificationEventConditionListParams::Filter::Status::eq
          }

          type eq =
            :enabled
            | :"enable-received"
            | :"enable-pending"
            | :"enable-submtited"
            | :"delete-received"
            | :"delete-pending"
            | :"delete-submitted"
            | :deleted

          module Eq
            extend Telnyx::Internal::Type::Enum

            ENABLED: :enabled
            ENABLE_RECEIVED: :"enable-received"
            ENABLE_PENDING: :"enable-pending"
            ENABLE_SUBMTITED: :"enable-submtited"
            DELETE_RECEIVED: :"delete-received"
            DELETE_PENDING: :"delete-pending"
            DELETE_SUBMITTED: :"delete-submitted"
            DELETED: :deleted

            def self?.values: -> ::Array[Telnyx::Models::NotificationEventConditionListParams::Filter::Status::eq]
          end
        end
      end

      type page = { number: Integer, size: Integer }

      class Page < Telnyx::Internal::Type::BaseModel
        attr_reader number: Integer?

        def number=: (Integer) -> Integer

        attr_reader size: Integer?

        def size=: (Integer) -> Integer

        def initialize: (?number: Integer, ?size: Integer) -> void

        def to_hash: -> { number: Integer, size: Integer }
      end
    end
  end
end
