module Telnyx
  module Models
    type number_order_status_update_webhook_event =
      {
        data: Telnyx::NumberOrderStatusUpdateWebhookEvent::Data,
        meta: Telnyx::NumberOrderStatusUpdateWebhookEvent::Meta
      }

    class NumberOrderStatusUpdateWebhookEvent < Telnyx::Internal::Type::BaseModel
      attr_accessor data: Telnyx::NumberOrderStatusUpdateWebhookEvent::Data

      attr_accessor meta: Telnyx::NumberOrderStatusUpdateWebhookEvent::Meta

      def initialize: (
        data: Telnyx::NumberOrderStatusUpdateWebhookEvent::Data,
        meta: Telnyx::NumberOrderStatusUpdateWebhookEvent::Meta
      ) -> void

      def to_hash: -> {
        data: Telnyx::NumberOrderStatusUpdateWebhookEvent::Data,
        meta: Telnyx::NumberOrderStatusUpdateWebhookEvent::Meta
      }

      type data =
        {
          id: String,
          event_type: String,
          occurred_at: Time,
          payload: Telnyx::NumberOrderWithPhoneNumbers,
          record_type: String
        }

      class Data < Telnyx::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor event_type: String

        attr_accessor occurred_at: Time

        attr_accessor payload: Telnyx::NumberOrderWithPhoneNumbers

        attr_accessor record_type: String

        def initialize: (
          id: String,
          event_type: String,
          occurred_at: Time,
          payload: Telnyx::NumberOrderWithPhoneNumbers,
          record_type: String
        ) -> void

        def to_hash: -> {
          id: String,
          event_type: String,
          occurred_at: Time,
          payload: Telnyx::NumberOrderWithPhoneNumbers,
          record_type: String
        }
      end

      type meta = { attempt: Integer, delivered_to: String }

      class Meta < Telnyx::Internal::Type::BaseModel
        attr_accessor attempt: Integer

        attr_accessor delivered_to: String

        def initialize: (attempt: Integer, delivered_to: String) -> void

        def to_hash: -> { attempt: Integer, delivered_to: String }
      end
    end
  end
end
