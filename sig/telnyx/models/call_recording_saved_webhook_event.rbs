module Telnyx
  module Models
    type call_recording_saved_webhook_event =
      { data: Telnyx::CallRecordingSavedWebhookEvent::Data }

    class CallRecordingSavedWebhookEvent < Telnyx::Internal::Type::BaseModel
      attr_reader data: Telnyx::CallRecordingSavedWebhookEvent::Data?

      def data=: (
        Telnyx::CallRecordingSavedWebhookEvent::Data
      ) -> Telnyx::CallRecordingSavedWebhookEvent::Data

      def initialize: (
        ?data: Telnyx::CallRecordingSavedWebhookEvent::Data
      ) -> void

      def to_hash: -> { data: Telnyx::CallRecordingSavedWebhookEvent::Data }

      type data =
        {
          id: String,
          event_type: Telnyx::Models::CallRecordingSavedWebhookEvent::Data::event_type,
          occurred_at: Time,
          payload: Telnyx::CallRecordingSavedWebhookEvent::Data::Payload,
          record_type: Telnyx::Models::CallRecordingSavedWebhookEvent::Data::record_type
        }

      class Data < Telnyx::Internal::Type::BaseModel
        attr_reader id: String?

        def id=: (String) -> String

        attr_reader event_type: Telnyx::Models::CallRecordingSavedWebhookEvent::Data::event_type?

        def event_type=: (
          Telnyx::Models::CallRecordingSavedWebhookEvent::Data::event_type
        ) -> Telnyx::Models::CallRecordingSavedWebhookEvent::Data::event_type

        attr_reader occurred_at: Time?

        def occurred_at=: (Time) -> Time

        attr_reader payload: Telnyx::CallRecordingSavedWebhookEvent::Data::Payload?

        def payload=: (
          Telnyx::CallRecordingSavedWebhookEvent::Data::Payload
        ) -> Telnyx::CallRecordingSavedWebhookEvent::Data::Payload

        attr_reader record_type: Telnyx::Models::CallRecordingSavedWebhookEvent::Data::record_type?

        def record_type=: (
          Telnyx::Models::CallRecordingSavedWebhookEvent::Data::record_type
        ) -> Telnyx::Models::CallRecordingSavedWebhookEvent::Data::record_type

        def initialize: (
          ?id: String,
          ?event_type: Telnyx::Models::CallRecordingSavedWebhookEvent::Data::event_type,
          ?occurred_at: Time,
          ?payload: Telnyx::CallRecordingSavedWebhookEvent::Data::Payload,
          ?record_type: Telnyx::Models::CallRecordingSavedWebhookEvent::Data::record_type
        ) -> void

        def to_hash: -> {
          id: String,
          event_type: Telnyx::Models::CallRecordingSavedWebhookEvent::Data::event_type,
          occurred_at: Time,
          payload: Telnyx::CallRecordingSavedWebhookEvent::Data::Payload,
          record_type: Telnyx::Models::CallRecordingSavedWebhookEvent::Data::record_type
        }

        type event_type = :"call.recording.saved"

        module EventType
          extend Telnyx::Internal::Type::Enum

          CALL_RECORDING_SAVED: :"call.recording.saved"

          def self?.values: -> ::Array[Telnyx::Models::CallRecordingSavedWebhookEvent::Data::event_type]
        end

        type payload =
          {
            call_leg_id: String,
            call_session_id: String,
            channels: Telnyx::Models::CallRecordingSavedWebhookEvent::Data::Payload::channels,
            client_state: String,
            connection_id: String,
            public_recording_urls: Telnyx::CallRecordingSavedWebhookEvent::Data::Payload::PublicRecordingURLs,
            recording_ended_at: Time,
            recording_started_at: Time,
            recording_urls: Telnyx::CallRecordingSavedWebhookEvent::Data::Payload::RecordingURLs
          }

        class Payload < Telnyx::Internal::Type::BaseModel
          attr_reader call_leg_id: String?

          def call_leg_id=: (String) -> String

          attr_reader call_session_id: String?

          def call_session_id=: (String) -> String

          attr_reader channels: Telnyx::Models::CallRecordingSavedWebhookEvent::Data::Payload::channels?

          def channels=: (
            Telnyx::Models::CallRecordingSavedWebhookEvent::Data::Payload::channels
          ) -> Telnyx::Models::CallRecordingSavedWebhookEvent::Data::Payload::channels

          attr_reader client_state: String?

          def client_state=: (String) -> String

          attr_reader connection_id: String?

          def connection_id=: (String) -> String

          attr_reader public_recording_urls: Telnyx::CallRecordingSavedWebhookEvent::Data::Payload::PublicRecordingURLs?

          def public_recording_urls=: (
            Telnyx::CallRecordingSavedWebhookEvent::Data::Payload::PublicRecordingURLs
          ) -> Telnyx::CallRecordingSavedWebhookEvent::Data::Payload::PublicRecordingURLs

          attr_reader recording_ended_at: Time?

          def recording_ended_at=: (Time) -> Time

          attr_reader recording_started_at: Time?

          def recording_started_at=: (Time) -> Time

          attr_reader recording_urls: Telnyx::CallRecordingSavedWebhookEvent::Data::Payload::RecordingURLs?

          def recording_urls=: (
            Telnyx::CallRecordingSavedWebhookEvent::Data::Payload::RecordingURLs
          ) -> Telnyx::CallRecordingSavedWebhookEvent::Data::Payload::RecordingURLs

          def initialize: (
            ?call_leg_id: String,
            ?call_session_id: String,
            ?channels: Telnyx::Models::CallRecordingSavedWebhookEvent::Data::Payload::channels,
            ?client_state: String,
            ?connection_id: String,
            ?public_recording_urls: Telnyx::CallRecordingSavedWebhookEvent::Data::Payload::PublicRecordingURLs,
            ?recording_ended_at: Time,
            ?recording_started_at: Time,
            ?recording_urls: Telnyx::CallRecordingSavedWebhookEvent::Data::Payload::RecordingURLs
          ) -> void

          def to_hash: -> {
            call_leg_id: String,
            call_session_id: String,
            channels: Telnyx::Models::CallRecordingSavedWebhookEvent::Data::Payload::channels,
            client_state: String,
            connection_id: String,
            public_recording_urls: Telnyx::CallRecordingSavedWebhookEvent::Data::Payload::PublicRecordingURLs,
            recording_ended_at: Time,
            recording_started_at: Time,
            recording_urls: Telnyx::CallRecordingSavedWebhookEvent::Data::Payload::RecordingURLs
          }

          type channels = :single | :dual

          module Channels
            extend Telnyx::Internal::Type::Enum

            SINGLE: :single
            DUAL: :dual

            def self?.values: -> ::Array[Telnyx::Models::CallRecordingSavedWebhookEvent::Data::Payload::channels]
          end

          type public_recording_urls = { :mp3 => String?, wav: String? }

          class PublicRecordingURLs < Telnyx::Internal::Type::BaseModel
            attr_accessor mp3: String?

            attr_accessor wav: String?

            def initialize: (?mp3: String?, ?wav: String?) -> void

            def to_hash: -> { :mp3 => String?, wav: String? }
          end

          type recording_urls = { :mp3 => String?, wav: String? }

          class RecordingURLs < Telnyx::Internal::Type::BaseModel
            attr_accessor mp3: String?

            attr_accessor wav: String?

            def initialize: (?mp3: String?, ?wav: String?) -> void

            def to_hash: -> { :mp3 => String?, wav: String? }
          end
        end

        type record_type = :event

        module RecordType
          extend Telnyx::Internal::Type::Enum

          EVENT: :event

          def self?.values: -> ::Array[Telnyx::Models::CallRecordingSavedWebhookEvent::Data::record_type]
        end
      end
    end
  end
end
