module Telnyx
  module Models
    type webhook_delivery_retrieve_response =
      { data: Telnyx::Models::WebhookDeliveryRetrieveResponse::Data }

    class WebhookDeliveryRetrieveResponse < Telnyx::Internal::Type::BaseModel
      attr_reader data: Telnyx::Models::WebhookDeliveryRetrieveResponse::Data?

      def data=: (
        Telnyx::Models::WebhookDeliveryRetrieveResponse::Data
      ) -> Telnyx::Models::WebhookDeliveryRetrieveResponse::Data

      def initialize: (
        ?data: Telnyx::Models::WebhookDeliveryRetrieveResponse::Data
      ) -> void

      def to_hash: -> {
        data: Telnyx::Models::WebhookDeliveryRetrieveResponse::Data
      }

      type data =
        {
          id: String,
          attempts: ::Array[Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Attempt],
          finished_at: Time,
          record_type: String,
          started_at: Time,
          status: Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::status,
          user_id: String,
          webhook: Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Webhook
        }

      class Data < Telnyx::Internal::Type::BaseModel
        attr_reader id: String?

        def id=: (String) -> String

        attr_reader attempts: ::Array[Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Attempt]?

        def attempts=: (
          ::Array[Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Attempt]
        ) -> ::Array[Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Attempt]

        attr_reader finished_at: Time?

        def finished_at=: (Time) -> Time

        attr_reader record_type: String?

        def record_type=: (String) -> String

        attr_reader started_at: Time?

        def started_at=: (Time) -> Time

        attr_reader status: Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::status?

        def status=: (
          Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::status
        ) -> Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::status

        attr_reader user_id: String?

        def user_id=: (String) -> String

        attr_reader webhook: Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Webhook?

        def webhook=: (
          Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Webhook
        ) -> Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Webhook

        def initialize: (
          ?id: String,
          ?attempts: ::Array[Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Attempt],
          ?finished_at: Time,
          ?record_type: String,
          ?started_at: Time,
          ?status: Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::status,
          ?user_id: String,
          ?webhook: Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Webhook
        ) -> void

        def to_hash: -> {
          id: String,
          attempts: ::Array[Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Attempt],
          finished_at: Time,
          record_type: String,
          started_at: Time,
          status: Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::status,
          user_id: String,
          webhook: Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Webhook
        }

        type attempt =
          {
            errors: ::Array[Integer],
            finished_at: Time,
            http: Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Attempt::HTTP,
            started_at: Time,
            status: Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Attempt::status
          }

        class Attempt < Telnyx::Internal::Type::BaseModel
          attr_reader errors: ::Array[Integer]?

          def errors=: (::Array[Integer]) -> ::Array[Integer]

          attr_reader finished_at: Time?

          def finished_at=: (Time) -> Time

          attr_reader http: Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Attempt::HTTP?

          def http=: (
            Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Attempt::HTTP
          ) -> Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Attempt::HTTP

          attr_reader started_at: Time?

          def started_at=: (Time) -> Time

          attr_reader status: Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Attempt::status?

          def status=: (
            Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Attempt::status
          ) -> Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Attempt::status

          def initialize: (
            ?errors: ::Array[Integer],
            ?finished_at: Time,
            ?http: Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Attempt::HTTP,
            ?started_at: Time,
            ?status: Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Attempt::status
          ) -> void

          def to_hash: -> {
            errors: ::Array[Integer],
            finished_at: Time,
            http: Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Attempt::HTTP,
            started_at: Time,
            status: Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Attempt::status
          }

          type http =
            {
              request: Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Attempt::HTTP::Request,
              response: Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Attempt::HTTP::Response?
            }

          class HTTP < Telnyx::Internal::Type::BaseModel
            attr_reader request: Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Attempt::HTTP::Request?

            def request=: (
              Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Attempt::HTTP::Request
            ) -> Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Attempt::HTTP::Request

            attr_accessor response: Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Attempt::HTTP::Response?

            def initialize: (
              ?request: Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Attempt::HTTP::Request,
              ?response: Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Attempt::HTTP::Response?
            ) -> void

            def to_hash: -> {
              request: Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Attempt::HTTP::Request,
              response: Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Attempt::HTTP::Response?
            }

            type request = { headers: ::Array[::Array[String]], url: String }

            class Request < Telnyx::Internal::Type::BaseModel
              attr_reader headers: ::Array[::Array[String]]?

              def headers=: (
                ::Array[::Array[String]]
              ) -> ::Array[::Array[String]]

              attr_reader url: String?

              def url=: (String) -> String

              def initialize: (
                ?headers: ::Array[::Array[String]],
                ?url: String
              ) -> void

              def to_hash: -> { headers: ::Array[::Array[String]], url: String }
            end

            type response =
              {
                body: String,
                headers: ::Array[::Array[String]],
                status: Integer
              }

            class Response < Telnyx::Internal::Type::BaseModel
              attr_reader body: String?

              def body=: (String) -> String

              attr_reader headers: ::Array[::Array[String]]?

              def headers=: (
                ::Array[::Array[String]]
              ) -> ::Array[::Array[String]]

              attr_reader status: Integer?

              def status=: (Integer) -> Integer

              def initialize: (
                ?body: String,
                ?headers: ::Array[::Array[String]],
                ?status: Integer
              ) -> void

              def to_hash: -> {
                body: String,
                headers: ::Array[::Array[String]],
                status: Integer
              }
            end
          end

          type status = :delivered | :failed

          module Status
            extend Telnyx::Internal::Type::Enum

            DELIVERED: :delivered
            FAILED: :failed

            def self?.values: -> ::Array[Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Attempt::status]
          end
        end

        type status = :delivered | :failed

        module Status
          extend Telnyx::Internal::Type::Enum

          DELIVERED: :delivered
          FAILED: :failed

          def self?.values: -> ::Array[Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::status]
        end

        type webhook =
          {
            id: String,
            event_type: String,
            occurred_at: Time,
            payload: top,
            record_type: Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Webhook::record_type
          }

        class Webhook < Telnyx::Internal::Type::BaseModel
          attr_reader id: String?

          def id=: (String) -> String

          attr_reader event_type: String?

          def event_type=: (String) -> String

          attr_reader occurred_at: Time?

          def occurred_at=: (Time) -> Time

          attr_reader payload: top?

          def payload=: (top) -> top

          attr_reader record_type: Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Webhook::record_type?

          def record_type=: (
            Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Webhook::record_type
          ) -> Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Webhook::record_type

          def initialize: (
            ?id: String,
            ?event_type: String,
            ?occurred_at: Time,
            ?payload: top,
            ?record_type: Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Webhook::record_type
          ) -> void

          def to_hash: -> {
            id: String,
            event_type: String,
            occurred_at: Time,
            payload: top,
            record_type: Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Webhook::record_type
          }

          type record_type = :event

          module RecordType
            extend Telnyx::Internal::Type::Enum

            EVENT: :event

            def self?.values: -> ::Array[Telnyx::Models::WebhookDeliveryRetrieveResponse::Data::Webhook::record_type]
          end
        end
      end
    end
  end
end
