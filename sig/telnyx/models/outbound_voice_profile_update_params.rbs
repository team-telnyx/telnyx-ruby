module Telnyx
  module Models
    type outbound_voice_profile_update_params =
      {
        name: String,
        billing_group_id: String?,
        call_recording: Telnyx::OutboundCallRecording,
        calling_window: Telnyx::OutboundVoiceProfileUpdateParams::CallingWindow,
        concurrent_call_limit: Integer?,
        daily_spend_limit: String,
        daily_spend_limit_enabled: bool,
        enabled: bool,
        max_destination_rate: Float,
        service_plan: Telnyx::Models::service_plan,
        tags: ::Array[String],
        traffic_type: Telnyx::Models::traffic_type,
        usage_payment_method: Telnyx::Models::usage_payment_method,
        whitelisted_destinations: ::Array[String]
      }
      & Telnyx::Internal::Type::request_parameters

    class OutboundVoiceProfileUpdateParams < Telnyx::Internal::Type::BaseModel
      extend Telnyx::Internal::Type::RequestParameters::Converter
      include Telnyx::Internal::Type::RequestParameters

      attr_accessor name: String

      attr_accessor billing_group_id: String?

      attr_reader call_recording: Telnyx::OutboundCallRecording?

      def call_recording=: (
        Telnyx::OutboundCallRecording
      ) -> Telnyx::OutboundCallRecording

      attr_reader calling_window: Telnyx::OutboundVoiceProfileUpdateParams::CallingWindow?

      def calling_window=: (
        Telnyx::OutboundVoiceProfileUpdateParams::CallingWindow
      ) -> Telnyx::OutboundVoiceProfileUpdateParams::CallingWindow

      attr_accessor concurrent_call_limit: Integer?

      attr_reader daily_spend_limit: String?

      def daily_spend_limit=: (String) -> String

      attr_reader daily_spend_limit_enabled: bool?

      def daily_spend_limit_enabled=: (bool) -> bool

      attr_reader enabled: bool?

      def enabled=: (bool) -> bool

      attr_reader max_destination_rate: Float?

      def max_destination_rate=: (Float) -> Float

      attr_reader service_plan: Telnyx::Models::service_plan?

      def service_plan=: (
        Telnyx::Models::service_plan
      ) -> Telnyx::Models::service_plan

      attr_reader tags: ::Array[String]?

      def tags=: (::Array[String]) -> ::Array[String]

      attr_reader traffic_type: Telnyx::Models::traffic_type?

      def traffic_type=: (
        Telnyx::Models::traffic_type
      ) -> Telnyx::Models::traffic_type

      attr_reader usage_payment_method: Telnyx::Models::usage_payment_method?

      def usage_payment_method=: (
        Telnyx::Models::usage_payment_method
      ) -> Telnyx::Models::usage_payment_method

      attr_reader whitelisted_destinations: ::Array[String]?

      def whitelisted_destinations=: (::Array[String]) -> ::Array[String]

      def initialize: (
        name: String,
        ?billing_group_id: String?,
        ?call_recording: Telnyx::OutboundCallRecording,
        ?calling_window: Telnyx::OutboundVoiceProfileUpdateParams::CallingWindow,
        ?concurrent_call_limit: Integer?,
        ?daily_spend_limit: String,
        ?daily_spend_limit_enabled: bool,
        ?enabled: bool,
        ?max_destination_rate: Float,
        ?service_plan: Telnyx::Models::service_plan,
        ?tags: ::Array[String],
        ?traffic_type: Telnyx::Models::traffic_type,
        ?usage_payment_method: Telnyx::Models::usage_payment_method,
        ?whitelisted_destinations: ::Array[String],
        ?request_options: Telnyx::request_opts
      ) -> void

      def to_hash: -> {
        name: String,
        billing_group_id: String?,
        call_recording: Telnyx::OutboundCallRecording,
        calling_window: Telnyx::OutboundVoiceProfileUpdateParams::CallingWindow,
        concurrent_call_limit: Integer?,
        daily_spend_limit: String,
        daily_spend_limit_enabled: bool,
        enabled: bool,
        max_destination_rate: Float,
        service_plan: Telnyx::Models::service_plan,
        tags: ::Array[String],
        traffic_type: Telnyx::Models::traffic_type,
        usage_payment_method: Telnyx::Models::usage_payment_method,
        whitelisted_destinations: ::Array[String],
        request_options: Telnyx::RequestOptions
      }

      type calling_window =
        { calls_per_cld: Integer, end_time: Time, start_time: Time }

      class CallingWindow < Telnyx::Internal::Type::BaseModel
        attr_reader calls_per_cld: Integer?

        def calls_per_cld=: (Integer) -> Integer

        attr_reader end_time: Time?

        def end_time=: (Time) -> Time

        attr_reader start_time: Time?

        def start_time=: (Time) -> Time

        def initialize: (
          ?calls_per_cld: Integer,
          ?end_time: Time,
          ?start_time: Time
        ) -> void

        def to_hash: -> {
          calls_per_cld: Integer,
          end_time: Time,
          start_time: Time
        }
      end
    end
  end
end
