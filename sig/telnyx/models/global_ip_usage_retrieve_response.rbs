module Telnyx
  module Models
    type global_ip_usage_retrieve_response =
      { data: ::Array[Telnyx::Models::GlobalIPUsageRetrieveResponse::Data] }

    class GlobalIPUsageRetrieveResponse < Telnyx::Internal::Type::BaseModel
      attr_reader data: ::Array[Telnyx::Models::GlobalIPUsageRetrieveResponse::Data]?

      def data=: (
        ::Array[Telnyx::Models::GlobalIPUsageRetrieveResponse::Data]
      ) -> ::Array[Telnyx::Models::GlobalIPUsageRetrieveResponse::Data]

      def initialize: (
        ?data: ::Array[Telnyx::Models::GlobalIPUsageRetrieveResponse::Data]
      ) -> void

      def to_hash: -> {
        data: ::Array[Telnyx::Models::GlobalIPUsageRetrieveResponse::Data]
      }

      type data =
        {
          global_ip: Telnyx::Models::GlobalIPUsageRetrieveResponse::Data::GlobalIP,
          received: Telnyx::Models::GlobalIPUsageRetrieveResponse::Data::Received,
          timestamp: Time,
          transmitted: Telnyx::Models::GlobalIPUsageRetrieveResponse::Data::Transmitted
        }

      class Data < Telnyx::Internal::Type::BaseModel
        attr_reader global_ip: Telnyx::Models::GlobalIPUsageRetrieveResponse::Data::GlobalIP?

        def global_ip=: (
          Telnyx::Models::GlobalIPUsageRetrieveResponse::Data::GlobalIP
        ) -> Telnyx::Models::GlobalIPUsageRetrieveResponse::Data::GlobalIP

        attr_reader received: Telnyx::Models::GlobalIPUsageRetrieveResponse::Data::Received?

        def received=: (
          Telnyx::Models::GlobalIPUsageRetrieveResponse::Data::Received
        ) -> Telnyx::Models::GlobalIPUsageRetrieveResponse::Data::Received

        attr_reader timestamp: Time?

        def timestamp=: (Time) -> Time

        attr_reader transmitted: Telnyx::Models::GlobalIPUsageRetrieveResponse::Data::Transmitted?

        def transmitted=: (
          Telnyx::Models::GlobalIPUsageRetrieveResponse::Data::Transmitted
        ) -> Telnyx::Models::GlobalIPUsageRetrieveResponse::Data::Transmitted

        def initialize: (
          ?global_ip: Telnyx::Models::GlobalIPUsageRetrieveResponse::Data::GlobalIP,
          ?received: Telnyx::Models::GlobalIPUsageRetrieveResponse::Data::Received,
          ?timestamp: Time,
          ?transmitted: Telnyx::Models::GlobalIPUsageRetrieveResponse::Data::Transmitted
        ) -> void

        def to_hash: -> {
          global_ip: Telnyx::Models::GlobalIPUsageRetrieveResponse::Data::GlobalIP,
          received: Telnyx::Models::GlobalIPUsageRetrieveResponse::Data::Received,
          timestamp: Time,
          transmitted: Telnyx::Models::GlobalIPUsageRetrieveResponse::Data::Transmitted
        }

        type global_ip = { id: String, ip_address: String }

        class GlobalIP < Telnyx::Internal::Type::BaseModel
          attr_reader id: String?

          def id=: (String) -> String

          attr_reader ip_address: String?

          def ip_address=: (String) -> String

          def initialize: (?id: String, ?ip_address: String) -> void

          def to_hash: -> { id: String, ip_address: String }
        end

        type received = { amount: Float, unit: String }

        class Received < Telnyx::Internal::Type::BaseModel
          attr_reader amount: Float?

          def amount=: (Float) -> Float

          attr_reader unit: String?

          def unit=: (String) -> String

          def initialize: (?amount: Float, ?unit: String) -> void

          def to_hash: -> { amount: Float, unit: String }
        end

        type transmitted = { amount: Float, unit: String }

        class Transmitted < Telnyx::Internal::Type::BaseModel
          attr_reader amount: Float?

          def amount=: (Float) -> Float

          attr_reader unit: String?

          def unit=: (String) -> String

          def initialize: (?amount: Float, ?unit: String) -> void

          def to_hash: -> { amount: Float, unit: String }
        end
      end
    end
  end
end
