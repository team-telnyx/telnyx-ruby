module Telnyx
  module Internal
    module Type
      class BaseModel
        extend Telnyx::Internal::Type::Converter
        extend Telnyx::Internal::Util::SorbetRuntimeSupport

        type known_field =
          { mode: (:coerce | :dump)?, required: bool, nilable: bool }

        def self.inherited: (self child) -> void

        def self.known_fields: -> ::Hash[Symbol, (Telnyx::Internal::Type::BaseModel::known_field
        & { type_fn: (^-> Telnyx::Internal::Type::Converter::input) })]

        def self.fields: -> ::Hash[Symbol, (Telnyx::Internal::Type::BaseModel::known_field
        & { type: Telnyx::Internal::Type::Converter::input })]

        private def self.add_field: (
          Symbol name_sym,
          required: bool,
          type_info: {
            const: (nil | bool | Integer | Float | Symbol)?,
            enum: ^-> Telnyx::Internal::Type::Converter::input?,
            union: ^-> Telnyx::Internal::Type::Converter::input?,
            api_name: Symbol
          }
          | ^-> Telnyx::Internal::Type::Converter::input
          | Telnyx::Internal::Type::Converter::input,
          spec: ::Hash[Symbol, top]
        ) -> void

        def self.required: (
          Symbol name_sym,
          ::Hash[Symbol, top]
          | ^-> Telnyx::Internal::Type::Converter::input
          | Telnyx::Internal::Type::Converter::input type_info,
          ?::Hash[Symbol, top] spec
        ) -> void

        def self.optional: (
          Symbol name_sym,
          ::Hash[Symbol, top]
          | ^-> Telnyx::Internal::Type::Converter::input
          | Telnyx::Internal::Type::Converter::input type_info,
          ?::Hash[Symbol, top] spec
        ) -> void

        private def self.request_only: { -> void } -> void

        private def self.response_only: { -> void } -> void

        def self.==: (top other) -> bool

        def self.hash: -> Integer

        def ==: (top other) -> bool

        def hash: -> Integer

        def self.coerce: (
          Telnyx::Internal::Type::BaseModel | ::Hash[top, top] | top value,
          state: Telnyx::Internal::Type::Converter::coerce_state
        ) -> (instance | top)

        def self.dump: (
          instance | top value,
          state: Telnyx::Internal::Type::Converter::dump_state
        ) -> (::Hash[top, top] | top)

        def self.to_sorbet_type: -> top

        def self.recursively_to_h: (
          Telnyx::Internal::Type::BaseModel model,
          convert: bool
        ) -> ::Hash[Symbol, top]

        def []: (Symbol key) -> top?

        def to_h: -> ::Hash[Symbol, top]

        alias to_hash to_h

        def deep_to_h: -> ::Hash[Symbol, top]

        def deconstruct_keys: (::Array[Symbol]? keys) -> ::Hash[Symbol, top]

        def to_json: (*top a) -> String

        def to_yaml: (*top a) -> String

        def initialize: (?::Hash[Symbol, top] | instance data) -> void

        def self.inspect: (?depth: Integer) -> String

        def to_s: -> String

        def inspect: -> String
      end
    end
  end
end
