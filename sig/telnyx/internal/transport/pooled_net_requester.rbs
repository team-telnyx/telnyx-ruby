module Telnyx
  module Internal
    module Transport
      class PooledNetRequester
        extend Telnyx::Internal::Util::SorbetRuntimeSupport

        type request =
          {
            method: Symbol,
            url: URI::Generic,
            headers: ::Hash[String, String],
            body: top,
            deadline: Float
          }

        KEEP_ALIVE_TIMEOUT: 30

        DEFAULT_MAX_CONNECTIONS: Integer

        def self.connect: (URI::Generic url) -> top

        def self.calibrate_socket_timeout: (top conn, Float deadline) -> void

        def self.build_request: (
          Telnyx::Internal::Transport::PooledNetRequester::request request
        ) {
          (String arg0) -> void
        } -> [top, (^-> void)]

        private def with_pool: (
          URI::Generic url,
          deadline: Float
        ) {
          (top arg0) -> void
        } -> void

        def execute: (
          Telnyx::Internal::Transport::PooledNetRequester::request request
        ) -> [Integer, top, Enumerable[String]]

        def initialize: (?size: Integer) -> void
      end
    end
  end
end
